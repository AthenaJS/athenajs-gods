/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 106);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./~/inherits/inherits_browser.js ***!
  \****************************************/
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** ./~/debug/src/browser.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ 61);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1)))

/***/ }),
/* 4 */
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ../athenajs/dist/athenajs.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AthenaJS"] = factory();
	else
		root["AthenaJS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 46);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* exports provided: default */
/* exports used: default */
/*!*****************************!*\
  !*** ./js/Core/Deferred.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise__ = __webpack_require__(/*! es6-promise */ 22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_es6_promise__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * Simple wrapper for ES6 native Promise
 */

var Deferred = function Deferred() {
    var _this = this;

    _classCallCheck(this, Deferred);

    this.promise = new __WEBPACK_IMPORTED_MODULE_0_es6_promise___default.a(function (resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
    });
};

/* harmony default export */ __webpack_exports__["a"] = (Deferred);

/***/ }),
/* 1 */
/* exports provided: default */
/* exports used: default */
/*!*********************!*\
  !*** ./js/FX/FX.js ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Fade__ = __webpack_require__(/*! FX/Effect/Fade */ 26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_FX_Effect_Rotate__ = __webpack_require__(/*! FX/Effect/Rotate */ 28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_FX_Effect_Custom__ = __webpack_require__(/*! FX/Effect/Custom */ 25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_FX_Effect_Mosaic__ = __webpack_require__(/*! FX/Effect/Mosaic */ 27);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import Mosaic from 'Mosaic';





/*jshint devel: true, bitwise: false*/
var effects = {},
    easing = {};

var FX = function () {
    function FX() {
        _classCallCheck(this, FX);

        // by default, add linear easing, other easing are defined in Easing.js and may be added at runtime
        this.addEasing('linear', function (t) {
            return t;
        });
    }

    _createClass(FX, [{
        key: 'addFX',
        value: function addFX(fxName, fxClass) {
            effects[fxName] = fxClass;
        }
    }, {
        key: 'getEffect',
        value: function getEffect(fxName) {
            return effects[fxName];
        }
    }, {
        key: 'addEasing',
        value: function addEasing(easingName, easingFn) {
            easing[easingName] = easingFn;
        }
    }, {
        key: 'getEasing',
        value: function getEasing(easingName) {
            return easing[easingName];
        }
    }]);

    return FX;
}();

;

var instance = new FX();

instance.addFX('Mosaic', __WEBPACK_IMPORTED_MODULE_3_FX_Effect_Mosaic__["a" /* default */]);
instance.addFX('Fade', __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Fade__["a" /* default */]);
instance.addFX('Rotate', __WEBPACK_IMPORTED_MODULE_1_FX_Effect_Rotate__["a" /* default */]);
instance.addFX('Custom', __WEBPACK_IMPORTED_MODULE_2_FX_Effect_Custom__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (instance);

/***/ }),
/* 2 */
/* exports provided: default */
/* exports used: default */
/*!************************!*\
  !*** ./js/Map/Tile.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*jshint devel: true, bitwise: false*/
var Tile = function () {
	function Tile(options) {
		_classCallCheck(this, Tile);

		this.offsetX = options.offsetX || 0;
		this.offsetY = options.offsetY || 0;
		this.width = options.width || 0;
		this.height = options.height || 0;

		// move
		this.inertia = options.inertia || 1; // this is the inertia factor
		this.upCollide = options.upCollide || true; // will object collide when dropping over this tile ?
		this.downCollide = options.downCollide || true;
	}

	_createClass(Tile, null, [{
		key: "TYPE",
		get: function get() {
			return {
				AIR: 1,
				WALL: 2,
				LADDER: 3
			};
		}
	}]);

	return Tile;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Tile);

/***/ }),
/* 3 */
/* exports provided: default */
/* exports used: default */
/*!****************************************!*\
  !*** ./js/Object/Behavior/Behavior.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*jshint devel: true, bitwise: false*/
/**
 * Base class for behaviors.
 * 
 * A behavior is a class that describes how a graphical object moves during the time.
 * 
 * Every behavior should implement these two methods:
 * 
 * - onMove()
 * - getMapEvent()
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager.
 * @param {Object} options An hash with behavior-specific properties.
 * @param {Number} [options.gravity=0] The object's gravity.
 * @param {Number} [options.vx=0] The object's horizontal velocity.
 * @param {Number} [options.vy=0] The object's vertical velocity.
 * @param {Function} [options.onVXChange=undefined] An optional callback to call when changing vx direction
 * @param {Function} [options.onVYChange=undefined] An optional callback to call when changing vy direction
 *
 */
var Behavior = function () {
    function Behavior(sprite, Input, options) {
        _classCallCheck(this, Behavior);

        this.sprite = sprite;
        this.Input = Input;
        sprite.gravity = typeof options.gravity !== 'undefined' ? options.gravity : 0;
        sprite.vx = typeof options.vx !== 'undefined' ? options.vx : 0;
        sprite.vy = typeof options.vy !== 'undefined' ? options.vy : 0;
        this.checkWalls = options.checkWalls || false;
        this.checkFall = options.checkFall || false;

        this.onVXChange = options.onVXChange || null;
        this.onVYChange = options.onVYChange || null;
    }

    _createClass(Behavior, [{
        key: 'onMove',
        value: function onMove(t) {
            // does nothing
        }
    }, {
        key: 'getMapEvent',
        value: function getMapEvent() {
            return this.sprite.currentMap.mapEvent;
        }
    }]);

    return Behavior;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Behavior);

/***/ }),
/* 4 */
/* exports provided: default */
/* exports used: default */
/*!**********************************!*\
  !*** ./js/Audio/AudioManager.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*jshint devel: true*/
/**
 * `AudioManager` handles playback of audio files loaded using the `ResourceManager`
 * 
 * @property {Object} audioCache An hash that stores in-use sounds.
 * The key is the id of the sound.
 * @property {boolean} enabled This is set to false when sound playback is disabled.
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    audioCache: {},
    enabled: true,
    /**
     * Adds a new sound element to the audio cache.
     * *Note* if a sound with the same id has already been added, it will be replaced
     * by the new one.
     * 
     * @param {String} id
     * @param {HTMLAudioElement} element
     */
    addSound: function addSound(id, element) {
        this.audioCache[id] = element;
    },
    /**
     * Toggles global sound playback
     * 
     * @param {Boolean} bool whether to enabled or disable sound playback.
     */
    toggleSound: function toggleSound(bool) {
        this.enabled = bool;
    },
    /**
     * Plays the specified sound with `id`.
     * 
     * @param {String} id
     * @param {Boolean} loop
     * @param {Float} volume
     * @param {Float} panning
     * @returns the created sound instance
     */
    play: function play(id, loop, volume, panning) {
        var instance = null,
            sound = null;

        if (!this.enabled) {
            return;
        }

        try {
            sound = this.audioCache[id];
        } catch (err) {
            console.warn('[AM] WARN: unable to play sound', id);
            return;
        }

        if (typeof sound === 'undefined') {
            return;
        }

        if (typeof sound.loop === 'function') {
            sound.loop(loop || false);
        } else {
            sound.loop = loop || false;
        }

        instance = sound.play({
            panning: [panning || 0, 0, 5],
            volume: volume || 1,
            loop: loop || false
        });

        return instance;
    },
    /**
     * Stops playing the sound id
     * 
     * @param {any} id
     * @param {any} instanceId
     * @returns
     */
    stop: function stop(id, instanceId) {
        var sound = null;

        if (!this.enabled) {
            return;
        }

        try {
            sound = this.audioCache[id];
        } catch (err) {
            console.warn('[AM] WARN: unable to stop sound', id);
            return;
        }

        if (sound && typeof sound.stop === 'function') {
            sound.stop(instanceId || undefined);
        }
    }
});

/***/ }),
/* 5 */
/* exports provided: default */
/* exports used: default */
/*!*****************************!*\
  !*** ./js/Object/Object.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Object_Behavior_Behaviors__ = __webpack_require__(/*! Object/Behavior/Behaviors */ 29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Input_InputManager__ = __webpack_require__(/*! Input/InputManager */ 9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Audio_AudioManager__ = __webpack_require__(/*! Audio/AudioManager */ 4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







/*jshint devel: true, bitwise: false*/
/*globals Class*/
/**
 * `GfxObject` is the base class for objects that can be rendered on the screen.
 * 
 * A `GfxObject` has properties like x, y, vx, vy, speed.
 * In order to be rendered, an object must be added onto the active scene/map.
 * It can also have an optional behavior which tells Athena how
 * to move an object at each frame.
 * 
 * @param {string} type The type of object: this describes the type of object
 * @param {Object} options
 * @param {string} [options.objectId] The id of the object. The defaults is type + random timestamp.
 * @param {number} [options.collideGroup=0] The type of collision to use for the object.
 * @param {boolean} [options.master=false] Set to true if the object should be the master.
 * @param {boolean} [options.visible=true] An invisible object isn't rendered onto the screen.
 */

var GfxObject = function () {
  function GfxObject(type, options) {
    _classCallCheck(this, GfxObject);

    this.type = type;
    this.id = options.objectId || this.type + new Date().getTime();

    this.currentMap = null;
    this.currentScene = null;

    // can be used to delay object destroy
    this._destroyed = false;

    this.children = [];

    this.wave = options.wave || null;

    this.behavior = null;

    // is player on a platform ?
    this.platform = null;

    // 0 == master (player)
    // 1 == enemies (inc. enemy bullets, gems, bonuses,...)
    // 2 == friend bullets
    this.collideGroup = options.collideGroup || 0;
    this.canCollideFriendBullet = options.canCollideFriendBullet || false;

    this.master = options.master || false;

    if (options.behavior) {
      console.log('need to set move to', options.behavior);
      this.setBehavior(options.behavior, options.behaviorOptions);
    }

    // save settings for re-use
    this._settings = Object.assign({
      speed: 1,
      visible: true,
      canCollide: false,
      plane: 0,
      x: 0,
      y: 0,
      vx: 0,
      vy: 0,
      scale: 1.0,
      angle: 0,
      moving: true,
      gravity: 0,
      data: {},
      path: null,
      target: null,
      targetOffsetX: 0,
      targetOffsetY: 0,
      wave: options.wave || null
    }, options);
    /*            {
            speed: options.speed || 1,
            visible: options.visible || true,
            canCollide: options.canCollide || false,
            plane: options.plane || 0,
            x: options.x || 0,
            y: options.y || 0,
            scale: options.scale || 1.0,
            angle: 0,
            moving: typeof options.moving !== 'undefined' ? options.moving : true,
            gravity: typeof options.gravity !== 'undefined' ? options.gravity : 0,
            data: options.data || {},
            path: null,
                    target: options.target || null,
                    targetOffsetX: options.targetOffsetX || 0,
                    targetOffsetY: options.targetOffsetY || 0
          };*/

    // this._data = options.data || {};
    // console.log('settings set', this._settings);

    this.target = null;

    this.spline = null;

    this.currentMovement = '';

    this.fxQueue = {};

    if (!options.pool) {
      // only set option if not from pool since pool elements are intantiated with
      // fake data: we don't want to reset them yet
      this.reset();

      if (options.animate) {
        this.animate(options.animate.name, options.animate.options);
      }
    }

    if (options.scene) {
      debugger;
      options.scene.addObject(this);
      return;
    } else if (options.map) {
      debugger;
      return;
      options.map.addObject(this);
    }
  }

  /**
   * Resets the map, used when player lost for example.
   * 
   * `speed`,  `visible`, `canCollide`, `plane`, `x`, `y`, `scale`, `angle`, `moving`,
   * `vx` , `vy`, `gravity`, `wave`
   * 
   */


  _createClass(GfxObject, [{
    key: 'reset',
    value: function reset() {
      this.speed = this._settings.speed;
      this.visible = this._settings.visible;
      this.canCollide = this._settings.canCollide;
      this.plane = this._settings.plane;
      this.x = this._settings.x;
      this.y = this._settings.y;
      this.scale = this._settings.scale;
      this.angle = this._settings.angle;
      this.moving = this._settings.moving;

      this.data = this._settings.data;

      this.path = null;

      this.vx = this._settings.vx || 0;
      this.vy = this._settings.vy || 0;

      this.gravity = this._settings.gravity;

      // handlers
      this.moveHandlers = [];

      this.targetOffsetX = this._settings.targetOffsetX || 0;
      this.targetOffsetY = this._settings.targetOffsetY || 0;
      this.target = this._settings.target || null;

      this.savedX = this.x;
      this.savedY = this.y;

      this.wave = this._settings.wave;
    }

    /**
     * Sets the map of the object.
     * 
     * @param {Map} map The map of the object.
     * 
     * @note you don't usually need to call this method as it's called automatically when adding an object
     * onto a map.
     * 
     */

  }, {
    key: 'setMap',
    value: function setMap(map) {
      this.currentMap = map;

      this.children.forEach(function (child) {
        child.setMap(map);
      });
    }

    /**
     * Sets the scene of the object.
     * 
     * @param {Scene} scene The scene of the object.
     * 
     * @note you don't usually need to call this method as it's called when adding an object onto a scene.
     */

  }, {
    key: 'setScene',
    value: function setScene(scene) {
      this.currentScene = scene;

      this.children.forEach(function (child) {
        child.setScene(scene);
      });
    }

    /**
     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.
     * 
     * @param {GfxObject} platform The platform the object is attached to.
     */

  }, {
    key: 'setPlatform',
    value: function setPlatform(platform) {
      this.platform = platform;
    }

    /**
     * Moves the object to a new destination.
     * 
     * @param {number} The new horizontal position.
     * @param {number} The new vertical position.
     * 
     * @returns {GfxObject} this
     */

  }, {
    key: 'moveTo',
    value: function moveTo(x, y) {
      this.x = x;
      this.y = y;
      this._onMove();

      return this;
    }

    /**
     * Centers the object into the scene.
     * 
     * @returns {GfxObject} this
     */

  }, {
    key: 'center',
    value: function center() {
      var display = this.currentScene.display;

      this.x = (display.width - this.w) / 2;
      this.y = (display.height - this.h) / 2;
      return this;
    }

    /**
     * Sets a new behavior to the object: this will be called in the move loop
     * 
     * @param {String} name The name of the behavior to use.
     * @param {Object} options The options of the behavior (may depend on the behavior type)
     * 
     * @related {Behavior}
     */

  }, {
    key: 'setBehavior',
    value: function setBehavior(name, options) {
      this.behavior = new (__WEBPACK_IMPORTED_MODULE_1_Object_Behavior_Behaviors__["a" /* default */].getBehavior(name))(this, __WEBPACK_IMPORTED_MODULE_2_Input_InputManager__["a" /* default */], options);
    }

    /**
     * You can call clearBehavior if you want to stop using a particular behavior.
     * 
     * The vx and vy properties of the object will be set to zero.
     */

  }, {
    key: 'clearBehavior',
    value: function clearBehavior() {
      this.vx = this.vy = 0;
      this.behavior = null;
    }

    /**
     * Called on each move loop and used to move the object using its (optional) behavior or its
     * vx and vy properties.
     * 
     * @private
     */

  }, {
    key: 'move',
    value: function move() {
      if (this.moving) {
        if (!this.behavior) {
          // TODO: check map to see if we can move
          this.x += this.vx;
          this.y += this.vy;

          // gravity impacts velocity
          this.vy -= this.gravity;
        } else {
          this.behavior.onMove();
        }

        if (this.children.length) {
          this.children.forEach(function (child) {
            child.move();
          });
        }

        // TODO: check map to see if we can move
        /*                this.x += this.vx;
                    this.y += this.vy;                */
      }
    }

    /**
     * Saves current object position into `savedX` and `savedY` properties
     */

  }, {
    key: 'savePosition',
    value: function savePosition() {
      this.savedX = this.x;
      this.savedY = this.y;
    }

    /**
     * Returns previously seved position
     * 
     * @returns {Object} The saved position
     */

  }, {
    key: 'getSavedPosition',
    value: function getSavedPosition() {
      return {
        x: this.savedX,
        y: this.savedY
      };
    }

    /**
     * NOT IMPLEMENTED
     * 
     * @private
     */

  }, {
    key: 'moveWithSpline',
    value: function moveWithSpline() /*speed*/{}

    /**
     * Sets a new path for the object
     * 
     * @param {Path} path The new path that the object will use when moving.
     * 
     * @related {Path}
     */

  }, {
    key: 'setPath',
    value: function setPath(path) {
      this.path = path;
    }

    /**
     * Change the scale of the object
     * 
     * @param {number} scale The new scale of the object.
     * 
     * @note: it's only used when rendering, collision detection is not using the scale yet.
     */

  }, {
    key: 'setScale',
    value: function setScale(scale) {
      this.scale = scale;
    }

    /**
     * Change the angle of an object
     * 
     * @param {number} angle The new angle of the object. 0 < angle < 360
     * 
     * @note This property is only used for the rendering and it's ignored for collisions.
     */

  }, {
    key: 'setAngle',
    value: function setAngle(angle) {
      // this.angle = angle * Math.PI / 180;
      this.angle = angle;
    }

    /**
     * Returns the angle property of the object.
     */

  }, {
    key: 'getAngle',
    value: function getAngle() {
      return this.angle;
      // return 180 * this.angle / Math.PI;
    }

    /**
     * WIP Performs a transformation on the object
     * 
     * @private
     */

  }, {
    key: 'transform',
    value: function transform(type, value) {
      switch (type) {
        case 'scale':
          this.scale = value;
          break;
      }
    }

    /**
     * Hides the object
     * 
     * @returns {GfxObject} this
     */

  }, {
    key: 'hide',
    value: function hide() {
      this.visible = false;

      return this;
    }

    /**
     * Show the object
     * 
     * @returns {GfxObject} this
     */

  }, {
    key: 'show',
    value: function show() {
      this.visible = true;

      return this;
    }

    /**
     * Returns the current width of the object: with some types of GfxObjects ({Sprite}),
     * width can vary
     * 
     * @returns {number} The current width of the object
     * 
     * @related {Sprite}
     */

  }, {
    key: 'getCurrentWidth',
    value: function getCurrentWidth() {
      return this.width;
    }

    /**
     * Returns the current height of the object: with some types of GfxObjects ({Sprite}),
     * height can vary
     * 
     * @returns {number} The current height of the object
     * 
     * @related {Sprite}
     */

  }, {
    key: 'getCurrentHeight',
    value: function getCurrentHeight() {
      return this.height;
    }

    // TODO: should return the type of sprite ?
    // TODO: should check map ?
    // TODO: handle scale/rotation here !!
    /**
     * Performs collision tests on the specifed object.
     * 
     * @param {GfxObject} obj The object to perform test on
     * 
     * @returns {Boolean} Returns true if this and obj collide
     */

  }, {
    key: 'hitTest',
    value: function hitTest(obj) {
      var hitBox = obj.getHitBox(),
          found = false;

      if (this.canCollide && obj.canCollide && this !== obj && this.visible) {
        var spriteHitBox = this.getHitBox(),
            box = {
          x: this.x + spriteHitBox.x,
          y: this.y + spriteHitBox.y,
          x2: this.x + spriteHitBox.x + spriteHitBox.x2,
          y2: this.y + spriteHitBox.y2 + spriteHitBox.y
        };

        if (box.y < obj.y + hitBox.y && box.y2 > obj.y + hitBox.y || box.y > obj.y + hitBox.y && box.y < obj.y + hitBox.y + hitBox.y2) {
          if (box.x < obj.x + hitBox.x && box.x2 > obj.x + hitBox.x || box.x > obj.x + hitBox.x && box.x < obj.x + hitBox.x + hitBox.x2) {
            // console.log('collision detected with', sprite.id);
            obj.onCollision(this);
            this.onCollision(obj);

            found = true;
          }
        }
      }

      if (!found) {
        var max = this.children.length,
            i = 0;

        while (!found && i < max) {
          found = this.children[i].hitTest(obj);
          i++;
        }
      }
      return found;
    }

    /**
     * WIP: Set a new target for the object
     * 
     * It's planned to have the ability for objects to follow other objects, for example:
     * homing missiles, etc...
     * 
     * @private
     */

  }, {
    key: 'setTarget',
    value: function setTarget(obj) {
      this.target = obj;
    }

    /**
     * Add a new handler to be called after each move of the object
     * 
     * @param {Function} cb The callback to add
     */

  }, {
    key: 'addMoveHandler',
    value: function addMoveHandler(cb) {
      this.moveHandlers.push(cb);
    }

    /**
     * onHit is called when the object collides with another object
     * 
     * @param {GfxObject} obj The object that collided.
     * 
     * This function does nothing interesting: this should be extended if needed.
     */

  }, {
    key: 'onHit',
    value: function onHit(obj) {
      console.log('[GfxObject] oops, ', this.type, ' [', this.id, '] ', 'was hit by', obj.name, ' [', obj.id, ']');
    }

    /**
     * INTERNAL: calls move handles
     * 
     * @private
     */

  }, {
    key: '_onMove',
    value: function _onMove() {
      var args = [this.x, this.y];
      this.moveHandlers.forEach(function (callback) {
        return callback.apply(undefined, args);
      });
    }

    /**
     * INTERNAL: checks if object fx queue is empty
     * 
     * @returns {Boolean} True if the queue is empty, false otherwise.
     * 
     * @private
     */

  }, {
    key: 'isFxQueueEmpty',
    value: function isFxQueueEmpty() {
      for (var i in this.fxQueue) {
        return false;
      }

      return true;
    }

    /**
     * Performs an animation on the object using one of the defined {FX} effects
     * 
     * Effects change the object size/position using an interpolation function.
     * 
     * Athena has the following effects:
     * - {Fade} performs a fade
     * - {Mosaic} performs a SNES-like mosaic effect
     * - {Rotate} performs a rotation on the object
     *
     * @param {String} fxName the name of the effect to use.
     * @param {Object} options the options of the effect.
     * @param {String} [options.easing="linear"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.
     * 
     * @returns {Promise} a promise that will be fullfilled when the effect has been completed
     */

  }, {
    key: 'animate',
    value: function animate(fxName, options) {
      var _this = this;

      // console.log('animate');
      var fxClass = __WEBPACK_IMPORTED_MODULE_0_FX_FX__["a" /* default */].getEffect(fxName),
          promise = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */]().resolve(),
          easing = options.easing || 'linear',
          fx = void 0;

      if (typeof this.fxQueue[fxName] !== 'undefined') {
        console.warn('Fx', fxName, 'already in progress, cannot execute twice');
      } else if (!fxClass) {
        console.warn('Fx', fxName, 'unknown: did you spell it correctly ?');
      } else {
        fx = new fxClass(options);
        fx.setEasing(new __WEBPACK_IMPORTED_MODULE_0_FX_FX__["a" /* default */].getEasing(easing));

        promise = fx.start().then(function () {
          // console.log('effect ended, need to stop it', fxName);
          delete _this.fxQueue[fxName];
        });

        this.fxQueue[fxName] = fx;
      }

      return promise;
    }

    /**
     * Stop current running animation
     * 
     * In some cases, the game may need to stop effects from running before
     * they are completed. This method proves a way to do so and set an end value.
     * 
     * @param {any} The end value of the animation
     */

  }, {
    key: 'stopAnimate',
    value: function stopAnimate(setEndValue) {
      var _this2 = this;

      var fxObject = null;

      // console.log('need to stop animation');
      Object.keys(this.fxQueue).forEach(function (fxName) {
        fxObject = _this2.fxQueue[fxName];

        fxObject.stop(setEndValue);
      });
      // for (let fxName in this.fxQueue) {

      // }
    }

    /**
     * Perform each fx remaining in the fxQueue
     * 
     * @param {CanvasContext} ctx Where to perform the rendering.
     * @param {number} time The current time ellapsed since fx queue was started.
     * 
     * @private
     */

  }, {
    key: 'executeFx',
    value: function executeFx(ctx, time) {
      var _this3 = this;

      var fxObject = null;

      Object.keys(this.fxQueue).forEach(function (fxName) {
        fxObject = _this3.fxQueue[fxName];

        fxObject.process(ctx, null, _this3, time);
      });
      // for (var fxName in this.fxQueue) {
      //     fxObject = this.fxQueue[fxName];

      //     fxObject.process(ctx, null, this, time);
      // }
    }

    /**
     * onCollision is called on each collision with the object.
     * 
     * This method does nothing and should be extended if needed.
     * 
     */

  }, {
    key: 'onCollision',
    value: function onCollision() {}
    //console.log('onCollision does nothing by default');


    /**
     * Add a new Child to the object.
     * 
     * Childs are automatically rendered and moved when the parent object is.
     * 
     * @param {GfxObject} child The child to add.
     * 
     * @note children are automatically added to the scene/map of the parent object.
     */

  }, {
    key: 'addChild',
    value: function addChild(child) {
      child.setMap(this.currentMap);
      child.setScene(this.currentScene);

      this.children.push(child);
    }

    /**
     * Remove a child from the object
     * 
     * @param {GfxObject} child The child to remove from the object.
     * 
     * @note: removing a child object will call its `destroy` method
     */

  }, {
    key: 'removeChild',
    value: function removeChild(child) {
      var idx = this.children.indexOf(child);

      if (idx > -1) {
        this.children[idx].destroy();
        this.children.splice(idx, 1);
      }
    }

    /**
     * Remove every children from the object
     */

  }, {
    key: 'removeAllChildren',
    value: function removeAllChildren() {
      for (var i = 0; i < this.children.length; ++i) {
        this.children[i].destroy();
      }
      this.children.length = 0;
    }

    /**
     * This method is called when drawing an object
     * 
     * GfxObject is a virtual object so its drawing method does nothing
     * 
     * Every Object inheriting from GfxObject should implement its own draw method.
     * 
     * @param {CanvasContext} destCtx the target canvas rendering context.
     * @param {Boolean} debug Debug is set to true if the game is being debugged.
     */

  }, {
    key: 'draw',
    value: function draw(destCtx, debug) {
      console.error('[GfxObject] you need to define a draw method for your object, GfxObjects do not have a draw method');
    }

    /**
     * Plays the spcified sound
     * 
     * @param {String} id The id of the sound to play
     * @param {Object} options
     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.
     * @param {Boolean} [options.loop=false] Set to true to loop the sound.
     */

  }, {
    key: 'playSound',
    value: function playSound(id, options) {
      var panning = 0,
          map = this.currentMap,
          volume = 1.0,
          opt = options || {
        pan: true,
        loop: false
      };

      // volume: outside of screen = volume down
      if (map && (this.x < -map.viewportX || this.x > -map.viewportX + map.viewportW) || this.y < -map.viewportY || this.y > -map.viewportY + map.viewportH) {
        volume = 0.2;
      }

      // panning depends on player position
      if (map && opt.pan) {
        panning = this.x < map.masterObject.x ? -5 : 5;
      }

      this.sound = __WEBPACK_IMPORTED_MODULE_3_Audio_AudioManager__["a" /* default */].play(id, opt.loop || false, volume, panning);
    }

    /**
     * WIP
     * 
     * @private
     */
    // does nothing by default, must be redefined if needed

  }, {
    key: 'setImage',
    value: function setImage(image) {}

    /**
     * Draws a box around objects. This method is called when debugging is enabled.
     * 
     * @param {CanvasContext} ctx The context where to draw the box
     */

  }, {
    key: 'showObjectBox',
    value: function showObjectBox(ctx) {
      ctx.strokeStyle = 'rgb(0,230,0)';
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.w + this.x, this.y);
      ctx.lineTo(this.w + this.x, this.y + this.h);
      ctx.lineTo(this.x, this.y + this.h);
      ctx.lineTo(this.x, this.y);
      ctx.closePath();
      ctx.stroke();
    }

    // 1. remove from pool, if pooled object
    // 2. remove from map or scene
    /**
     * Destroy is called when an object is removed from a scene or object
     * 
     * @note calling destroy on a parent will automatically call the destroy method of each child.
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this._destroyed = true;

      if (typeof this.freeFromPool === 'function') {
        this.freeFromPool();
      }

      if (this.currentMap) {
        this.currentMap.removeObject(this);
      } else if (this.currentScene) {
        this.currentScene.removeObject(this);
      }

      this.children.forEach(function (child) {
        child.destroy();
      });
    }
  }]);

  return GfxObject;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (GfxObject);

/***/ }),
/* 6 */
/* exports provided: default */
/* exports used: default */
/*!****************************************!*\
  !*** ./js/Resource/ResourceManager.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Binary_Binary__ = __webpack_require__(/*! Binary/Binary */ 11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__ = __webpack_require__(/*! Audio/AudioManager */ 4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Core_Pool__ = __webpack_require__(/*! Core/Pool */ 14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_web_audio_daw__ = __webpack_require__(/*! web-audio-daw */ 42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_web_audio_daw___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_web_audio_daw__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Core_Dom__ = __webpack_require__(/*! Core/Dom */ 7);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };








// build a new object instance without using new
function newObject(Obj) {
    return new (Obj.bind.apply(Obj, arguments))();
}

/*jshint devel: true, bitwise: false*/
"use strict";
/**
 * Handles resource loading at runtime
 * 
 * Resources are loaded and retrieved using this manager.
 * 
 * The ResourceManager can load at runtime the folowing types of resources:
 *  - Images
 *  - Sounds
 *  - Maps (JSON-based)
 * 
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    isLocal: !!document.location.href.match(/^file:\/\//),
    scriptMaxTime: 3000,
    groupMaxTime: 5000,
    /**
     * This property holds all ressources that have been added to the ResourceManager,
     * grouped by string identifier. By default, a new `any` group is added: any resource
     * that is added with no group gets added this group.
     */
    resources: {
        // by default all resources belong to any
        'any': {
            def: new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            loadedRes: 0,
            numRes: 0,
            res: {},
            progressCb: null,
            errorCb: null
        }
    },
    dynamicScripts: {},
    iOS: !!navigator.userAgent.match(/iPhone|iPad/),
    skipResources: ['script'],
    async: true,
    loading: false,
    /**
     * Retrieve a resource using its id with optionnal group
     * 
     * @param {String} id The id of the resource to get
     * @param {String="any"} group the group to get the resource from
     * @param {Boolean=false} fullObject returns the resource object if true. Otherwise return the resource only.
     */
    getResourceById: function getResourceById(id, group, fullObject) {
        // console.log('[RM] getting resource', id);
        group = group || 'any';

        var rsGroup = this.resources[group].res,
            rs = rsGroup[id];

        if (rs && rs.loaded) {
            return fullObject === true ? rs : rs.elt;
        } else {
            if (this.dynamicScripts[id]) {
                return this.dynamicScripts[id];
            } else {
                console.error('[RM] unknwon resource id', id);
                return;
            }

            if (resource) {
                return resource.default;
            } else {
                debugger;
                console.warn('[RM] WARN: could not find resource', id);
            }
        }
    },
    /**
     * Allocates a new resource from the pool
     * 
     * This method creates a new instance of the JavaScript object, retrieving it from
     * the pool if the object supports it. If it does not it simply uses new to generate a new instance
     * 
     * @param {String} id The id of the resource for which to create a new instance.
     * 
     * @returns {Object} a new instance of the specified object.
     */
    newResourceFromPool: function newResourceFromPool(id) {
        var resource = this.getResourceById(id);

        if (typeof resource.createFromPool === 'function') {
            console.log('getting resource from pool!');
            return resource.createFromPool.apply(resource, Array.prototype.slice.call(arguments, 1));
        } else {
            console.log('no pool for this one: using new instead');
            return newObject.apply(undefined, [resource].concat(Array.prototype.slice.call(arguments, 1)));
        }
    },
    /**
     * Creates a new group of resources.
     * 
     * This allows to load a group of resources of any type
     * with a single load call.
     * 
     * This is usefull for loading every resource of a single
     * game's level for example
     * 
     * @private
     */
    _createGroup: function _createGroup(groupName) {
        if (!this._groupExists(groupName)) {
            this.resources[groupName] = {
                def: new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
                loadedRes: 0,
                numRes: 0,
                res: {},
                progressCb: null,
                errorCb: null
            };
        } else {
            this.resources[groupName].def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */]();
        }
        //					console.log('[RM] cannot add resource group', groupName, 'because it already exists');
        //				}
    },
    /**
     * Checks if a group already exists
     * 
     * @param {String} groupName The name of the group to check.
     * 
     * @returns {Boolean} true if the group already exists.
     * 
     * @private
     */
    _groupExists: function _groupExists(groupName) {
        return typeof this.resources[groupName] !== 'undefined';
    },
    /**
     * Add new resource(s) into the specified group
     * 
     * @param {Object|Array} resource a single or a group of resources to load
     * @param {String} group the name of the group to add the resources into
     * 
     * @returns {Deferred} a new Deferred that will be resolved once the
     * resources have been loaded.
     * 
     * *Note* This method only adds the resources to the group
     * but do not load them.
     * 
     * @example
     * 
     * ResourceManager.addResources({
     *  id: 'sprites',
     *  type: 'image',
     *  src: './sprites/gem.png'
     * }, "sprites");
     * 
     * // resource type can be image|map|audio
     */
    addResources: function addResources(resource, group) {
        group = group || 'any';

        this._createGroup(group);

        var i = void 0,
            resGroup = this.resources[group];

        if ((typeof resource === 'undefined' ? 'undefined' : _typeof(resource)) === 'object' && resource.constructor === Array) {
            for (i in resource) {
                if (typeof resGroup.res[resource[i].id] === 'undefined' && this.skipResources.indexOf(resource[i].type) === -1) {
                    // we could use jQuery.extend but this seems to be a little faster
                    // and we can easily remove jQuery if needed then
                    resGroup.res[resource[i].id] = JSON.parse(JSON.stringify(resource[i]));
                    resGroup.numRes++;
                }
            }
        } else if (typeof resGroup.res[resource.id] === 'undefined' && this.skipResources.indexOf(resource.type) === -1) {
            resGroup.res[resource.id] = JSON.parse(JSON.stringify(resource));
            resGroup.numRes++;
        }

        if (resGroup.numRes === resGroup.loadedRes) {
            resGroup.def.resolve(true);
        }
        // console.log('[RM] added resources', resGroup, 'group', group);

        return resGroup.def.promise;
    },
    /**
     * Attempts to load the next resource in the specified group
     * 
     * @param {String} groupName the name of the group to use.
     */
    loadNextResource: function loadNextResource(groupName) {
        var group = this.resources[groupName],
            i = void 0;

        for (i in group.res) {
            if (!group.res[i].loaded && this.skipResources.indexOf(group.res[i].type) === -1) {
                this._loadResource(group.res[i], groupName);
                break;
            }
        }
    },
    // load ressources, either unique resources with id, or group id
    /**
     * Loads all resources found in the specified group, optionnaly
     * calling a callback after each file has been loaded.
     * 
     * @param {String} group The name of the group to load
     * @param {Function=undefined} progressCb an optionnal progress callback
     * @param {Function=undefined} errorCb an optionnal error callback
     * 
     */
    loadResources: function loadResources(group, progressCb, errorCb) {
        var _this = this;

        group = group || 'any';

        if (this.loading === true) {
            console.warn('[ResourceManager] loadResources() -> already loading');
            return;
        } else {
            this.loading = true;
        }

        var resGroup = this.resources[group],
            nextRes = null,
            i = void 0,
            size = 0;

        resGroup.progressCb = progressCb || null;
        resGroup.errorCb = errorCb || null;

        // FIXME: simply count the num of resources and get a ref to the first one
        // guess it could be cleaner
        for (i in resGroup.res) {
            if (!resGroup.res[i].loaded && this.skipResources.indexOf(resGroup.res[i].type) === -1) {
                size++;
                if (this.async) {
                    this._loadResource(resGroup.res[i], group);
                } else if (nextRes === null) {
                    nextRes = resGroup.res[i];
                }
            }
        }

        // load the first one
        if (!this.async) {
            this._loadResource(nextRes, group);
        }

        if (size === 0) {
            console.warn('[ResourceManager] no ressource to load');
            // force back loading to false: this happens when scene elements has already
            // been loaded
            this.loading = false;
            return;
        }

        resGroup.gpTimeout = setTimeout(function () {
            var notLoaded = [],
                resId;

            if (resGroup.gpTimeout && resGroup.def.state() === 'rejected') {
                resGroup.gpTimeout = null;

                console.error('[RM] Unable to load the following resources after', _this.groupMaxTime / 1000, 'sec');
                for (resId in resGroup.res) {
                    if (!resGroup.res[resId].loaded) {
                        notLoaded.push('[' + resGroup.res[resId].type + '] ' + resId);
                        console.warn('[' + resGroup.res[resId].type + '] ' + resId + ': ' + resGroup.res[resId].src);
                    }
                }

                // TODO: pass what was loaded, and what was not to the error callback...
                if (resGroup.errorCb) {
                    resGroup.errorCb('Unable to get all resources after', _this.groupMaxTime, notLoaded);
                }
            }
        }, this.groupMaxTime);
    },
    /**
     * Converts an image into a canvas element
     * 
     * @param {Image} image The image to convert
     * 
     * @returns {Canvas} a new canvas element containing the image
     * 
     * @private
     */
    getCanvasFromImage: function getCanvasFromImage(image) {
        var canvas = document.createElement('canvas');

        canvas.width = image.naturalWidth;
        canvas.height = image.naturalHeight;

        canvas.getContext('2d').drawImage(image, 0, 0);

        return canvas;
    },
    /**
     * starts loading an image
     * 
     * @param {Object} res an Object describing the resource to load
     * @param {String} gpName the name of the group that the resource came from
     * 
     * @returns {Deferred} a new promise that will be resolved when the file has been loaded.
     * @private
     */
    loadImage: function loadImage(res, gpName) {
        var img = new Image(),
            that = this,
            def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            gp = that.resources[gpName];

        // console.log('[RM] loading image', res.src);

        img.onload = function () {
            // on Chrome/Win calling drawImage to draw from canvas to canvas is abnormally slow (20-30ms to draw a 20x20px sprite on a core2quad + ati card)
            // so it's disabled for now
            // res.elt = that.getCanvasFromImage(this);                
            res.elt = img;
            res.img = this;
            res.loaded = true;
            that._resLoaded(gpName);
            def.resolve(true);

            // console.log('[RM] loaded image', res.src);
        };

        img.src = res.src;

        return def.promise;
    },
    /**
     * Creates a pool for a specified object
     * 
     * This method pre-allocates objects for later use.
     * 
     * @param {Function} Obj a new object to create
     * @param {Number} size the size of the pool
     * 
     */
    createObjectPool: function createObjectPool(Obj, size) {
        __WEBPACK_IMPORTED_MODULE_2_Core_Pool__["a" /* default */].create(Obj, size);
    },
    /**
     * Register a script as resource: this allows to retrieve it using the resourceManager
     * at runtime.
     * 
     * `notes`
     * During athenajs development, systemjs loader was used instead of Webpack
     * systemjs allows to load any script during *runtime*
     * 
     * This allowed to load script (sprite) resources at runtime, on-demand.
     * 
     * Unfortunately, this is not possible at all with ES6/Webpack which needs to
     * know during build-process which scripts will be needed at runtime to build
     * dependency graphs.
     * 
     */
    registerScript: function registerScript(id, elt, poolSize) {
        var existing = this.dynamicScripts[id];

        if (poolSize) {
            this.createObjectPool(elt, poolSize);
        }

        if (existing) {
            console.error('existing script with the id', id, 'should I replace it?');
        } else {
            this.dynamicScripts[id] = elt;
        }
    },
    /**
     * loads a new external script: this is not supported anymore
     * since webpack cannot load random script file
     * 
     * @obsolete
     * @private
     */
    loadScript: function loadScript(res, gpName, callback) {
        var loaded = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            gp = this.resources[gpName];
        /*
        script = null,
        timeout = 0;
        */

        console.error('loadScript not supported');
        // require.ensure([], function() {
        //     debugger;
        //     var res = require(res.src);
        // })
        console.log('[RM] loading script', res.src);

        // remove ending .js since it shouldn't be there for require js
        /*
                    res.src = res.src.replace(/\.js$/, '');
        
                    System.import(res.src).then((scriptEval) => {
                        console.log('[RM] loaded AJAX script', res.src, scriptEval);
                        res.elt = scriptEval.default ? scriptEval.default : scriptEval;
                        res.loaded = true;
        
                        if (res.poolSize) {
                            this.createObjectPool(res.elt, res.poolSize);
                        }
        
                        if (!callback) {
                            this._resLoaded(gpName);
                            loaded.resolve(true);
                        } else {
                            var newDef = callback.call(this, res, gpName);
                            newDef.done(function() {
                                loaded.resolve(true);
                            });
                        }
        
                    }).catch(function(err) {
                        console.log('resource not loaded', err);
                        gp.def.reject('Unable to load resource "' + res.src + '" [' + res.id + ']');
                    });
        */
        return loaded.promise;
    },

    /**
     * Loads a new Audio file using standard HTML5 Audio
     * 
     * @param {Object} res a descriptor for the sound to load
     * @param {String} gpName the name of the group to load the audio file from
     * 
     * @returns {Deferred} a new promise that will be resolved once the file has been loaded
     */
    loadAudio: function loadAudio(res, gpName) {
        console.log('[RM] loading sound', res.src);

        var that = this,
            audio = new Audio(),
            def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            gp = that.resources[gpName];

        function onLoad() {
            // canplaythrough event is sent not only on first load, but after the song has been played (and has been rewinded)
            // so we remove it to prevent from triggering again
            this.removeEventListener('canplaythrough', onLoad);
            console.log('[RM] audioLoaded', res.src);
            res.elt = this;
            res.loaded = true;
            __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].addSound(res.id, this);
            that._resLoaded(gpName);
            def.resolve(true);
        }

        audio.preload = 'auto';
        audio.addEventListener('canplaythrough', onLoad);

        audio.addEventListener('loadstart', function () {
            console.log('loadStarted', audio.src);
        });

        audio.src = res.src;

        return def.promise;
    },

    /**
     * Loads a new Audio file using the WAD library
     * 
     * @param {Object} res a descriptor for the sound to load
     * @param {String} gpName the name of the group to load the audio file from
     * 
     * @returns {Deferred} a new promise that will be resolved once the file has been loaded
     */
    loadWadAudio: function loadWadAudio(res, gpName) {
        var that = this,
            gp = that.resources[gpName],
            def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            sound = new __WEBPACK_IMPORTED_MODULE_3_web_audio_daw___default.a({
            source: res.src,
            callback: function callback() {
                res.elt = sound;
                res.loaded = true;
                __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].addSound(res.id, sound);
                that._resLoaded(gpName);
                def.resolve(true);
            }
        });

        return def.promise;
    },

    /**
     * Loads a new Audio file using the Howler library
     * 
     * @param {Object} res a descriptor for the sound to load
     * @param {String} gpName the name of the group to load the audio file from
     * 
     * @returns {Deferred} a new promise that will be resolved once the file has been loaded
     */
    loadHowlerAudio: function loadHowlerAudio(res, gpName) {
        var that = this,
            gp = that.resources[gpName],
            def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            sound = new Howl.Howl({
            urls: [res.src],
            onload: function onload() {
                res.elt = sound;
                res.loaded = true;
                __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].addSound(res.id, sound);
                that._resLoaded(gpName);
                def.resolve(true);
            }
        });

        return def.promise;
    },

    /**
     * Loads a JSON file
     * 
     * @param {Object} res The JSON file descriptor
     * @param {String} gpName The name of the group to load the file from
     * @param {Function} callback An optionnal callback to execute once the file has been loaded
     * 
     * @returns {Deferred} a promise that will be resolved once the file has been loaded.
     */
    loadJSON: function loadJSON(res, gpName, callback) {
        var _this2 = this;

        var def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */]();

        fetch(res.src).then(function (response) {
            if (response.status === 200) {
                return response.json();
            } else {
                throw 'Error getting photo list';
            }
        }).then(function (json) {
            res.elt = json;
            res.loaded = true;
            if (!callback) {
                _this2._resLoaded(gpName);
                loaded.resolve(true);
            } else {
                var newDef = callback.call(_this2, res, gpName);
                newDef.then(function () {
                    def.resolve(true);
                });
            }
        });
    },
    /**
     * Loads binary data into an ArrayBuffer
     *
     * @param {Object} res The JSON file descriptor
     * @param {String} gpName The name of the group to load the file from
     * 
     * @returns {Deferred} a promise that will be resolved once the file has been loaded.
     * 
     * @private
     */
    loadMapData: function loadMapData(res, gpName) {
        var _this3 = this;

        var def = new __WEBPACK_IMPORTED_MODULE_4_Core_Deferred__["a" /* default */](),
            gp = this.resources[gpName];

        __WEBPACK_IMPORTED_MODULE_0_Binary_Binary__["a" /* default */].getArrayBuffer((document.location.href.match('warpdesign.fr') ? '/gods/' : '/') + res.elt.dataUrl).then(function (arrayBuffer) {
            res.elt.buffer = arrayBuffer;
            res.loaded = true;
            _this3._resLoaded(gpName);
            def.resolve(true);
        }, function () {
            gp.def.reject('Unable to load map resource "' + res.src + '" [' + res.id + ']');
        });

        return def.promise;
    },
    /**
     * Internal method that gets called once a resource has been loaded
     * 
     * If there is resource remaining to be loaded, this method will load the next resource.
     * Otherwise it will resolve the group's loading promise.
     * 
     * @private
     */
    _resLoaded: function _resLoaded(groupName) {
        var group = this.resources[groupName];

        group.loadedRes++;

        /*
            Debug stuff
        */
        new __WEBPACK_IMPORTED_MODULE_5_Core_Dom__["a" /* default */]('span.loaded').html(group.loadedRes);

        if (group.progressCb) {
            group.progressCb.call(this, Math.floor(group.loadedRes * 100 / group.numRes));
        }

        if (group.loadedRes === group.numRes) {
            // console.log('[RM] need to resolve stuff :)) ' + group.loadedRes + '/' + group.numRes);
            this.loading = false;
            if (group.gpTimeout !== null) {
                clearTimeout(group.gpTimeout);
            }
            group.def.resolve(true);
        } else if (!this.async) {
            //  console.log('[RM] more stuff to load !', group.loadedRes + '/' + group.numRes);
            this.loadNextResource(groupName);
        } else {
            // console.log('[RM] more stuff to load !', group.loadedRes + '/' + group.numRes);
        }
    },
    /**
     * Loads the specificied resource from specified group
     * 
     * @param {Object} res The JSON file descriptor
     * @param {String} gpName The name of the group to load the file from
     * 
     * @private
     */
    _loadResource: function _loadResource(res, groupName) {
        // console.log('[RM] loading', res);
        switch (res.type) {
            case 'image':
                return this.loadImage(res, groupName);

            case 'audio':
                // return this.loadHowlerAudio(res, groupName);
                // return this.loadAudio(res, groupName);
                // return this.loadAudio(res, groupName);
                return this.loadWadAudio(res, groupName);
            /*
            if (this.useWad) {
                return this.loadWadAudio(res, groupName);
            } else {
                return this.loadHowlerAudio(res, groupName);
            }*/

            case 'script':
                return this.loadScript(res, groupName);

            // case 'map'
            default:
                // return this.loadScript(res, groupName, this.loadMapData);
                return this.loadJSON(res, groupName, this.loadMapData);
        }
    }
});

/***/ }),
/* 7 */
/* exports provided: default */
/* exports used: default */
/*!************************!*\
  !*** ./js/Core/Dom.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* Very small and simple jQuery-like object */

/**
 * Dom is a very simple jQuery-like object that allows to manipulate
 * a collection of DOM elements.
 * 
 * As in jQuery, you may manipulate Dom collections using []
 * 
 * @class
 * @constructor 
 */
function Dom(selector) {
    if (selector.match(/^#|\./)) {
        this.push.apply(this, _toConsumableArray(document.querySelectorAll(selector)));
    } else {
        this.push(document.createElement(selector));
    }
}

Dom.prototype = new Array();

Object.assign(Dom.prototype, {
    /**
     * jQuery-like CSS method to easily set multiple styles on a dom collection
     * 
     * @param {String|Object} prop or list of properties with their new value
     * @param {String} val value of the property
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    css: function css(prop, val) {
        if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
            this.forEach(function (node) {
                var style = node.style;

                for (var name in prop) {
                    style[name] = prop[name];
                }
            });
        } else {
            this.forEach(function (node) {
                node.style[prop] = val;
            });
        }
        return this;
    },

    /**
     * Append current collection to the element with a specific selector 
     * 
     * @param {String|HTMLElement} selector Target element where to append selected elements.
     * It can either be a CSS selector or a DOM HTMLElement.
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    appendTo: function appendTo(selector) {
        var target = (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector || document.querySelector(selector);

        if (target) {
            this.forEach(function (node) {
                target.appendChild(node);
            });
        }

        return this;
    },

    /**
     * Change multiple attributes at once
     * 
     * @param {String|Object} att attribute name to modify or list of attributes+values to change
     * @param {String} val value of the attribute to set
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    attr: function attr(att, val) {
        if ((typeof att === 'undefined' ? 'undefined' : _typeof(att)) === 'object') {
            this.forEach(function (node) {
                for (var name in att) {
                    node.setAttribute(name, att[name]);
                }
            });
        } else {
            this.forEach(function (node) {
                node.setAttribute(attribute, value);
            });
        }

        return this;
    },

    /**
     * Add a new Class to a DOM collection
     * 
     * @param {String} name new class to add
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    addClass: function addClass(name) {
        this.forEach(function (node) {
            node.classList.add(name);
        });

        return this;
    },

    /**
     * Changes innerHTML of a collection
     * 
     * @param {String} html to set as innerHTML
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    html: function html(_html) {
        this.forEach(function (node) {
            return node.innerHTML = _html;
        });

        return this;
    },

    /**
     * Shows specified set of elements
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    show: function show() {
        this.forEach(function (node) {
            node.style.display = 'block';
        });
    },

    /**
     * Hides specified set of elements
     * @returns {Dom} `this`
     * 
     * @memberof Dom#
     */
    hide: function hide() {
        this.forEach(function (node) {
            node.style.display = 'node';
        });
    }
});

/* harmony default export */ __webpack_exports__["a"] = (Dom);

/***/ }),
/* 8 */
/* exports provided: default */
/* exports used: default */
/*!********************************!*\
  !*** ./js/FX/Effect/Effect.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/*jshint devel: true, bitwise: false*/

var Effect = function () {
    function Effect(options, display) {
        _classCallCheck(this, Effect);

        this.easing = null;
        this.context = options.context || this;

        // TODO: we may need width/height for sprites as well
        // => pass the currentWidth/Height to fake display size
        if (typeof display !== 'undefined') {
            this.width = display.width;
            this.height = display.height;
        }

        this.startValue = typeof options.startValue !== 'undefined' ? options.startValue : 0;
        this.endValue = typeof options.endValue !== 'undefined' ? options.endValue : 1;
        this.loop = !!options.loop || false;

        this.duration = options.duration || 400;
    }

    _createClass(Effect, [{
        key: 'setEasing',
        value: function setEasing(easing) {
            this.easing = easing;
        }
    }, {
        key: 'start',
        value: function start() {
            this.def = new __WEBPACK_IMPORTED_MODULE_0_Core_Deferred__["a" /* default */]();

            this.startTime = new Date().getTime();

            this.ended = false;
            this.stopped = false;

            return this.def.promise;
        }
    }, {
        key: 'stop',
        value: function stop(setEndValue) {
            this.stopped = true;
        }
    }, {
        key: 'process',
        value: function process(ctx, fxCtx, obj) {
            var _this = this;

            var currentTime = new Date().getTime(),
                ellapsedTime = currentTime - this.startTime,
                t = ellapsedTime / this.duration;

            if (this.stopped || ellapsedTime >= this.duration) {
                if (this.stopped || this.loop === false) {
                    // set progress to 1 to avoid weird side effects (eg. opacity set to a negative number since anim progress may be > 1)
                    this.animProgress = 1;

                    this.ended = true;
                    // since this is called inside the render loop, we must be sure call has ended before resolving
                    // FIXES: #BUG: playing the same scene calls twice the renderLoop
                    setTimeout(function () {
                        _this.def.resolve(true);
                    }, 0);
                } else {
                    // console.log('looping effect');
                    this.start();
                }
            } else {
                this.animProgress = this.easing(t, ellapsedTime, 0, 1, this.duration);
            }

            return this.ended;
        }
    }]);

    return Effect;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Effect);

/***/ }),
/* 9 */
/* exports provided: default */
/* exports used: default */
/*!**********************************!*\
  !*** ./js/Input/InputManager.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// import VirtualJoystick from 'Joystick';

/*jshint devel: true*/
/**
 * Handles keyboard input (joystick input doesn't work correctly yet).
 * 
 * Key presses are stored in a simple hash this.keyPressed with keyCode as key, and attached handlers are stored in
 * another hash this.keyCb.
 * 
 * The InputManager can also be used to record keystrokes which can then be played back to produce game demos for example.
 * 
 * @example
 * 
 * // example state of InputManager.keyPressed where `up` key is down and `down` key has just been released:
 * { 32: true, 40: false}
 * 
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    /**
     * A list of common keyCodes
     */
    keys: {
        'UP': 38,
        'DOWN': 40,
        'LEFT': 37,
        'RIGHT': 39,
        'SPACE': 32,
        'ENTER': 13,
        'ESCAPE': 27,
        'CTRL': 17
    },
    /**
     * List of common pad buttons
     */
    PAD_BUTTONS: {
        32: 1, // Face (main) buttons
        FACE_0: 1,
        FACE_3: 2,
        FACE_4: 3,
        LEFT_SHOULDER: 4, // Top shoulder buttons
        RIGHT_SHOULDER: 5,
        LEFT_SHOULDER_BOTTOM: 6, // Bottom shoulder buttons
        RIGHT_SHOULDER_BOTTOM: 7,
        SELECT: 8,
        START: 9,
        LEFT_ANALOGUE_STICK: 10, // Analogue sticks (if depressible)
        RIGHT_ANALOGUE_STICK: 11,
        38: 12, // Directional (discrete) pad
        40: 13,
        37: 14,
        39: 15
    },
    axes: {},
    // gamepadSupport: (!!navigator.webkitGetGamepads !!navigator.webkitGetGamepads || !!navigator.webkitGamepads) && navigator.webkitGetGamepads().length && navigator.webkitGetGamepads()[0],
    gamepadSupport: false,
    recording: false,
    playingEvents: false,
    playingPos: 0,
    recordedEvents: [],
    pad: null,
    keyPressed: {},
    padPressed: {},
    keyCb: {},
    gameRef: null,
    inputMode: 'keyboard',
    // virtual joystick instance
    dPadJoystick: null,
    jPollInterval: 0,
    /**
     * Initializes the InputManager with a reference to the game.
     * 
     * This method prepares the InputManager by reseting keyboard states/handlers and
     * set current inputMode
     * 
     * @param {Game} gameRef A reference to the game being used.
     * 
     * @private
     */
    _init: function _init(gameRef) {
        this.gameRef = gameRef;

        this._installInputModeSwitchHandler();

        this._installKBEventHandlers();

        // this._initVirtualJoystick();

        this.setInputMode(this.inputMode);
    },
    /**
     * Private handler that is supposed to detect touchEvent and automatically switch between keyboard & touch
     * inputs. Unfortunately it tourned out to not be so easy.
     * 
     * @private
     */
    _installInputModeSwitchHandler: function _installInputModeSwitchHandler() {
        var _this = this;

        // we cannot have several input devices (ie: keyboard, joystick,...) running at the same time
        // since they will interfer with each other (pressing a key will stop touch from working correctly)
        // we don't want the user to have to choose input mode using a menu or shortcut
        // instead, we want to have an automatic detection/switch of input mode which works like this:
        // by default, input mode if set to keyboard
        // if a touch is detected, input is set to joystick and kb detection is disabled
        // if a keydown is detected, joystick mode is disabled and kb detection is enabled
        document.addEventListener('touchstart', function () {
            _this.setInputMode('joystick');
        });

        document.addEventListener('keydown', function () {
            _this.setInputMode('keyboard');
        });
    },
    /**
     * Starts recording input events. They are stored into `InputManager.recordedEvents`
     */
    startRecordingEvents: function startRecordingEvents() {
        if (!this.recording) {
            this.recordedEvents.length = 0;
            this.recording = true;
            console.log('[InputManager] Starting record of input events!');
        }
    },
    /**
     * Stops recording events.
     */
    stopRecordingEvents: function stopRecordingEvents() {
        this.recording = false;
        console.log('[InputManager] Stoping record of input events, recorded', this.recordedEvents.length, 'events');
    },
    /**
     * After events have been reccorded they can be played back using this method.
     */
    playRecordedEvents: function playRecordedEvents() {
        if (!this.playingEvents) {
            console.log('[InputManager] Starting to play an existing record of input events!');
            this.playingEvents = true;
            this.playPos = 0;
        }
    },
    /**
     * Sets next key states using recorded events
     * 
     * TODO: add an optional callback to be called at the end of the playback
     * so that demo can be looped.
     */
    nextRecordedEvents: function nextRecordedEvents() {
        if (this.playingPos >= this.recordedEvents.length) {
            this.playingEvents = false;
            // TODO: reset keys so that movement does not continue
            this.keyPressed = {
                38: false,
                40: false,
                37: false,
                39: false,
                32: false,
                13: false,
                27: false,
                17: false
            };
            console.log('[InputManager] Reached the end of recorded events, resetting keys status to default!');
        } else {
            this.keyPressed = this.recordedEvents[this.playingPos++];
            // TODO: we should call any callback as well
            // for (keyCode in this.keyPressed) {
            //  if (this.keyPressed[keyCode] === true && this.keyCb[keyCode]) {
            //      this.keyCb[keyCode].down.fire();
            //  }
            // }
            //
        }
    },
    /**
     * Saves current event state onto the recordedEvents stack
     * 
     * @private
     */
    recordEvents: function recordEvents() {
        /*            'UP': 38,
                    'DOWN': 40,
                    'LEFT': 37,
                    'RIGHT': 39,
                    'SPACE': 32,
                    'ENTER': 13,
                    'ESCAPE': 27,
                    'CTRL': 17*/
        this.recordedEvents.push(JSON.parse(JSON.stringify(this.keyPressed)));
    },
    /**
     * Changes input mode
     * 
     * @param {String} mode Changes current input mode, can be `virtual_joystick`, `keyboard`, `gamepad`
     */
    setInputMode: function setInputMode(mode) {
        if (this.inputMode === mode) {
            return;
        }

        switch (mode) {
            case 'virtual_joystick':
                if (this.dPadJoystick) {
                    this.jPollInterval = setInterval(this._pollJoystick.bind(this), 1 / 30 * 1000);
                }
                break;

            case 'keyboard':
                this._clearJoystickPoll();
                break;

            case 'gamepad':
                this._clearJoystickPoll();
                this.jPollInterval = setInterval(this._pollGamepad.bind(this), 1 / 30 * 1000);
                break;
        }

        this._resetKeys();
        this.inputMode = mode;
    },
    /**
     * Resets keys that have been pressed.
     * 
     * @private
     */
    _resetKeys: function _resetKeys() {
        for (var key in this.keyPressed) {
            this.keyPressed[key] = false;
        }
    },
    /**
     * Checks for a new joystick to be connected onto the machine and changes the inputMode to `gamepad`
     * when a new joypad is detected.
     */
    _pollNewGamepad: function _pollNewGamepad() {
        var gamepads = navigator.getGamepads && navigator.getGamepads() || navigator.webkitGetGamepads && navigator.webkitGetGamepads() || navigator.webkitGamepads;
        if (!this.pad && gamepads && gamepads.item() !== null) {
            this.pad = gamepads.item();

            if (!this.gamepadSupport) {
                console.log('[Event] Oh oh! Looks like we have a new challenger: ', this.pad.id);
                this.gamepadSupport = true;
                this.setInputMode('gamepad');
            }
        }
    },
    /**
     * 
     */
    _pollGamepad: function _pollGamepad(key) {
        // normal buttons
        // if (key === this.keys.space) {
        //     if (this.pad.buttons[this.PAD_BUTTONS[key]].pressed === true) {
        //         this.padPressed[key] = true;
        //     } else {
        //         this.padPressed[key] = false;
        //     }
        // }

        // special case for dpad on Linux, cannot test on Windows since my pad does not support XInput...
        // d-pad
        if (this.pad.buttons[12].pressed) {
            this.keyPressed[this.keys['UP']] = true;
            this.keyPressed[this.keys['DOWN']] = false;
        } else if (this.pad.buttons[13].pressed) {
            this.keyPressed[this.keys['DOWN']] = true;
            this.keyPressed[this.keys['UP']] = false;
        } else {
            this.keyPressed[this.keys['DOWN']] = false;
            this.keyPressed[this.keys['UP']] = false;
        }

        if (this.pad.buttons[15].pressed) {
            this.keyPressed[this.keys['RIGHT']] = true;
            this.keyPressed[this.keys['LEFT']] = false;
        } else if (this.pad.buttons[14].pressed) {
            this.keyPressed[this.keys['LEFT']] = true;
            this.keyPressed[this.keys['RIGHT']] = false;
        } else {
            this.keyPressed[this.keys['LEFT']] = false;
            this.keyPressed[this.keys['RIGHT']] = false;
        }
        // stick 1
        /*
        if (this.pad.axes[1] === -1) {
            this.keyPressed[this.keys['UP']] = true;
            this.keyPressed[this.keys['DOWN']] = false;
        } else if (this.pad.axes[1] === 1) {
            this.keyPressed[this.keys['DOWN']] = true;
            this.keyPressed[this.keys['UP']] = false;
        } else {
            this.keyPressed[this.keys['DOWN']] = false;
            this.keyPressed[this.keys['UP']] = false;
        }
         if (this.pad.axes[0] === 1) {
            this.keyPressed[this.keys['RIGHT']] = true;
            this.keyPressed[this.keys['LEFT']] = false;
        } else if (this.pad.axes[0] === -1) {
            this.keyPressed[this.keys['LEFT']] = true;
            this.keyPressed[this.keys['RIGHT']] = false;
        } else {
            this.keyPressed[this.keys['LEFT']] = false;
            this.keyPressed[this.keys['RIGHT']] = false;
        }
        */
    },
    _getModifiers: function _getModifiers(event) {
        return {
            'ALT': true,
            'SHIFT': true,
            'CTRL': true,
            'META': true
        };
    },
    _initVirtualJoystick: function _initVirtualJoystick() {
        var _this2 = this;

        var dPadJoystick = void 0,
            fireJoystick = void 0;

        console.log('[InputManager] _initVirtualJoystick');

        // left joystick = view
        dPadJoystick = this.dPadJoystick = new VirtualJoystick({
            container: document.body,
            strokeStyle: 'cyan',
            limitStickTravel: true,
            mouseSupport: true,
            stickRadius: 60
        });

        dPadJoystick.addEventListener('touchStartValidation', function (event) {
            var touch = event.changedTouches[0];
            if (touch.pageX >= window.innerWidth / 2) {
                return false;
            }
            return true;
        });

        // right joystick = fire button
        fireJoystick = this.fireJoystick = new VirtualJoystick({
            container: document.body,
            strokeStyle: 'orange',
            limitStickTravel: true,
            mouseSupport: true,
            stickRadius: 0
        });

        fireJoystick.addEventListener('touchStartValidation', function (event) {
            var touch = event.changedTouches[0];
            if (touch.pageX < window.innerWidth / 2) {
                return false;
            }
            return true;
        });

        /* fire button */
        fireJoystick.addEventListener('touchStart', function () {
            if (_this2.inputMode === 'virtual_joystick') {
                _this2.keyPressed[_this2.keys['CTRL']] = true;
            }
        });

        fireJoystick.addEventListener('touchEnd', function () {
            if (_this2.inputMode === 'virtual_joystick') {
                _this2.keyPressed[_this2.keys['CTRL']] = false;
            }
        });
    },
    _clearJoystickPoll: function _clearJoystickPoll() {
        if (this.jPollInterval) {
            clearInterval(this.jPollInterval);
            this.jPollInterval = 0;
        }
    },
    _pollJoystick: function _pollJoystick() {
        var _this3 = this;

        var down = [],
            up = [],
            joystick = this.dPadJoystick,
            fire = this.fireJoystick;

        /* directions */
        if (Math.abs(joystick.deltaX()) >= 10) {
            if (joystick.left()) {
                down.push('LEFT');
                up.push('RIGHT');
            } else {
                down.push('RIGHT');
                up.push('LEFT');
            }
        } else {
            up.push('LEFT');
            up.push('RIGHT');
        }

        if (Math.abs(joystick.deltaY()) >= 10) {
            if (joystick.up()) {
                down.push('UP');
                up.push('DOWN');
            } else {
                down.push('DOWN');
                up.push('UP');
            }
        } else {
            up.push('UP');
            up.push('DOWN');
        }

        if (down.length) {
            down.forEach(function (key) {
                _this3.keyPressed[_this3.keys[key]] = true;
            });
        }

        if (up.length) {
            up.forEach(function (key) {
                _this3.keyPressed[_this3.keys[key]] = false;
            });
        }

        // TODO: what happens for up event ? should be set to up only when going from down to up and called here
    },
    _installKBEventHandlers: function _installKBEventHandlers() {
        var _this4 = this;

        var gameRef = this.gameRef;

        // TODO: move me somewhere else!
        document.addEventListener('keydown', function (event) {

            if (_this4.inputMode !== 'keyboard' || _this4.playingEvents) {
                return;
            }

            switch (event.keyCode) {
                case 32:
                case 37:
                case 38:
                case 39:
                case 40:
                    event.preventDefault();
                    break;
            }

            if (event.keyCode) {
                _this4.keyPressed[event.keyCode] = true;
            }

            // console.log('keydown', event.keyCode, '<-', this.keyPressed[37], '->', this.keyPressed[39]);

            _this4.metas = _this4._getModifiers();

            if (_this4.keyCb[event.keyCode] && gameRef && gameRef.running) {
                _this4.keyCb[event.keyCode].down.forEach(function (callback) {
                    callback();
                });
            }
        });

        document.addEventListener('keyup', function (event) {
            if (_this4.inputMode !== 'keyboard' || _this4.playingEvents) {
                return;
            }

            if (event.keyCode) {
                _this4.keyPressed[event.keyCode] = false;
            }

            // console.log('keyup', event.keyCode, '<-', this.keyPressed[37], '->', this.keyPressed[39]);

            _this4.metas = _this4._getModifiers();

            if (_this4.keyCb[event.keyCode] && gameRef && gameRef.running) {
                _this4.keyCb[event.keyCode].up.forEach(function (callback) {
                    callback();
                });
            }
        });
    },
    getAllKeysStatus: function getAllKeysStatus() {
        var keys = Object.keys(this.keys),
            result = {};

        for (var i = 0; i < keys.length; ++i) {
            result[array[i]] = this.getKeyStatus(array[i]);
        }

        return result;
    },
    getKeyStatus: function getKeyStatus(key, reset) {
        var keyPressed = void 0;

        try {
            // GamePad insertion polling disabled
            // seems like Chrome & FF have different methods
            // current one only works with Chrome and I don't
            // want to waste time adding configuration for both
            // until spec if fully defined and not experimental
            // this._pollNewGamepad();

            /*
            if (this.pad) {
                this._pollGamepad(key);
            }
            */

            keyPressed = this.keyPressed[key] || this.padPressed[key];

            if (keyPressed && reset === true) {
                this.keyPressed[key] = '';
            }

            return keyPressed;
        } catch (err) {
            debugger;
            return false;
        }
    },

    installKeyCallback: function installKeyCallback(key, event, callback) {
        var keyCode = this.keys[key];

        if (!this.keyCb[keyCode]) {
            this.keyCb[keyCode] = {
                up: [],
                down: []
            };
        }

        this.keyCb[keyCode][event].push(callback);
    },

    removeKeyCallback: function removeKeyCallback(key, event, callback) {
        var index = this.keyCb[key][event].indexOf(callback);
        if (index > -1) {
            this.keyCb[key][event].splice(index, 1);
        }
    },
    clearEvents: function clearEvents() {
        this.keyPressed = {};
        this.keyCb = {};
    }
});

/***/ }),
/* 10 */
/* exports provided: default */
/* exports used: default */
/*!************************************************!*\
  !*** ./js/Notification/NotificationManager.js ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

/*jshint devel: true, bitwise: false*/
var eventCallbacks = {};

/* harmony default export */ __webpack_exports__["a"] = ({
    notify: function notify(eventType, data) {
        // console.log('[NM] got event', eventType, 'with data', data);
        var params = { type: eventType, data: data };

        if (eventCallbacks[eventType]) {
            eventCallbacks[eventType].forEach(function (callback) {
                return callback(params);
            });
        } else if (eventCallbacks['*']) {
            eventCallbacks['*'].forEach(function (callback) {
                return callback(params);
            });
        }
    },
    listen: function listen(eventType, method) {
        console.log('[NM] listening to event', eventType);
        var eventList = eventType.replace(/\s+/g, ' ').split(' ');

        eventList.forEach(function (eventType) {
            if (!eventCallbacks[eventType]) {
                eventCallbacks[eventType] = [];
            }

            eventCallbacks[eventType].push(method);
        });
    }
});

/***/ }),
/* 11 */
/* exports provided: default */
/* exports used: default */
/*!*****************************!*\
  !*** ./js/Binary/Binary.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise__ = __webpack_require__(/*! es6-promise */ 22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_es6_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_es6_promise__);
/* @flow */


/*jshint devel: true, bitwise: false*/
/**
 * Object that allows sending & receving binary data
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    /**
     * Sends binary as POST
     * 
     * @param {ArrayBufferView} view
     * @param {String} url to post binary data to
     */
    sendArrayBufferView: function sendArrayBufferView(view, url) {
        var req = new XMLHttpRequest();

        req.open('POST', url, true);

        req.send(view);
    },

    /**
     * Retrieves binary data from the server
     * 
     * @param {String} url to get binary data from
     * @returns promise that is fullfilled with ArrayBuffer or false if get failed
     */
    getArrayBuffer: function getArrayBuffer(url) {
        return new __WEBPACK_IMPORTED_MODULE_0_es6_promise___default.a(function (resolve, reject) {
            var req = new XMLHttpRequest();

            req.open('GET', url, true);
            req.responseType = 'arraybuffer';

            req.onload = function (event) {
                var arrayBuffer = req.response;

                if (arrayBuffer) {
                    resolve(arrayBuffer);
                } else {
                    reject(false);
                }
            };

            req.send(null);
        });
    }
});

/***/ }),
/* 12 */
/* exports provided: default */
/* exports used: default */
/*!*****************************!*\
  !*** ./js/Object/Sprite.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Object__ = __webpack_require__(/*! Object/Object */ 5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Input_InputManager__ = __webpack_require__(/*! Input/InputManager */ 9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/*jshint devel: true, bitwise: false*/
/**
 * This class extends {GfxObject} to implement 2D sprites using an image sprite sheet.
 * 
 * A sprite can have an infinite number of animations.
 * Each animation can have a different frameDuration and any number of frames.
 * Each frame may have a different size and a different hitbox
 * 
 * @param {String} type An identifier for this sprite, can be for example `enemy1`,...
 * @param {Object} options An options hash for the object
 * @param {String} options.imageSrc The path to the spritesheet image
 * @param {Object} options.animations An hash with a key for each animation of the sprite.
 * 
 * @note Since games usually have multiple sprites of the same type, it's common to extend the Sprite class
 * to generate each sprite type with its own properties and then use these sprites instead of instanciating
 * the Sprite class but it's possible to do so.
 * 
 * @example
 * 
 * let mySprite = new Sprite('gem', {
*  imageSrc: 'objects',
*  x: options.x,
*  y: options.y,
*  pool: options.pool,
*  canCollide: true,
*  collideGroup: 1,
*  animations: {
*      mainLoop: {
*          frameDuration: 4,
*          frames:[{
*              offsetX: 136,
*              offsetY: 189,
*              w: 31,
*              h: 31,
*              hitBox: {
*                  x: 0,
*                  y: 0,
*                  x2: 31,
*                  y2: 31
*              },
*              plane: 0
*          },
 *               {
*              offsetX: 170,
*              offsetY: 189,
*              w: 31,
*              h: 31,
*              hitBox: {
*                  x: 0,
*                  y: 0,
*                  x2: 31,
*                  y2: 31
*              },
*              plane: 0
*          }],
 *           loop: 1
*       }
 *    }
 * });
 * 
 * @related {GfxObject}
 */

var Sprite = function (_GfxObject) {
    _inherits(Sprite, _GfxObject);

    function Sprite(type, options) {
        _classCallCheck(this, Sprite);

        var _this = _possibleConstructorReturn(this, (Sprite.__proto__ || Object.getPrototypeOf(Sprite)).call(this, type, options));

        _this.imageSrc = options.imageSrc;

        // NOTE: sometimes it is done by gfxobject.reset(), sometimes not
        _this.load(options.animations);
        return _this;
    }

    /**
     * Init default sprite properties
     */


    _createClass(Sprite, [{
        key: 'initProperties',
        value: function initProperties() {
            this.animations = {};
            // frames
            this.currentAnim = null;
            this.currentFrame = null;
            this.currentFrameNum = this.previousFrameNum = 0;
            this.loaded = false;

            this.currentAnimName = '';

            this.storedAnimName = '';
            this.storedFrameNum = 0;

            this.numFrames = 0;
            this.rewindOnEnd = false;
            this.direction = 1;

            this.frameCounter = 0;

            // end animation defered
            this.animEndDef = null;
            this.animChangeDef = null;

            // holds a reference to the dom image object from which sprite will be blitted
            this.image = null;

            this.rewinded = false;

            this.isDebug = false;
        }

        /**
         * Toggles debugging
         * 
         * @param {Boolean} isDebug wether to enable or disable debug
         * 
         * TODO: should use a global setting instead
         * 
         * @private
         */

    }, {
        key: 'debug',
        value: function debug(isDebug) {
            this.isDebug = isDebug;
        }

        /**
         * Resets the sprite to its default settings
         */

    }, {
        key: 'reset',
        value: function reset() {
            _get(Sprite.prototype.__proto__ || Object.getPrototypeOf(Sprite.prototype), 'reset', this).call(this);
        }

        /**
         * Loads animations from settings, flipping sprites if needed
         * and sets the last animation of the array as current animation
         * 
         * 
         */

    }, {
        key: 'load',
        value: function load() {
            var _this2 = this;

            if (!this._settings) debugger;

            var animations = this._settings.animations,
                lastName = void 0;

            if (!this.loaded) {
                this.initProperties();

                this.loaded = true;

                Object.keys(animations).forEach(function (name) {
                    var animation = animations[name];
                    _this2.animations[name] = animation;
                    lastName = name;
                    // handle flip of sprites
                    if (animation.flipFrom) {
                        _this2.updateFlipAnimation(animation, animation.flipFrom, animation.flipType);
                    }
                });

                // by default, the last animation becames the current one
                this.setAnimation(lastName);
            } else {
                // debugger;
                // console.warn('attempt to load already loaded animations');
            }
        }

        /**
         * WIP: updateFlipAnimation
         * 
         * It's possible to define a new animation that is simply the flip of another one
         * This method copies the frames of the source animation and flips them
         * 
         * @param {Object} animation The animation to create frames for
         * @param {String} flipFrom The name of the animation to use as reference
         * @param {Number} flipType The direction of the flip: set to 1 for left/right flip, 2 for top/bottom flip
         * 
         */

    }, {
        key: 'updateFlipAnimation',
        value: function updateFlipAnimation(anim, flipFrom, flipType) {
            var animFromFrames = this.animations[flipFrom].frames;

            // copy frames from source animation (keeping references)
            anim.frames = new Array(animFromFrames.length);

            // right now, flip animations only contain the flipType: 1 = horiz, 2 = vert, 3 = both
            // we only need to define hitBoxes
            for (var i = 0; i < animFromFrames.length; ++i) {
                anim.frames[i] = {};
                // $.extend(true, anim.frames[i], animFromFrames[i]);
                Object.assign(anim.frames[i], animFromFrames[i]);
                if (flipType & 1) {
                    anim.frames[i].hitBox.x = animFromFrames[i].w - animFromFrames[i].hitBox.x2;
                    anim.frames[i].hitBox.x2 = animFromFrames[i].w - animFromFrames[i].hitBox.x;
                }
                if (flipType & 2) {
                    anim.frames[i].hitBox.y = animFromFrames[i].h - animFromFrames[i].hitBox.y2;
                    anim.frames[i].hitBox.y2 = animFromFrames[i].h - animFromFrames[i].hitBox.y;
                }
            }
        }

        /**
         * Changes the source image for this sprite
         * 
         * @param {Image} image the new Image to use as spritesheet
         */

    }, {
        key: 'setImage',
        value: function setImage(image) {
            this.image = image;

            // set image for children as well, this means
            // we assume children are using same image as parent
            // and this is BAD! ;)
            this.children.forEach(function (child) {
                child.setImage(image);
            });
        }

        /**
         * Plays the animation from the end up to the first frame
         */

    }, {
        key: 'rewind',
        value: function rewind() {
            this.direction = -this.direction;
            this.running = true;
            this.rewinded = true;
            this.nextFrame();
            console.log('[Sprite] rewind', this.currentFrameNum, this.running, this.rewinded, this.direction);
        }

        /**
         * Goes to the next animation frame
         * 
         * When reaching the last frame, the next frame will depend on animation.loop property:
         * 
         * - if loop == 2 then animation will play back in reverse mode, up to the first frame
         * - if loop == 1 then animation will play back from the begining so nextFrame = 0
         * - if loop == 0/undefined then animation will stop and sprite._onAnimateEnd is called
         */

    }, {
        key: 'nextFrame',
        value: function nextFrame() {
            if (!this.running) {
                return;
            }

            this.currentFrameNum += this.direction;

            if (this.currentFrameNum < 0 || this.currentFrameNum >= this.numFrames) {
                switch (this.currentAnim.loop) {
                    // reverse loop
                    case 2:
                        this.direction = -this.direction;
                        this.currentFrameNum = this.currentFrameNum < 0 ? 0 : this.numFrames - 1;
                        this.currentFrame = this.currentAnim.frames[this.currentFrameNum];
                        break;

                    case 1:
                        this.currentFrameNum = this.currentAnim.loopFrom ? this.currentAnim.loopFrom : 0;
                        this.currentFrame = this.currentAnim.frames[this.currentFrameNum];
                        break;

                    // no loop: end of animation
                    default:
                        // console.log('stop running animation', this.type);
                        if (!this.currentAnim.rewindOnEnd || this.rewinded) {
                            // since we stoped, it means currentFrameNum is out of bounds
                            // so we need to get it to the last inbound value to avoid crash
                            // if store/restore is used
                            this.currentFrameNum -= this.direction;

                            this.running = false;
                            // console.log('call on Animation ended, rewinded or did not need to');
                            this._animationEnded();
                        } else if (this.currentAnim.rewindOnEnd) {
                            this.rewind();
                        }
                        break;
                }
            } else {
                this.currentFrame = this.currentAnim.frames[this.currentFrameNum];
            }
        }

        /**
         * Save current animation name and frame for later use
         */

    }, {
        key: 'storeCurrentAnim',
        value: function storeCurrentAnim() {
            this.storedAnimName = this.currentAnimName;
            this.storedFrameNum = this.currentFrameNum;
        }

        /**
         * Restore animation to a previous saved state
         * 
         * @related {restorePreviousAnim}
         */

    }, {
        key: 'restorePreviousAnim',
        value: function restorePreviousAnim() {
            this.setAnimation(this.storedAnimName, null, this.storedFrameNum);
        }

        /**
         * advanceFrame is called at each render loop and waits for currentAnim.frameDuration
         * before advancing to the next animation frame.
         * 
         * If animName != than currentAnimName then switches to the new animation
         */

    }, {
        key: 'advanceFrame',
        value: function advanceFrame(animName) {
            this.previousFrameNum = this.currentFrameNum;

            if (this.currentAnim !== this.animations[animName]) {
                this.frameCounter = 0;
                this.setAnimation(animName);
            } else {
                if (++this.frameCounter > this.currentAnim.frameDuration) {
                    this.nextFrame();
                    this.frameCounter = 0;
                }
            }
        }

        /**
         * Returns the width of the current animation frame
         */

    }, {
        key: 'getCurrentWidth',
        value: function getCurrentWidth() {
            // TODO: handle scale/rotate ?
            return this.currentFrame.w;
        }

        /**
         * Returns the height of the current animation frame
         */

    }, {
        key: 'getCurrentHeight',
        value: function getCurrentHeight() {
            // TODO: handle scale/rotate ?
            return this.currentFrame.h;
        }

        /**
         * Returns the x offset in the spritesheet of current animation frame
         * 
         * @returns {number} current frame horizontal offset in the spritesheet
         */

    }, {
        key: 'getCurrentOffsetX',
        value: function getCurrentOffsetX() {
            return this.currentFrame.offsetX;
        }

        /**
         * Returns the y offset in the spritesheet of current animation frame
         * 
         * @returns {number} current frame vertical offset in the spritesheet
         */

    }, {
        key: 'getCurrentOffsetY',
        value: function getCurrentOffsetY() {
            return this.currentFrame.offsetY;
        }

        /**
         * Returns the optional horizontal shift of the sprite: can be used
         * if sprite image's width is less than actual frame width and sprite is flipped
         * 
         * @returns {number} current frame horizontal shift value or 0 if not defined
         * 
         * @private
         */

    }, {
        key: 'getCurrentShiftX',
        value: function getCurrentShiftX() {
            return this.currentFrame.shiftX || 0;
        }

        /**
         * Returns the optional horizontal shift of the sprite: can be used
         * if sprite image's height is less than actual frame height and sprite is flipped
         * 
         * @returns {number} current frame vertical shift value or 0 if not defined
         * 
         * @private
         */

    }, {
        key: 'getCurrentShiftY',
        value: function getCurrentShiftY() {
            return this.currentFrame.shiftY || 0;
        }

        /**
         * Returns the hitBox of current animation frame
         * 
         * @returns {Object} the hitbox
         * 
         * @example
         * 
         * { x: 0, y: 0, x2: 10, y2: 10 }
         */

    }, {
        key: 'getHitBox',
        value: function getHitBox() {
            return this.currentFrame.hitBox;
        }

        /**
         * Centers the sprite horizontaly around a tile
         * 
         * @param {Object} tilePos The tile to center the sprite on
         */

    }, {
        key: 'centerXOverTile',
        value: function centerXOverTile(tilePos) {
            var tileWidth = this.currentMap.tileWidth,
                currentWidth = this.getCurrentWidth(),

            // currentWidth = this.getHitBox().x2 - this.getHitBox().x,
            shift = Math.floor((tileWidth - currentWidth) / 2);

            if (currentWidth <= tileWidth) {
                this.x = tilePos.x * tileWidth + shift;
            }
        }

        /**
         * Stops current animation from running
         * 
         * TODO: rename this method
         */

    }, {
        key: 'clearMove',
        value: function clearMove() {
            this.running = false;
            // super.clearMove();
        }

        /**
         * Changes the sprite's current animation
         * 
         * @param {String} anim The new animation to play.
         * @param {Function=undefined} fn An optionnal callback to run when the animation will have ended.
         * @param {number=0} frameNum The first frame to play, defaults to zero.
         * @param {Boolean=false} rever Wether to start playing the animation from the last frame
         */

    }, {
        key: 'setAnimation',
        value: function setAnimation(anim, fn, frameNum, revert) {
            // console.log('[Sprite] setting animation of', this.type, 'to', anim);
            // load animations if not loaded
            if (!this.loaded) {
                this.load();
            }

            try {
                if (this.currentAnim) {
                    this._animationEnded();
                }

                this.animEndDef = new __WEBPACK_IMPORTED_MODULE_2_Core_Deferred__["a" /* default */]();

                if (this.currentAnim) {
                    this._animationChanged(this.currentAnimName, anim);
                }

                this.animChangeDef = new __WEBPACK_IMPORTED_MODULE_2_Core_Deferred__["a" /* default */]();

                this.currentAnim = this.animations[anim];
                this.currentAnimName = anim;
                this.numFrames = this.currentAnim.frames.length;

                this.currentFrameNum = this.previousFrameNum = !revert ? frameNum || 0 : this.numFrames - 1;
                this.currentFrame = this.currentAnim.frames[this.currentFrameNum];

                // animation running
                this.running = true;

                this.rewinded = false;

                // we need to reset direction in case we were rewinding
                this.direction = revert ? -1 : 1;

                // add end animation callback if specified
                if (typeof fn === 'function') {
                    this.onAnimationEnd(fn);
                }
            } catch (err) {
                debugger;
                console.error('[Sprite] setAnimation() - unable to set animation ', anim, '(' + err.message + ')', 'for sprite', this.id);
            }
        }

        /**
         * Stops playing current animation
         * 
         * @param {Boolean} runPreviousEndMethod Set to false if you don't want to run the end callback functions
         */

    }, {
        key: 'stopAnimation',
        value: function stopAnimation(runPreviousEndMethod) {
            this.running = false;

            // do not run end callbacks if animation has been interrupted before
            // reaching the end
            if (this.animEndDef && !runPreviousEndMethod) {
                this.animEndDef.reject();
            }
        }

        /**
         * Starts/resumes animation playback
         * 
         * This method only sets `this.running` to true.
         */

    }, {
        key: 'startAnimation',
        value: function startAnimation() {
            this.running = true;
        }

        /**
         * Adds a new function that will be called when current animation ends
         * 
         * @param {Function} fn The callback to run
         */

    }, {
        key: 'onAnimationEnd',
        value: function onAnimationEnd(func) {
            // console.log(this.currentAnimName, 'animationEnd');
            this.animEndDef.promise.then(func.bind(this));
        }

        /**
         * Adds a new function that will be called when a new animation is ran
         * 
         * @param {Function} func The callback function to add.
         */

    }, {
        key: 'onAnimationChange',
        value: function onAnimationChange(func) {
            this.animChangeDef.promise.then(func.bind(this));
        }

        /**
         * Runs every registered end callback function
         * 
         * @private
         */

    }, {
        key: '_animationEnded',
        value: function _animationEnded() {
            // console.log('animationEnd', this.currentAnimName);
            this.animEndDef.resolve(this.currentAnimName, this.currentFrameNum);
        }

        /**
         * Runs every registered change callback function
         * 
         * @private
         */

    }, {
        key: '_animationChanged',
        value: function _animationChanged(oldAnim) {
            this.animChangeDef.resolve(oldAnim, this.currentAnimName);
        }

        /**
         * onHit is called when a collision has been detect between the sprite and another graphical object
         * 
         * @param {GfxObject} obj The graphical object that collided
         */

    }, {
        key: 'onHit',
        value: function onHit(obj) {
            _get(Sprite.prototype.__proto__ || Object.getPrototypeOf(Sprite.prototype), 'onHit', this).call(this, obj);
            console.log('[Sprite] oops, ', this.type, ' [', this.id, '] ', 'was hit by', obj.name, ' [', obj.id, ']');
        }

        /**
         * Draws the sprite onto the canvas context passed
         * 
         * @param {CanvasContext} destCtx The context where to render the sprite.
         * @param {Boolean=false} debug wether to show the sprite hit box
         * 
         * @private
         */

    }, {
        key: 'draw',
        value: function draw(destCtx, debug) {
            if (!this.visible) {
                return;
            }

            // auto goto next frame
            if (this.currentAnimName.length) {
                this.advanceFrame(this.currentAnimName);
            }

            var w = this.getCurrentWidth(),
                scaledW = w * this.scale,
                h = this.getCurrentHeight(),
                scaledH = h * this.scale,
                subScaledW = scaledW / 2 | 0,
                subScaledH = scaledH / 2 | 0,
                x = this.getCurrentOffsetX(),
                y = this.getCurrentOffsetY(),
                drawX = this.currentAnim.flipFrom ? this.x + this.getCurrentShiftX() - scaledW : this.x + this.getCurrentShiftX(),
                drawY = this.currentAnim.flipFrom ? this.y + this.getCurrentShiftY() - scaledH : this.y + this.getCurrentShiftY(),
                mapOffsetX = this.currentMap && this.currentMap.viewportX || 0,
                mapOffsetY = this.currentMap && this.currentMap.viewportY || 0;

            // if width or height equals to 0 we may skip drawing
            // this fixes IndexSizeError in Firefox
            if (!w || !h) {
                return;
            }

            // TODO: fix map position when rotate is used
            if (this.isFxQueueEmpty()) {
                if (this.currentAnim.flipFrom) {
                    destCtx.save();
                    destCtx.scale(this.currentAnim.flipType & 1 ? -1 : 1, this.currentAnim.flipType & 2 ? -1 : 1);
                    // console.log('drawing to', drawX + mapOffsetX, drawY + mapOffsetY);
                }

                destCtx.drawImage(this.image, Math.floor(x), Math.floor(y), Math.floor(w), Math.floor(h), Math.floor(drawX + mapOffsetX), Math.floor(drawY + mapOffsetY), Math.floor(scaledW), Math.floor(scaledH));

                if (this.currentAnim.flipFrom) {
                    destCtx.restore();
                }

                if (this.isDebug === true || debug === true) {
                    this.showHitBox(destCtx);
                }
            } else {
                this.executeFx(destCtx);

                // translate to keep the object as its position
                destCtx.save();
                // flip
                if (this.currentAnim.flipFrom) {
                    destCtx.scale(this.currentAnim.flipType & 1 ? -1 : 1, this.currentAnim.flipType & 2 ? -1 : 1);
                }
                destCtx.translate(drawX + mapOffsetX + subScaledW, drawY + mapOffsetY + subScaledH);
                destCtx.rotate(this.angle);
                destCtx.drawImage(this.image, x, y, w, h, -subScaledW, -subScaledH, scaledW, scaledH);
                destCtx.restore();
                if (this.isDebug === true || debug === true) {
                    this.showHitBox(destCtx);
                }
            }

            if (this.children.length) {
                this.children.forEach(function (sprite) {
                    sprite.draw(destCtx, debug);
                });
            }
        }

        /**
         * Draws the sprite hit box
         * 
         * @param {CanvasContext} The canvas context where to render the hitbox
         */

    }, {
        key: 'showHitBox',
        value: function showHitBox(ctx) {
            // TODO: add scale (rotation ?)
            var hitBox = this.getHitBox(),
                mapOffsetX = this.currentMap && this.currentMap.viewportX || 0,
                mapOffsetY = this.currentMap && this.currentMap.viewportY || 0;

            if (!hitBox) {
                return;
            }

            ctx.strokeStyle = 'rgb(0,230,0)';
            ctx.beginPath();
            ctx.moveTo(hitBox.x + this.x + mapOffsetX, hitBox.y + this.y + mapOffsetY);
            ctx.lineTo(hitBox.x2 + this.x + mapOffsetX, hitBox.y + this.y + mapOffsetY);
            ctx.lineTo(hitBox.x2 + this.x + mapOffsetX, hitBox.y2 + this.y + mapOffsetY);
            ctx.lineTo(hitBox.x + this.x + mapOffsetX, hitBox.y2 + this.y + mapOffsetY);
            ctx.lineTo(hitBox.x + this.x + mapOffsetX, hitBox.y + this.y + mapOffsetY);
            ctx.closePath();
            ctx.stroke();
        }

        /**
         * Draws all sprite animation frames onto a temporary canvas that is added to the body tag
         * 
         * This is used for debugging sprites
         *
         * @private
         */

    }, {
        key: 'describeAllAnimations',
        value: function describeAllAnimations() {
            var _this3 = this;

            var animation = null,
                that = this,
                destX = 1,
                destY = 1,
                animationName = '',
                width = 0,
                height = 0,
                totalWidth = 0,
                totalHeight = 0,
                canvas = void 0,
                ctx = null;

            Object.keys(this.animations).forEach(function (animationName) {
                animation = _this3.animations[animationName];
                width = animation.frames[0].w;
                height = animation.frames[0].h;

                if ((width + 5) * animation.frames.length > totalWidth) {
                    totalWidth = (width + 5) * animation.frames.length;
                }

                totalHeight += height + 5;
            });

            canvas = document.getElementById('describe');

            if (!canvas) {
                canvas = document.createElement('canvas');
                canvas.id = 'describe';
                canvas.setAttribute('width', totalWidth);
                canvas.setAttribute('height', totalHeight);
                canvas;
            }
            debugger;
            ctx = new Dom('#describe')[0] && new Dom('#describe')[0].getContext('2d') || new Dom('canvas').attr('id', 'describe').attr('width', totalWidth).attr('height', totalHeight).css('zIndex', '100').appendTo('body')[0].getContext('2d');

            ctx.webkitImageSmoothingEnabled = false;

            Object.keys(this.animations).forEach(function (animationName) {
                destX = 1;

                animation = _this3.animations[animationName];
                console.log(animationName, 'got', animation.frames.length);
                console.log('frameDuration=', animation.frameDuration);
                console.log('loop=', animation.loop);
                console.log('loopFrom=', animation.loopFrom);
                console.log('rewindOnEnd', animation.rewindOnEnd);

                animation.frames.forEach(function (frame, i) {
                    var w = frame.w,
                        h = frame.h,
                        x = frame.offsetX,
                        y = frame.offsetY,
                        hitBox = frame.hitBox;

                    // Draw sprite image
                    ctx.drawImage(that.image, x, y, w, h, destX, destY, w, h);

                    /* Draw frame around sprite */
                    ctx.strokeStyle = 'rgb(240,240,240)';
                    ctx.beginPath();
                    ctx.moveTo(destX - 1, destY - 1);
                    ctx.lineTo(destX + w, destY - 1);
                    ctx.lineTo(destX + w, destY + h + 1);
                    ctx.lineTo(destX - 1, destY + h + 1);
                    ctx.lineTo(destX - 1, destY - 1);
                    ctx.closePath();
                    ctx.lineCap = 'butt';
                    ctx.stroke();

                    // draw hitBox
                    if (hitBox) {
                        ctx.strokeStyle = 'rgb(0,230,0)';
                        ctx.beginPath();
                        ctx.moveTo(destX + hitBox.x, destY + hitBox.y);
                        ctx.lineTo(destX + hitBox.x2, destY + hitBox.y);
                        ctx.lineTo(destX + hitBox.x2, destY + hitBox.y2);
                        ctx.lineTo(destX + hitBox.x, destY + hitBox.y2);
                        ctx.lineTo(destX + hitBox.x, destY + hitBox.y);
                        ctx.closePath();
                        ctx.stroke();
                    }

                    destX += width + 5;
                });

                destY += height + 5;
            });
        }

        /**
         * Returns the sprite's animation hash
         * 
         * Used for debugging
         * 
         * @private
         */

    }, {
        key: 'listAnimations',
        value: function listAnimations() {
            return this.animations;
        }
    }]);

    return Sprite;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Object__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Sprite);

/***/ }),
/* 13 */
/* exports provided: default */
/* exports used: default */
/*!***************************!*\
  !*** ./js/Object/Text.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Object__ = __webpack_require__(/*! Object/Object */ 5);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/
/**
 * Basic class for displaying text using Canvas
 * 
 * @param {String} type The type of the graphic object
 * @param {Object} options
 * @param {String} [options.text=undefined] The initial text. Can be changed later using Text.setText().
 * @param {Number} [options.w=0] The width of the text.
 * @param {Number} [options.h=0] The height of the text.
 * @param {String} [options.fontFace="Arial"] The font to use to draw the text.
 * @param {String} [options.fontStyle="normal"] The style of the font.
 * @param {String} [options.fontSize="18px"] The size of the font.
 * @param {String} [options.fontWeight="normal"] The weight of the font.
 * @param {String} [options.align="center"] How to align the text when rendered.
 * @param {String} [options.color="white"] The color to use when rendering the text.
 * 
 * @example
 * 
 * let myText = new Text({
 *  text: 'hello',
 *  fontFace: 'Verdana',
 *  fontStyle: 'bold',
 *  fontSize: '24px'
 * })
 */

var Text = function (_GfxObject) {
    _inherits(Text, _GfxObject);

    function Text() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Text' + new Date().getTime();
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Text);

        var _this = _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, type, options));
        // type = type || 'Text' + new Date().getTime();
        // options = options || {};

        _this.fontFace = options.fontFace || 'Arial';
        _this.fontStyle = options.fontStyle || 'normal';
        _this.fontSize = options.fontSize || '18px';
        _this.fontWeight = options.fontWeight || 'normal';
        _this.align = options.align || 'center';
        _this.color = options.color || 'white';

        _this._setFont();

        if (options.text) {
            _this.setText(options.text);
        }

        _this.w = options.w || 0;
        _this.h = options.h || 0;
        return _this;
    }

    /**
     * TODO
     * 
     * @private
     */


    _createClass(Text, [{
        key: 'moveWithSpline',
        value: function moveWithSpline() {}

        /**
         * Change the size of the object
         * 
         * @param {Number} w The width of the object.
         * @param {Number} h The height of the object.
         */

    }, {
        key: 'setSize',
        value: function setSize(w, h) {
            if (w !== null) {
                this.w = w;
            }

            if (h !== null) {
                this.h = h;
            }
        }

        /**
         * Change the text of the object
         * 
         * @param {String} text The new text.
         * @param {String} [text='center'] Optional new alignment for the text.
         */

    }, {
        key: 'setText',
        value: function setText(text, align) {
            this.text = text;
            this.align = align || 'center';
        }

        /**
         * Change the color of the object
         * 
         * @param {String} color Thew new color to use, can be anything that is valid for the `color` *CSS* property.
         */

    }, {
        key: 'setColor',
        value: function setColor(color) {
            this.color = color;
        }

        /**
         * Returns the hitbox of the text object
         * 
         * @returns {Object} The new hitbox
         */

    }, {
        key: 'getHitBox',
        value: function getHitBox() {
            return {
                x: 0,
                y: 0,
                x2: this.w,
                y2: this.y
            };
        }

        /**
         * Returns the width of the text object
         * 
         * @returns [Number] The object's width
         */

    }, {
        key: 'getCurrentWidth',
        value: function getCurrentWidth() {
            return this.w;
        }

        /**
         * Returns the height of the text object
         * 
         * @returns [Number] The object's height
         */

    }, {
        key: 'getCurrentHeight',
        value: function getCurrentHeight() {
            return this.h;
        }

        /**
         * Returns the horizontal offset of the text object
         * 
         * @returns [Number] The object's horizontal offset
         */

    }, {
        key: 'getCurrentOffsetX',
        value: function getCurrentOffsetX() {
            return this.offsetX;
        }

        /**
         * Returns the vertical offset of the text object
         * 
         * @returns [Number] The object's vertical offset
         */

    }, {
        key: 'getCurrentOffsetY',
        value: function getCurrentOffsetY() {
            return this.offsetY;
        }

        /**
         * Called when an object collides with the text Object
         * 
         * @param {GfxObject} obj The graphical object that collided.
         */

    }, {
        key: 'onHit',
        value: function onHit(obj) {
            _get(Text.prototype.__proto__ || Object.getPrototypeOf(Text.prototype), 'onHit', this).call(this, obj);
            console.log('oops, ', this.type, ' [', this.id, '] ', 'was hit by', obj.name, ' [', obj.id, ']');
        }

        /**
         * Called on each render loop: renders the object on the destination canvas context
         * 
         * @param {CanvasContext} destCtx Where to render the object.
         * 
         * @private
         */

    }, {
        key: 'draw',
        value: function draw(destCtx) {
            if (!this.visible) {
                return;
            }

            destCtx.fillStyle = this.color;
            destCtx.font = this.font;
            destCtx.textBaseline = 'top';

            if (this.angle !== 0) {
                destCtx.save();
                destCtx.rotate(this.angle);
            }

            destCtx.fillText(this.text, this.x, this.y);

            if (this.angle !== 0) {
                destCtx.restore();
            }

            //                var w = this.getCurrentWidth(),
            //					scaledW = w * this.scale,
            //					h = this.getCurrentHeight(),
            //					scaledH = h * this.scale,
            //					x = this.getCurrentOffsetX(),
            //					y = this.getCurrentOffsetY();
            //
            //				destCtx.drawImage(image, x, y, w, h, this.x, this.y, scaledW, scaledH);
        }

        /**
         * Generates the font css property using current this.fontSize and this.fontFace
         */

    }, {
        key: '_setFont',
        value: function _setFont() {
            this.font = this.fontSize + ' ' + this.fontFace;
        }
    }]);

    return Text;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Object__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Text);
;

/***/ }),
/* 14 */
/* exports provided: default */
/* exports used: default */
/*!*************************!*\
  !*** ./js/Core/Pool.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Pool support for AthenaJS
 * 
 * This objects allows to defined and use pools for any type of object
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    /**
     * Creates a new pool
     * 
     * @param {Function} obj the constructor of the object to add a pool for
     * @param {Number} suze the size of the pool
     */
    create: function create(obj, size) {
        obj._pool = [];
        obj._poolMarker = 0;
        obj._poolSize = 0;

        var pool = obj._pool;

        /*
         * Get a new object from the pool
         * 
         * -*Note* This method does not call new but gets a reference to an already created object
         *  and calls its constructor.
         * 
         *  @returns {Object} an instance of the object from the pool
         * 
         */
        obj.createFromPool = function () {
            // expand the pool if we run out of objects
            if (obj._poolSize <= obj._poolMarker) {
                obj.expandPool(10);
            }

            // get new object
            var newObj = obj._pool[obj._poolMarker++];

            // save its index
            newObj._poolIndex = obj._poolMarker - 1;

            // apply the constructor
            obj.prototype.constructor.apply(newObj, arguments);

            return newObj;
        };

        /*
         * expands an already created pool
         * 
         * ]@param {number} size the new size of the pool
         */
        obj.expandPool = function (size) {
            var options = {
                pool: true
            };

            for (var i = pool.length, max = pool.length + size; i < max; i++) {
                pool.push(new obj(options));
            };

            obj._poolSize += size;
        };

        // TODO: test me
        // TODO: call the object's destructor, if any (guess we'll need to add it)
        // obj.__proto__.freeFromPool = function() {
        obj.prototype.freeFromPool = function () {
            if (obj._poolMarker > 0) {
                obj._poolMarker--;
            }

            var end = pool[obj._poolMarker],
                endIndex = end._poolIndex;

            pool[obj._poolMarker] = this;
            pool[this._poolIndex] = end;

            end._poolIndex = this._poolIndex;
            this._poolIndex = endIndex;
        };

        // initial expand of the pool
        obj.expandPool(size);
    }
});

/***/ }),
/* 15 */
/* exports provided: default */
/* exports used: default */
/*!*******************************!*\
  !*** ./js/Display/Display.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_FX_Easing_Easing__ = __webpack_require__(/*! FX/Easing/Easing */ 17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Core_Dom__ = __webpack_require__(/*! Core/Dom */ 7);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }






/*jshint devel: true*/
/**
 * 
 */

var Display = function () {
    function Display(options, target) {
        _classCallCheck(this, Display);

        console.log('[Display] Init()', options.name /*, options, target*/);

        var prefix = function () {
            var styles = window.getComputedStyle(document.documentElement, ''),
                pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1],
                dom = 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1];
            return {
                dom: dom,
                lowercase: pre,
                css: '-' + pre + '-',
                js: pre[0].toUpperCase() + pre.substr(1)
            };
        }();

        this.layers = new Array(options.numLayers);

        this.prefix = prefix.lowercase;

        this.target = target || new __WEBPACK_IMPORTED_MODULE_3_Core_Dom__["a" /* default */]('div').attr('id', 'display_' + options.name).appendTo('body');
        this.width = options.width;
        this.height = options.height;

        this.type = options.type || '2d';

        this.fxCtx = null;

        this._createLayers();

        this.fxQueue = {
            'pre': {},
            'post': {}
        };
    }

    _createClass(Display, [{
        key: 'getBuffer',
        value: function getBuffer(w, h) {
            var ctx = new __WEBPACK_IMPORTED_MODULE_3_Core_Dom__["a" /* default */]('canvas').attr({
                width: w + 'px',
                height: h + 'px'
            })[0].getContext('2d');

            ctx['imageSmoothingEnabled'] = false;

            return ctx;
        }
    }, {
        key: '_createLayers',
        value: function _createLayers() {
            var i = void 0;

            for (i = 0; i < this.layers.length; ++i) {
                this.layers[i] = new __WEBPACK_IMPORTED_MODULE_3_Core_Dom__["a" /* default */]('canvas').addClass('layer_' + i).attr({
                    'width': this.width,
                    'height': this.height
                }).css({
                    'width': this.width + 'px',
                    'height': this.height + 'px',
                    zIndex: i
                }).appendTo(this.target)[0].getContext(this.type);

                this.layers[i]['imageSmoothingEnabled'] = false;
            }

            this.fxCtx = new __WEBPACK_IMPORTED_MODULE_3_Core_Dom__["a" /* default */]('canvas').addClass('fx').attr({
                'width': this.width,
                'height': this.height
            }).css({
                'width': this.width + 'px',
                'height': this.height + 'px',
                zIndex: i + 1
            }).appendTo(this.target)[0].getContext(this.type);

            this.fxCtx['imageSmoothingEnabled'] = false;
        }
    }, {
        key: 'clearScreen',
        value: function clearScreen(ctx) {
            if (0) {
                // setting canvas width resets imageSmoothingEnable to true
                ctx.canvas.width = ctx.canvas.width;

                ctx['imageSmoothingEnabled'] = false;
            } else {
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            }
        }
    }, {
        key: 'clearAllScreens',
        value: function clearAllScreens() {
            for (var i = 0; i < this.layers.length; ++i) {
                this.clearScreen(this.layers[i]);
            }

            this.clearScreen(this.fxCtx);
        }
    }, {
        key: 'renderScene',
        value: function renderScene(scene) {
            this.clearScreen(this.fxCtx);

            // execute pre fx
            // TODO: here we have to make some hack to pre-render all buffers into a single one
            // then aply fx on this one, then render this one onto for-most layer
            this.executeFx(this.layers[0], null, scene, null, 'pre');

            // TODO: all CTX ?
            for (var i = 0; i < this.layers.length; ++i) {
                this.layers[i].canvas.style.opacity = scene.getOpacity();
            }

            scene.render(this.layers);

            if (scene.hudScene) {
                scene.hudScene.render(this.layers);
            }

            // TODO: here we have to make some hack to pre-render all buffers into a single one
            // then aply fx on this one, then render this one onto for-most layer
            /* HACK */
            if (Object.keys(this.fxQueue['post']).length) {
                this.clearScreen(this.fxCtx);
                // merge all canvas into fxCtx one
                for (var _i = 0; _i < this.layers.length; ++_i) {
                    this.fxCtx.drawImage(this.layers[_i].canvas, 0, 0);
                }
            }
            /* HACK */
            // execute pre fx
            this.executeFx(this.fxCtx, this.fxCtx, scene, null, 'post');
        }
    }, {
        key: 'prepareCanvas',
        value: function prepareCanvas(resources) {
            var context = null,
                i = 0,
                oldStyle = '';

            for (i = 0; i < this.layers.length; ++i) {
                context = this.layers[i];

                oldStyle = context.canvas.style.display;
                context.canvas.style.display = "none";

                // NOTE: should we hide the canvas before?
                resources.forEach(function (resource) {
                    if (resource.type === "image") {
                        // NOTE: maybe drawing only 1px is enough?
                        context.drawImage(resource.elt, 0, 0);
                    }
                });

                this.clearScreen(context);

                context.canvas.style.display = oldStyle;
            }
        }
    }, {
        key: 'animate',
        value: function animate(fxName, options, context) {
            console.log('animate');

            var fxClass = __WEBPACK_IMPORTED_MODULE_0_FX_FX__["a" /* default */].getEffect(fxName),
                promise,
                easing = options.easing || 'linear',
                when = options.when || 'pre',
                fx,
                that = this;

            options.context = context || this;
            // console.log('animate', this.fxQueue);

            if (typeof this.fxQueue[when][fxName] !== 'undefined') {
                console.warn('Fx', fxName, 'already in progress, cannot execute twice');
                var def = new __WEBPACK_IMPORTED_MODULE_2_Core_Deferred__["a" /* default */]();
                def.resolve();
                promise = def.promise;
            } else if (!fxClass) {
                console.warn('Fx', fxName, 'unknown: did you spell it correctly ?');
            } else {
                fx = new fxClass(options, this);
                fx.setEasing(new __WEBPACK_IMPORTED_MODULE_0_FX_FX__["a" /* default */].getEasing(easing));

                promise = fx.start().then(function () {
                    console.log('effect ended, need to stop it', fxName);
                    delete that.fxQueue[when][fxName];
                });
                this.fxQueue[when][fxName] = fx;
            }

            return promise;
        }
    }, {
        key: 'stopAnimate',
        value: function stopAnimate() /*fxName*/{
            console.log('TODO: need to stop animation');
        }
    }, {
        key: 'executeFx',
        value: function executeFx(ctx, fxCtx, obj, time, when) {
            var fxObject;

            when = when || 'pre';

            for (var fxName in this.fxQueue[when]) {
                fxObject = this.fxQueue[when][fxName];
                // console.log('processing fx', fxName, fxObject);

                fxObject.process(ctx, fxCtx, obj, time);
            }
        }
    }, {
        key: 'clearDisplay',
        value: function clearDisplay() {
            console.log('clearFX Queue');
            this.fxQueue.pre = {};
            this.fxQueue.post = {};

            this.clearAllScreens();
        }
    }]);

    return Display;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Display);

/***/ }),
/* 16 */
/* exports provided: default */
/* exports used: default */
/*!**************************************!*\
  !*** ./js/Display/DisplayManager.js ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Display_Display__ = __webpack_require__(/*! Display/Display */ 15);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/*jshint devel: true*/

var DisplayManager = function () {
    function DisplayManager(options) {
        _classCallCheck(this, DisplayManager);

        console.log('[DisplayManager] Init()' /*, options*/);

        this.displays = {};
    }

    _createClass(DisplayManager, [{
        key: 'addDisplay',
        value: function addDisplay(options, target) {
            console.log('[Display Manager] adding display', options.name /*, 'with options', options*/);

            this.displays[options.name] = new __WEBPACK_IMPORTED_MODULE_0_Display_Display__["a" /* default */](options, target);

            return this.displays[options.name];
        }
    }, {
        key: 'getDisplay',
        value: function getDisplay(id) {
            return this.displays[id];
        }
    }]);

    return DisplayManager;
}();

;

console.log('end DisplayManager');
/* harmony default export */ __webpack_exports__["a"] = (new DisplayManager());

/***/ }),
/* 17 */
/* exports provided: default */
/* exports used: default */
/*!********************************!*\
  !*** ./js/FX/Easing/Easing.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);


/*jshint devel: true, bitwise: false*/
var Easing = {
    //                     x,          t,             b,        c,          d
    'easeInQuad': function easeInQuad(x, t, b, c, d) {
        console.log('easeInQuad');
        return c * (t /= d) * t + b;
    },
    'easeOutBounce': function easeOutBounce(x, t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
            return c * (7.5625 * t * t) + b;
        } else if (t < 2 / 2.75) {
            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
        } else if (t < 2.5 / 2.75) {
            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
        } else {
            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
        }
    },
    'swing': function swing(x, t, b, c, d) {
        return 0.5 - Math.cos(x * Math.PI) / 2;
    }
};

Object.keys(Easing).forEach(function (name) {
    return __WEBPACK_IMPORTED_MODULE_0_FX_FX__["a" /* default */].addEasing(name, Easing[name]);
});

/* harmony default export */ __webpack_exports__["a"] = (Easing);

/***/ }),
/* 18 */
/* exports provided: default */
/* exports used: default */
/*!***********************!*\
  !*** ./js/Map/Map.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Object_Wave__ = __webpack_require__(/*! Object/Wave */ 21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Resource_ResourceManager__ = __webpack_require__(/*! Resource/ResourceManager */ 6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Notification_NotificationManager__ = __webpack_require__(/*! Notification/NotificationManager */ 10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Map_MapEvent__ = __webpack_require__(/*! Map/MapEvent */ 19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_Core_Deferred__ = __webpack_require__(/*! Core/Deferred */ 0);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }









/*jshint devel: true, bitwise: false*/

window.maps = {};

/**
 * The `Map` is used to display tile-based backgrounds. It is usually initialized using a buffer containing
 * tiles and tilebehaviors. It has a viewport so that only a part of the map can be displayed.
 * A map also contains objects that are added onto the map once the viewport reaches a `block`.
 * 
 * @param {Object} options
 * @param {string} options.src The url to an image that will be used for the tiles
 * @param {number} options.tileWidth The width of a tile
 * @param {number} options.tileHeight The height of a tile
 * @param {number} options.width The full width of the map
 * @param {number} options.height The full height of the map
 * @param {number} options.viewportW The width of the viewport: it is usually the same as the game width
 * @param {number} options.viewportH The height of the viewport: it is usually the same as the game height
 * @param {ArrayBuffer} options.buffer The buffer containing width \* height bytes container tile numbers followed by width*height bytes for the tile behaviors
 * @example
 * var map = new Map({
 *    src: 'mapTiles.jpg',
 *    tileWidth: 32,
 *    tileHeight 32,
 *    width: 800,
 *    height: 600,
 *    buffer: new ArrayBuffer(800*600*2)
 * })
 * 
 */

var Map = function () {
	function Map(options) {
		_classCallCheck(this, Map);

		this.options = options;

		// image url used for the map graphic tiles
		this.src = options.src;

		// tiles and map width
		this.tileWidth = options.tileWidth || 64;
		this.tileHeight = options.tileHeight || 32;
		this.width = options.width || 1024;
		this.height = options.height || 1024;

		// DEBUG: usually tiles are loaded from binary files and set as ArrayBuffer
		// but previously tiles could be set from a JSON text file
		this.tiles = options.tiles && this._createTiles(options.tiles) || [];

		this.triggers = options.triggers || {};
		this.windows = options.windows || {};

		// defines viewport window: used for scrolling
		this.viewportX = options.viewportX || 0;
		this.viewportY = options.viewportY || 0;
		this.viewportW = options.viewportW || 0;
		this.viewportH = options.viewportH || 0;

		// when scrolling we set a new target and keep track of previous start x & y
		this.viewportTargetX = this.viewportTargetY = this.viewportSpeedX = this.viewsportSpeedY = this.viewportStartX = this.viewportStartY = 0;

		/* Scroll Type 1 */
		// this.viewportLimitX = 230;
		// this.viewportCenterX = 10; // 207

		// this.viewportLimitY = 154;
		// this.viewportCenterY = 230;

		/* Scroll Type 2 */
		/* Scrolling specific: TODESCRIBE */
		this.viewportLimitX = 230;
		this.viewportCenterX = 307;

		this.viewportLimitY = 154;
		this.viewportCenterY = 230;

		/* / End Scrolltype */
		this.scrollOffsetX = 0;
		this.scrollOffsetY = 0;

		this.scrollTileOffsetX = 0;
		this.scrollTileOffsetY = 0;

		this.viewportLimits = {
			x1: this.viewportLimitX,
			x2: this.viewportW - this.viewportLimitX,
			y1: this.viewportLimitY,
			y2: this.viewportLimitH - this.viewportLimitY
		};

		/* list of objects sorted by type for faster colision detection */
		this.objects = [];
		this.friendBullets = [];
		this.enemies = [];
		this.platforms = [];

		this.name = options.name;

		// calculate the number of rows/cols depending on the viewport window
		this._calcNumTiles(false);

		// sets map data buffer
		this.setBuffer(options.buffer);

		this.dataUrl = options.dataUrl;
		/*
  		this.map = options.map || new Array(this.numCols * this.numRows);
                this.tileTypes = options.tileTypes || new Array(this.numCols * this.numRows);
  		*/

		this.reverse = false;

		this.firstRow = this.lastRow = this.firstCol = this.lastCol = 0;

		this.isDebug = false;

		this.srcBitmap = null;

		// if map is being scrolled, should we scroll again ?
		this.moving = false;

		// Easing function to use while moving viewport (scrolling)
		// See FX/Easing for a list of available easing functions
		this.easing = __WEBPACK_IMPORTED_MODULE_4_FX_FX__["a" /* default */].getEasing(options.easing || 'linear');

		// used when initiating a new scroll
		this.startMoveTime = null;
		// scrollType 1
		// this.duration = 10;
		// scrollType 2
		// scrolling duration
		this.duration = 800;

		this.masterObject = null;

		// current viewport window
		this.currentWindow = null;

		// start position of the master object
		this.startX = options.startX || 0;
		this.startY = options.startY || 0;

		// Debug: add current map to the global list of maps
		window.maps[this.name] = this;

		// set mapEvent class
		// if (options.mapEventClass) {
		// 	this.mapEvent = new options.mapEventClass(this);
		// } else {
		// 	this.mapEvent = new MapEvent(this);
		// }

		// TODESCRIBE
		this.mapEvent = new __WEBPACK_IMPORTED_MODULE_5_Map_MapEvent__["a" /* default */](this);

		// flag that 
		this.isDirty = true;
	}

	/**
  * 
  * Changes the start position using the master's current position: usually called when reaching a checkpoint
  * 
  */


	_createClass(Map, [{
		key: 'setStartXYFromMaster',
		value: function setStartXYFromMaster() {
			this.startX = this.masterObject.x;
			this.startY = this.masterObject.y;
		}

		/**
   * Resets the master's position to the map.startX/startY position & resets its animation state:
   * usually called when player loses a life and needs to be positionned at checkpoint
   * 
   */

	}, {
		key: 'resume',
		value: function resume() {
			console.log('avant', this.masterObject.running, this.masterObject.currentAnimName);
			this.masterObject.reset();
			console.log('apres', this.masterObject.running, this.masterObject.currentAnimName);
			console.log('resuming', this.startX, this.startY);

			this.masterObject.x = this.startX;
			this.masterObject.y = this.startY;
		}

		/**
   * 
   * Resets the map:
   * 	- removes objects from the map
   *  - reset windows
   *  - reset triggers
   *  - reset mapEvents
   *  - reset viewport + scrollOffset
   *  - sets isDirty to true so that map is redrawn
   * 
   * TODO: scrollOffset shouldn't be 0 but depends on the master's position
   * 
   */

	}, {
		key: 'reset',
		value: function reset() {
			this.masterObject = null;

			// remove objects from the map and empty collision groups
			this.objects.length = 0;
			this.friendBullets.length = 0;
			this.enemies.length = 0;
			this.platforms.length = 0;
			// reset mapItems

			// reset windows
			for (var id in this.windows) {
				this.windows[id].displayed = false;
			}

			// reset triggers
			for (var _id in this.triggers) {
				this.triggers[_id].trigerred = false;
			}

			// reset mapEvent switches states too (fixes switch that automatically triggers)
			this.mapEvent.reset();

			// and reset viewPort too
			this.viewportX = this.options.viewportX || 0;
			this.viewportY = this.options.viewportY || 0;
			this.viewportW = this.options.viewportW || 0;
			this.viewportH = this.options.viewportH || 0;

			// and scroll offset
			this.scrollOffsetX = 0;
			this.scrollOffsetY = 0;

			this.scrollTileOffsetX = 0;
			this.scrollTileOffsetY = 0;

			this.firstCol = -this.viewportX / this.tileWidth;
			this.firstRow = -this.viewportY / this.tileHeight;

			this.lastCol = this.firstCol + this.numViewportCols;
			this.lastRow = this.firstRow + this.numViewportRows;

			this.isDirty = true;
		}

		/**
   * Sets the map tiles and tiletypes from binary buffer:
   *  - first (numCols * numRows) bytes are visual tile numbers
   *  - last (numCols * numRows) bytes are the tile types (wall, ladder,...)
   * 
   * @param {any} buffer
   * 
   */

	}, {
		key: 'setBuffer',
		value: function setBuffer(buffer) {
			var size = this.numCols * this.numRows;

			this.map = new Uint8Array(buffer, 0, size);
			this.tileTypes = new Uint8Array(buffer, size);
		}

		/**
   * Sets the master object, it will be used for:
   *  - scrolling the viewport when needed, centering it around the master sprite
   *  - collision detection
   * 
   * @param {GfxObject} obj The object to set as master.
   * 
   */

	}, {
		key: 'setMasterObject',
		value: function setMasterObject(obj) {
			this.masterObject = obj;

			// position master object at map's startX/Y
			// TODO: use checkpoint instead
			obj.x = this.startX;
			obj.y = this.startY;
		}

		/**
   * Add a new graphical object on to the map, it will be:
   *  - displayed if it is visible (in the viewport)
   *  - added to collision group
   * 
   * @param {GfxObject} obj A reference to the new object to add
   * 
   * @note the object will be added to the correct collision group
   * if obj.collideGroup is set
   * 
   */

	}, {
		key: 'addObject',
		value: function addObject(obj) {
			if (obj.image === null) {
				obj.setImage(__WEBPACK_IMPORTED_MODULE_2_Resource_ResourceManager__["a" /* default */].getResourceById(obj.imageSrc));
			}
			obj.setMap(this);

			this.objects.push(obj);

			if (obj.master === true) {
				this.setMasterObject(obj);
			}

			// add element to collision group
			if (obj.collideGroup === 1) {
				// console.log('adding', obj.id, 'to enemies group!');
				this.enemies.push(obj);
			} else if (obj.collideGroup === 2) {
				// console.log('adding', obj.id, 'to friend bullets group!');
				this.friendBullets.push(obj);
			} else if (obj.collideGroup === 3) {
				console.log('adding platform', obj.id);
				this.platforms.push(obj);
			} else {
				console.log('no collision or master for', obj.id);
			}
			/*				if (obj.children.length) {
   					for (var i = 0; i < obj.children.length; i++) {
   						this.addObject(obj.children[i]);
   					}
   				}*/
		}

		/**
   * Sets the map tile size (in pixels)
   * 
   * @param {number} width of a map tile.
   * @param {number} height of a map tile.
   * 
   */

	}, {
		key: 'setTilesSize',
		value: function setTilesSize(width, height) {
			this.tileWidth = width;
			this.tileHeight = height;
		}

		/**
   * changes current viewport size and position
   * 
   * @param {number} x Horizontal position of the viewport.
   * @param {number} y Vertical position of the viewport.
   * @param {number} w Width of the viewport.
   * @param {number} h Height of the viewport.
   * 
   * @note there is currently no boundaries checks
   * 
   */

	}, {
		key: 'setViewPort',
		value: function setViewPort(x, y, w, h) {
			this.viewportX = x;
			this.viewportY = y;
			this.viewportW = w;
			this.viewportH = h;
		}

		/**
   * Sets current debug status: when set to true outputs more console logs and may also debug visual stuff
   * like map tiles and objects onto the map
   * 
   * @param {boolean} isDebug Set to true to enable debug.
   * 
   */

	}, {
		key: 'debug',
		value: function debug(isDebug) {
			this.isDebug = isDebug;
			// force tiles redraw at for next map render
			this.isDirty = true;
		}

		/**
   * Move movable objects into the map
   * 
   */

	}, {
		key: 'moveObjects',
		value: function moveObjects() {
			this.objects.forEach(function (obj) {
				// moving platforms must be moved before any other object
				// so they are moved in Map.movePlatforms() first
				if (obj.collideGroup !== 3) {
					obj.move();

					// TODO: set platform() if object reached a platform
				}
			});
		}

		/**
   * Move platform objects onto the map: they must be moved before normal objects are moved 
   * so that movable objects move related to the platforms
   * 
   */

	}, {
		key: 'movePlatforms',
		value: function movePlatforms() {
			this.platforms.forEach(function (obj) {
				obj.move();
			});
		}

		/**
   * Handle moving map & its objects:
   *  - updates the viewport window if map.moving is set
   *  - checks for triggers (that could spawn new objects onto the map)
   *  - move platforms and objects
   * 
   */

	}, {
		key: 'move',
		value: function move() {
			var currentTime = new Date().getTime(),
			    ellapsedTime = currentTime - this.startMoveTime,
			    t = ellapsedTime / this.duration,
			    moveProgress = void 0;

			// TODO: handle end/begining of map reach
			if (this.moving === true) {
				if (ellapsedTime >= this.duration) {
					this.moving = false;
					this.viewportX = this.viewportTargetX;
					this.viewportY = this.viewportTargetY;
					// TODO: send endMove event ?
				} else {
					moveProgress = this.easing(t, ellapsedTime, 0, 1, this.duration);

					// console.log('moving', this.viewportX);

					this.viewportX = this.viewportStartX + moveProgress * this.viewportSpeedX | 0;
					this.viewportY = this.viewportStartY + moveProgress * this.viewportSpeedY | 0;
				}
				this.isDirty = true;
			} else if (this.masterObject) {
				// TODO: this has nothing to do in this method!
				this.checkMasterPosition();
				this.checkForTriggers();
			}

			// first move platforms
			this.movePlatforms();

			// then move normal objects
			this.moveObjects();
		}

		/**
   * 
   * Triggers map scrolling depending on the master's position (if needed)
   * 
   */

	}, {
		key: 'checkMasterPosition',
		value: function checkMasterPosition() {
			var destX = null,
			    destY = null;
			// TODO: adapt moveTo() ?
			// TODO: do not scroll left if we already see all of the map on the left
			if (this.masterObject && !this.moving) {
				// Scroll Type 1: continous
				// if (this.viewportX && ((this.masterObject.x + this.viewportX) < this.viewportLimitX)) {
				// 	destX = this.viewportX + (this.viewportLimitX - (this.masterObject.x + this.viewportX)); // this.viewportCenterX;
				// } else if (((-this.viewportX + this.viewportW) - this.masterObject.x) < this.viewportLimitX) {
				// 	destX = this.viewportX - (this.viewportLimitX - ((-this.viewportX + this.viewportW) - this.masterObject.x)); // this.viewportCenterX;
				// }

				// if (this.viewportY && ((this.masterObject.y + this.viewportY) < this.viewportLimitY)) {
				// 	destY = this.viewportY + this.viewportCenterY;
				// } else if (((-this.viewportY + this.viewportH) - this.masterObject.y) < this.viewportLimitY) {
				// 	destY = this.viewportY - this.viewportCenterY;
				// }

				// Scroll Type 2: direct
				if (this.viewportX && this.masterObject.x + this.viewportX <= this.viewportLimitX) {
					destX = this.viewportX + this.viewportCenterX;
				} else if (-this.viewportX + this.viewportW - this.masterObject.x <= this.viewportLimitX) {
					destX = this.viewportX - this.viewportCenterX;
				}

				if (this.viewportY && this.masterObject.y + this.viewportY <= this.viewportLimitY) {
					destY = this.viewportY + this.viewportCenterY;
				} else if (-this.viewportY + this.viewportH - this.masterObject.y <= this.viewportLimitY) {
					destY = this.viewportY - this.viewportCenterY;
				}

				if (destX !== null || destY !== null) {
					this.moveTo(destX !== null ? destX : this.viewportX, destY !== null ? destY : this.viewportY);
				}

				if (destX !== null || destY !== null) {
					this.moveTo(destX !== null ? destX : this.viewportX, destY !== null ? destY : this.viewportY);
				}
			}
		}

		/**
   * 
   * Checks for collisions
   * 
   */

	}, {
		key: 'checkCollisions',
		value: function checkCollisions() {
			if (this.masterObject && this.masterObject.canCollide) {
				this.checkMasterToEnemiesCollisions();
			}

			this.checkMasterBulletsToEnemiesCollisions();
		}

		/**
   * 
   * Check for map triggers and handle any found triggers, like enemies or bonus that can appear
   * when the player reaches certain positions
   * 
   */

	}, {
		key: 'checkForTriggers',
		value: function checkForTriggers() {
			var _this = this;

			var box = this.masterObject.getHitBox(),
			    triggers = this.getTriggersForBox(this.masterObject.x + box.x, this.masterObject.y + box.y, this.masterObject.x + box.x2, this.masterObject.y + box.y2);

			triggers.forEach(function (trigger) {
				trigger.triggered = !_this.mapEvent.handleEvent(trigger);
			});
		}

		/**
   * Sets a new destination for the viewport: this method doesn't not set it immediately
   * but sets a new target instead: if not already moving, new move will happen at each
   * render inside the map.move() method
   * 
   * @param {number} x The horizontal position to move the viewport at.
   * @param {number} y The vertical position to move the viewport at.
   * 
   * @note moveTo will do nothing in case the map already has a destination set
   */

	}, {
		key: 'moveTo',
		value: function moveTo(x, y) {
			// TODO: snap x/y to screen edge
			if (!this.moving) {
				console.log('moveTo from', this.viewportX, 'to', x);
				if (this.masterObject) {
					this.masterObject.savePosition();
				}

				this.viewportTargetX = x > 0 ? 0 : x;
				// TODO: snap y to edge of the screen
				this.viewportTargetY = y;
				this.startMoveTime = new Date().getTime();
				this.viewportSpeedX = x - this.viewportX | 0;
				this.viewportSpeedY = y - this.viewportY | 0;
				this.viewportStartX = this.viewportX;
				this.viewportStartY = this.viewportY;
				this.moving = true;
			}
		}

		/**
   * Sets new tiles image source
   * 
   * @param {Object} options
   * @param {String} options.src The new source.
   * 
   * @private
   * 
   */

	}, {
		key: 'setNewSrc',
		value: function setNewSrc(options) {
			this.src = options.src;
		}

		/**
   * Returns current source image url used to render map tiles
   * 
   * @returns {String} The current source image used to render the tiles.
   * 
   * @private
   */

	}, {
		key: 'getSrc',
		value: function getSrc() {
			return this.src;
		}

		/**
   * Checks if tile at position x,y is `TYPE.WALL` and returns true if it is a wall, false otherwise
   * 
   * @param {number} x The x position of the tile to check.
   * @param {number} y The y position of the tile to check.
   * @returns {boolean} Returns true if the tile is a wall, false otherwise.
   * 
   * @related {Tile}
   */

	}, {
		key: 'fallTest',
		value: function fallTest(x, y) {
			var pos = this.getTilePos(x, y);

			// return (!(this.tileTypes[pos.x + pos.y * this.numCols] & 1));
			return this.tileTypes[pos.x + pos.y * this.numCols] === __WEBPACK_IMPORTED_MODULE_0_Map_Tile__["a" /* default */].TYPE.WALL;
		}

		/**
   * 
   * Checks collisions between master bullets and enemies: call hitTest method on
   * any frend bullet object with the enemies object as parameter
   * 
   */

	}, {
		key: 'checkMasterBulletsToEnemiesCollisions',
		value: function checkMasterBulletsToEnemiesCollisions() {
			var i = 0,
			    j = 0,
			    bullet = null,
			    enemy = null,
			    maxBullets = this.friendBullets.length,
			    maxEnemies = this.enemies.length;

			for (i = 0; i < maxBullets; ++i) {
				for (j = 0; j < maxEnemies; ++j) {
					if (this.enemies[j] && this.enemies[j].canCollideFriendBullet) {
						this.friendBullets[i] && this.friendBullets[i].hitTest(this.enemies[j]);
					}
				}
			}
		}

		/**
   * Checks collisions between master object and enemies, calling hitTest on any enemie
   * that collides with the master
   * 
   * @returns {boolean} Returns true if the masterSprite was hit, false otherwise.
   * 
   */

	}, {
		key: 'checkMasterToEnemiesCollisions',
		value: function checkMasterToEnemiesCollisions() {
			var i = 0,
			    max = this.enemies.length,
			    found = false;

			// TODO: player should have some invicibility for a few frames once it has
			// hit an enemy
			while (i < max && !found) {
				found = this.enemies[i].hitTest(this.masterObject);
				i++;
			}

			return found;
		}

		/**
   * WIP: Check if user will reach a platform
   * 
   * @param {any} sprite
   * @param {any} vx
   * @param {any} vy
   * @returns {boolean} false (not fully implemented yet)
   * 
   * @private
   * 
   */

	}, {
		key: 'checkForPlatform',
		value: function checkForPlatform(object, vx, vy) {
			var box = object.getHitBox(),
			    x = box.x + sprite.x,
			    y = box.y + sprite.y;

			this.platforms.forEach(function (platform) {
				var platformBox = platform.getHitBox(),
				    platformX = platform.x + platformBox.x,
				    platformY = platform.y + platformBox.y;
			});

			return false;
		}

		/**
   * getTriggers for map window: `(x, y, x2, y2)`
   * 
   * @param {number} x The x coordonate of left top corner of the box to check for.
   * @param {numer} y The y coordonate of left top corner of the box to check for.
   * @param {numer} x2 The x coordonate of right bottom corner of the box to check for.
   * @param {number} y2 The y coordonate of right bottom corner of the box to check for.
   * 
   * @returns {Array} a list of trigger objects that have not already been triggered
   * 
   * @private
   */

	}, {
		key: 'getTriggersForBox',
		value: function getTriggersForBox(x, y, x2, y2) {
			var pos1 = this.getTilePos(x, y),
			    pos2 = this.getTilePos(x2, y),
			    pos3 = this.getTilePos(x, y2),

			/* pos4 = this.getTilePos(x2, y2), */
			max1 = pos2.x,
			    max2 = pos3.y,
			    i = void 0,
			    j = void 0,
			    triggers = [],
			    trigger = null;

			for (i = pos1.x; i <= max1; i++) {
				for (j = pos1.y; j <= max2; j++) {
					trigger = this.triggers[j * this.numCols + i];
					if (trigger && !trigger.triggered) {
						// remove it so it cannot be triggered again: what if we want to run the map again ?
						// this.triggers[j * this.numCols + i] = null;
						triggers.push(trigger);
					}
				}
			}

			return triggers;
		}

		/**
   * Calculates and sets the object's next x position using its current x, vx and
   * avoids tileTypes tiles (ie: walls, moving platforms)
   * 
   * @param {GfxObject} sprite The sprite to get next position of.
   * @param {number} tileTypes The tileType.
   * @returns {boolean} Returns true if the object hit the spcified tile, false otherwise
   * 
   */

	}, {
		key: 'setNextX',
		value: function setNextX(sprite, tileTypes) {
			// TODO: if player moves too fast, or tiles are too small,
			// we may miss some tiles and do not detect colisions
			// TODO: 2. handle type of movingPlatform: platformType: 0 | 1
			// TODO: 3. Iterate through list of movingPlatforms of platformType [1] too
			// if closer than (sprite.x + sprite.vx [ +hitBox.x2 ]) && < maxX
			// then maxX = movingPlatform.size - 1

			var left = sprite.vx > 0 ? false : true;

			var hitBox = sprite.getHitBox(),
			    spriteYMax = sprite.y + hitBox.y2,
			    startX = left ? sprite.x + hitBox.x - 1 : sprite.x + hitBox.x2 + 1,
			    startY = sprite.y + hitBox.y,
			    tilePos = this.getTilePos(startX, startY),
			    found = false,
			    minX = left ? startX : 0;
			//
			// console.log('begin test');
			// left: minX >= sprite.vx => minX 
			while (!found && (left && minX >= sprite.vx || !left && minX <= sprite.vx)) {
				for (var i = tilePos.y * this.tileHeight; i < spriteYMax; i += this.tileHeight, tilePos.y++) {
					// DISABLE WALL COLLISIONS
					// TODO: add a parameter to toggle collisions at runtime
					if (this.tileTypes[tilePos.y * this.numCols + tilePos.x] === tileTypes) {
						found = true;
						break;
					}
				}

				if (!found) {
					minX = left ? tilePos.x * this.tileWidth - startX : ++tilePos.x * this.tileWidth - startX;
				}
				startX = left ? tilePos.x * this.tileWidth - 1 : tilePos.x * this.tileWidth;

				tilePos = this.getTilePos(startX, startY);
			}
			// console.log('end test');

			if (left && sprite.vx >= minX || !left && sprite.vx < minX) {
				sprite.x += sprite.vx;
				return false;
			} else {
				console.log('**collision');
				sprite.x += minX;
				return true;
			}
		}

		/**
   * WIP: Calculates and sets the object's next y position using its current y, vy and
   * avoids tileTypes tiles (ie: walls, moving platforms)
   * 
   * @param {any} sprite
   * @param {any} tileTypes
   * @returns true if the object hit a tile, false otherwise
   * 
   */

	}, {
		key: 'setNextYTop',
		value: function setNextYTop(sprite, tileTypes) {
			var hitBox = sprite.getHitBox,
			    spriteXMax = sprite.x + hitBox.x2,
			    startX = sprite.x + hitBox.x,
			    startY = sprite.y + hitBox.x2 + 1,
			    tilePos = this.getTilePos(startX, startY),
			    found = false,
			    minY = 0;

			// while (!found && minY <= sprite.vy) {
			// 	for (let i = tilePos.x * this.tileWidth; i < spriteXMax; i += this.tileWidth) {
			// 		if (this.tileTypes[tilePos.y * this.numCols + tilePos.x] === tileTypes) {
			// 			found = true;
			// 			break;
			// 		}
			// 	}				
			// }

			sprite.y += sprite.vy;
		}

		// setNextXRight(sprite, tileTypes) {
		// 	let hitBox = sprite.getHitBox(),
		// 		spriteYMax = sprite.y + hitBox.y2,
		// 		startX = sprite.x + hitBox.x2 + 1,
		// 		startY = sprite.y + hitBox.y,
		// 		tilePos = this.getTilePos(startX, startY),
		// 		found = false,
		// 		minX = 0;

		// 		//
		// 		// console.log('begin test');
		// 		while (!found && minX <= sprite.vx) {
		// 			// check full sprite's height for a collision
		// 			for (let i = tilePos.y * this.tileHeight; i < spriteYMax; i += this.tileHeight, tilePos.y++) {
		// 				if (this.tileTypes[tilePos.y * this.numCols + tilePos.x] === tileTypes) {
		// 					found = true;
		// 					break;
		// 				}
		// 			}

		// 			// not found ? minX maybe next tile on the right then
		// 			if (!found) {
		// 				minX = (++tilePos.x * this.tileWidth) - startX;
		// 			}
		// 			startX = tilePos.x * this.tileWidth;

		// 			tilePos = this.getTilePos(startX, startY);
		// 		}
		// 		// console.log('end test');

		// 		if (sprite.vx < minX) {
		// 			sprite.x += sprite.vx;
		// 			return false;
		// 		} else {
		// 			sprite.x += minX;
		// 			return true;
		// 		}
		// 	}


		/**
   * Checks if an object is in front of a certain type of tileType,
   * optionnaly centering the object under the tile
   * 
   * Used when checking if the player can climb a ladder for example
   * 
   * spaceX/spaceY specify how to reduce the players hitbox
   * 
   * @param {GfxObject} sprite The sprite to check.
   * @param {number} tileType The tileType to check for.
   * @param {number} [spaceX=0] The x padding that is accepted: if horizontal position is +/- that spaceX, check will succeed.
   * @param {number} [spaceY=0] The y padding that is accepted: if vertical position is +/- that spaceX, check will succeed.
   * @param {boolean} [center=false] Set to true if you want to sprite to be centered on the tile.
   * 
   * @returns {boolean} True if the tile was found, false otherwise
   * 
   */

	}, {
		key: 'checkForTileType',
		value: function checkForTileType(sprite, tileType) {
			var spaceX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
			var spaceY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
			var center = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

			var currentHitBox = sprite.getHitBox(),
			    pos = this.hitObjectTest(currentHitBox.x + sprite.x + spaceX, currentHitBox.y + sprite.y + spaceY, currentHitBox.x2 + sprite.x - spaceX, currentHitBox.y2 + sprite.y - spaceY, tileType);

			if (pos) {
				// TODO: center if center === true
				if (center) {
					sprite.centerXOverTile(pos);
				}
				return true;
			} else {
				return false;
			}
		}

		/**
   * Tests if a rectangle collapses with certain types of tiles
   * Used when checking colligions between a sprite and walls for example
   * 
   * @param {number} x
   * @param {number} y
   * @param {number} x2
   * @param {number} y2
   * @param {number} types
   * @returns {boolean} True if colision detected
   * 
   */

	}, {
		key: 'hitObjectTest',
		value: function hitObjectTest(x, y, x2, y2, types) {
			var pos1 = this.getTilePos(x, y),
			    pos2 = this.getTilePos(x2, y),
			    pos3 = this.getTilePos(x, y2),
			    max1 = pos2.x,
			    max2 = pos3.y,
			    i = void 0,
			    j = void 0,
			    tileType = void 0;

			for (i = pos1.x; i <= max1; i++) {
				for (j = pos1.y; j <= max2; j++) {
					tileType = this.tileTypes[j * this.numCols + i];
					if (tileType === types) {
						return {
							x: i,
							y: j,
							tile: {
								x: i * this.tileWidth,
								y: j * this.tileHeight
							}
						};
					}
				}
			}

			return false;
		}

		/**
   * Draws tile at pixel position (x, y) onto the specified {Canvas} context
   * 
   * @note If offset is true it means scroll is in progress and
   * we are drawing the first col: in this case we have to draw
   * a partial tile and we do not use tileWidth/tileHeight
   * but this.scrollTileOffsetX instead
   * 
   * @param {number} tileNum The tile number to draw.
   * @param {CanvasContext} ctx The canvas rendering context to draw the tile into.
   * @param {number} x The horizontal position where to draw the tile.
   * @param {number} y The vertical position where to draw the tile.
   * @param {Boolean} useScrollOffset If set to true, the tile will be partially rendered
   * starting at scrollOffsetX. This happens if the tile is at the firstRow/firstCol of the viewport.
   * 
   * @note Unless noted otherwise, positions are related to the whole map, and not to the viewport.
   */

	}, {
		key: 'drawTile',
		value: function drawTile(tileNum, ctx, x, y, useScrollOffset) {
			var currentTile = this.tiles[tileNum];

			if (useScrollOffset) {
				ctx.drawImage(this.srcBitmap, currentTile.offsetX + this.scrollOffsetX, currentTile.offsetY + this.scrollOffsetY, this.scrollTileOffsetX, this.scrollTileOffsetY, x, y, this.scrollTileOffsetX, this.scrollTileOffsetY);
			} else {
				ctx.drawImage(this.srcBitmap, currentTile.offsetX, currentTile.offsetY, this.tileWidth, this.tileHeight, x, y, this.tileWidth, this.tileHeight);
			}
		}

		/**
   * Internal: calculates scrolling offsets for first cols in case a scrolling is in progress
   * 
   * @private
   */

	}, {
		key: '_getScrollOffset',
		value: function _getScrollOffset() {
			var viewportX = Math.abs(this.viewportX),
			    viewportY = Math.abs(this.viewportY);

			this.scrollOffsetX = viewportX < this.tileWidth ? viewportX : viewportX % this.tileWidth, this.scrollOffsetY = viewportY < this.tileHeight ? viewportY : viewportY % this.tileHeight;
			this.scrollTileOffsetX = this.tileWidth - this.scrollOffsetX;
			this.scrollTileOffsetY = this.tileHeight - this.scrollOffsetY;
		}

		/**
   * Draws the map, showing the whole map and not only the visible window if showHidden true
   * 
   * @param {CanvasContext} ctx The context of the canvas where to draw the map.
   * @param {boolean} showHidden The map only draws the viewport, set this to true to draw the whole map.
   * 
   * @private
   */

	}, {
		key: 'draw',
		value: function draw(ctx, showHidden) {
			var i = void 0,
			    j = void 0,
			    max = void 0,
			    max2 = void 0,
			    tileNum = 0,
			    x = 0,
			    y = 0;

			if (!this.srcBitmap) {
				// console.log('[Map] no bitmap, need to get the source');
				this.srcBitmap = __WEBPACK_IMPORTED_MODULE_2_Resource_ResourceManager__["a" /* default */].getResourceById(this.src);
			}

			// this.isDirty = true;

			i = j = max = max2 = 0;
			// 1. get first col/row of map
			if (this.isDirty || !this.lastCol) {
				this._getBoundariesTiles(showHidden);
			}

			if (this.isDirty || !this.lastCol) {
				this._getScrollOffset();

				for (i = this.firstRow, max = this.lastRow, y = 0; i < max; i++) {
					for (j = this.firstCol, max2 = this.lastCol, x = 0; j < max2; j++) {
						tileNum = this.map[i * this.numCols + j];

						if (tileNum < 255) {
							// no tile goes here
							// TODO: check that viewportY is not zero too ?
							this.drawTile(tileNum, ctx, x, y, this.viewportY && i === this.firstRow || this.viewportX && j === this.firstCol);
						}
						if (this.viewportX && j === this.firstCol) {
							x += this.scrollTileOffsetX;
						} else {
							x += this.tileWidth;
						}
					}
					if (this.viewPortY && i === this.firstRow) {
						y += this.scrollTileOffsetY;
					} else {
						y += this.tileHeight;
					}
				}

				/* This should be done in another canvas */
				if (this.isDebug === true) {
					this.showTileBehaviors(ctx, showHidden);
				}

				this.addNewObjectsFromWindow();

				this.isDirty = false;
			} else {
				// do not draw map otherwise
			}
		}

		/**
   * Adds new Objects onto the map if this is the first time we display this window.
   * 
   * Each map is divided into windows: each viewport window is the size of the current viewport
   * When drawing a window for the first time, objects found into this window are added to the map
   * It can be enemies, etc...
   * 
   * @private
   */

	}, {
		key: 'addNewObjectsFromWindow',
		value: function addNewObjectsFromWindow() {
			var _this2 = this;

			var windowNum = (Math.abs(this.viewportX) / this.viewportW | 0) + (Math.abs(this.viewportY) / this.viewportH | 0),
			    window = this.windows[windowNum];

			if (window.displayed === false) {
				window.displayed = true;
				window.items.forEach(function (item, i) {
					var obj = __WEBPACK_IMPORTED_MODULE_2_Resource_ResourceManager__["a" /* default */].newResourceFromPool(item.type, item.spriteOptions);
					_this2.addObject(obj);
					// add a reference to the sprite into mapEvent.items
					// this will be used to destroy sprite when puzzle is checked
					// for example
					if (item.itemId) {
						_this2.mapEvent.addItem(item.itemId, obj);
					}
				});
			}
		}

		/**
   * Draw all objects that are onto the map
   * 
   * @param {CanvasContext} ctx The context where to draw the objects.
   * 
   * @private
   */

	}, {
		key: 'drawObjects',
		value: function drawObjects(ctx) {
			var i = void 0,
			    max = this.objects.length,
			    objects = this.objects;

			// TODO: only draw visible objects (viewport) + active ones
			for (i = max - 1; i >= 0; i--) {
				// console.log('drawing', objects[i].id);
				objects[i].draw(ctx, this.isDebug);
			}
		}

		/**
   * Returns the tile at (x, y) pixels
   * 
   * @param {number} x The horizontal position in pixels.
   * @param {number} y The vertical position in pixels.
   * 
   * @note Position is related to the whole map, not the viewport.
   * 
   * @returns {Tile=undefined} The tile that is found at position x, y, undefined if tile `(x, y)` is out of bounds
   * 
   */

	}, {
		key: 'getTileAt',
		value: function getTileAt(x, y) {
			var i = void 0,
			    j = void 0,
			    tileNum = void 0;

			i = x / this.tileWidth | 0;
			j = y / this.tileHeight | 0;
			tileNum = this.map[this.numCols * j + i];

			return this.tiles[tileNum];
		}

		/**
   * Returns index of the tile at pos (x,y) in map array
   * 
   * @param {number} x
   * @param {number} y
   * @returns {Object} Object with i, j tile index
   * 
   */

	}, {
		key: 'getTilePos',
		value: function getTilePos(x, y) {
			var i = void 0,
			    j = void 0;

			i = x / this.tileWidth | 0;
			j = y / this.tileHeight | 0;

			return {
				x: i,
				y: j
			};
		}

		/**
   * 
   * INTERNAL: Calculates the number of tile rows & cols, and number of rows/cols
   * per viewport window
   * 
   * @private
   */

	}, {
		key: '_calcNumTiles',
		value: function _calcNumTiles() {
			this.numCols = this.width / this.tileWidth | 0;
			this.numRows = this.height / this.tileHeight | 0;

			this.numViewportCols = this.viewportW / this.tileWidth | 0;
			this.numViewportRows = this.viewportH / this.tileHeight | 0;
		}

		/**
   * Calculates first/last Row & Cool that is part of current display viewport
   * If showHidden is set to true we display the whole map so:
   * firstCol = firstRow = 0
   * lastCol/lastRow = lastCol/lastRow of the map
   * 
   * @param {Boolean=false} showHidden Set to true to get boundaries for the whole map.
   * 
   * @private
   */

	}, {
		key: '_getBoundariesTiles',
		value: function _getBoundariesTiles(showHidden) {
			// TODO: handle boundaries and reverse ?!!
			// offsetX is current x offset in pixel: we need to get the corresponding tile number
			if (showHidden) {
				this.firstCol = 0;
				this.firstRow = 0;

				this.lastCol = this.width / this.tileWidth | 0;
				// console.log(this.viewportW, '/', this.tileWidth);
				this.lastRow = this.height / this.tileHeight | 0;
			} else {
				this.firstCol = Math.floor(-this.viewportX / this.tileWidth);
				this.firstRow = Math.floor(-this.viewportY / this.tileHeight);

				this.lastCol = this.firstCol + this.numViewportCols;
				this.lastRow = this.firstRow + this.numViewportRows;

				if (this.viewportX % this.tileWidth) {
					this.lastCol++;
				}

				if (this.viewportY % this.tileHeight) {
					this.lastRow++;
				}
			}
		}

		/**
   * Send specified event to the NotificationManager
   * 
   * @param {String} eventType The type of event to send.
   * @param {Object} data The data to send with the notification.
   * 
   */

	}, {
		key: 'notify',
		value: function notify(eventType, data) {
			__WEBPACK_IMPORTED_MODULE_3_Notification_NotificationManager__["a" /* default */].notify(eventType, data);
		}

		/**
   * removeObject from the map
   * 
   * @param {GfxObject} gfxObject The object to remove from the map.
   * 
   * @note the object if automatically removed from collision lists
   * 
   */

	}, {
		key: 'removeObject',
		value: function removeObject(gfxObject) {
			var foundIndex = this.objects.indexOf(gfxObject);

			if (foundIndex > -1) {
				this.objects.splice(foundIndex, 1);
			}

			foundIndex = this.enemies.indexOf(gfxObject);

			if (foundIndex > -1) {
				this.enemies.splice(foundIndex, 1);
			} else if ((foundIndex = this.friendBullets.indexOf(gfxObject)) > -1) {
				this.friendBullets.splice(foundIndex, 1);
			}
		}

		/**
   * Schedule adding a new object to the map
   * 
   * @param {String} spriteId The id of the new sprite to add.
   * @param {Object} spriteOptions The options that will be passed to the object constructor.
   * @param {number=0} delay The delay in milliseconds to wait before adding the object.
   * @returns {GfxObject} the new object
   * 
   */

	}, {
		key: 'scheduleSprite',
		value: function scheduleSprite(spriteId, spriteOptions, delay) {
			var _this3 = this;

			var sprite = __WEBPACK_IMPORTED_MODULE_2_Resource_ResourceManager__["a" /* default */].newResourceFromPool(spriteId, spriteOptions);

			// No need to call setTimeout if delay is zero
			if (delay) {
				setTimeout(function () {
					_this3.addObject(sprite);
				}, delay);
			} else {
				this.addObject(sprite);
			}

			return sprite;
		}

		/**
   * Add a new wave of objects to the map
  * Used for example when the player triggers apparition of several enemies or bonuses
   * 
   * @param {Object} options The options to pass to the wav object
   * @returns
   * 
  * @related {Wave}
   */

	}, {
		key: 'handleWave',
		value: function handleWave(options) {
			// console.log('wave');
			var waveSize = options.size,
			    wave = new __WEBPACK_IMPORTED_MODULE_1_Object_Wave__["a" /* default */](options),
			    i = 0,
			    delay = 0;

			options.spriteOptions.wave = wave;

			for (i = 0; i < waveSize; i++) {
				this.scheduleSprite(options.spriteId, options.spriteOptions, delay);
				// setTimeout((function(options, map) { return function() {
				//     // var sprite = new (RM.getResourceById(options.spriteId))(options.spriteOptions);
				//     var sprite = RM.newResourceFromPool(options.spriteId, options.spriteOptions);
				//     map.addSprite(sprite);
				// };})(options, this.map), delay);
				delay += options.delay || 0;
			}

			return false;
		}

		/**
   * DEBUG: draw outline of each tile with a different color, depending
   * on the type of tile
   * 
   * @param {CanvasContext} ctx The canvas context to render outline on.
   * 
   */

	}, {
		key: 'showTileBehaviors',
		value: function showTileBehaviors(ctx) {
			var i = void 0,
			    j = void 0,
			    max = void 0,
			    max2 = void 0,
			    x = 0,
			    y = 0,
			    styles = [null, null, 'rgba(240,0,0,.6)', 'rgba(0,0,240,.6)'],
			    w = void 0,
			    h = void 0;

			i = j = max = max2 = 0;

			for (i = this.firstRow, max = this.lastRow, y = 0; i < max; i++) {
				for (j = this.firstCol, max2 = this.lastCol, x = 0; j < max2; j++) {
					w = this.viewportX && j === this.firstCol ? this.scrollTileOffsetX : this.tileWidth;
					h = this.viewPortY && i === this.firstRow ? this.scrollTileOffsetY : this.tileHeight;
					if (this.tileTypes[i * this.numCols + j] > 1) {
						// if (this.tileTypes[i * this.numCols + j] > 1) {
						// 	debugger;
						// }
						ctx.fillStyle = styles[this.tileTypes[i * this.numCols + j]];
						ctx.beginPath();
						ctx.moveTo(x, y);
						ctx.lineTo(x + w, y);
						ctx.lineTo(x + w, y + h);
						ctx.lineTo(x, y + h);
						ctx.lineTo(x, y);
						ctx.closePath();
						ctx.fill();
					}
					if (this.viewportX && j === this.firstCol) {
						x += this.scrollTileOffsetX;
					} else {
						x += this.tileWidth;
					}
				}
				if (this.viewPortY && i === this.firstRow) {
					y += this.scrollTileOffsetY;
				} else {
					y += this.tileHeight;
				}
			}
		}

		/**
   * 
   * DEBUG: displays the list of each object and its type/id onto the console
   * 
   * @private
   */

	}, {
		key: 'getObjectsList',
		value: function getObjectsList() {
			this.objects.forEach(function (obj, i) {
				console.log('[' + i + ']', obj.type, '(' + obj.id + ')');
			});
		}

		/**
   * WIP/DEBUG: converts current map into a string
   * 
   * @returns {String} The json export of the map
   * 
   * @private
   */

	}, {
		key: 'toString',
		value: function toString() {
			// exports the options needed to create current map
			// especially usefull when working on a new map with the MapEditor
			//
			var i = 0,
			    max = this.tiles.length,
			    tile = null,
			    obj = {
				src: this.src,
				viewportX: 0,
				viewportY: 0,
				viewportW: this.viewportW,
				viewportH: this.viewportH,
				width: this.width,
				height: this.height,
				tileWidth: this.tileWidth,
				tileHeight: this.tileHeight,
				map: this.map,
				bjects: this.objects,
				tiles: []
			};

			for (i = 0; i < max; i++) {
				tile = this.tiles[i];
				obj.tiles.push('new Tile({' + 'offsetX: tile.offsetX,' + 'offsetY: tile.offsetY,' + 'width: tile.width,' + 'height: tile.height,' + 'inertia: tile.inertia,' + 'upCollide: tile.upCollide,' + 'downCollide: tile.downCollide' + '}),');
			}

			return JSON.stringify(obj);
		}

		/**
   * DEPRECATED: Creates tiles from an array of tiles description
   * 
   * @param {any} tilesArray
   * @returns array of tile objects
   * 
   * @private
   */

	}, {
		key: '_createTiles',
		value: function _createTiles(tilesArray) {
			// TODO: replace with map()
			var tiles = [];

			tilesArray.forEach(function (tileDesc) {
				tiles.push(new __WEBPACK_IMPORTED_MODULE_0_Map_Tile__["a" /* default */](tileDesc));
			});

			return tiles;
		}

		/**
   * WIP & NOT TESTED: some code to allow resizing a map, was to be used in map editor
   * 
   * @param {string} direction Where to extend the map, can be 'bottomLeft', 'bottomRight', 'topLeft', 'topRight'
   * @param {Object} options
   * 
   * @private
   */

	}, {
		key: 'resize',
		value: function resize(direction, options) {
			/*
   	only increases size for now (decrease means we may loose some objects,...)
   	direction:
   	'topleft' == top -> bottom, left -> right (option = {newWidth, newHeight})
   	'topright' == top -> bottom, right -> left (option = {newWidth, newHeight})
   	'bottomleft' == bottom -> top, left -> right (option = {newWidth, newHeight})
   	'bottomright' == bottom -> top, right -> left (option = {newWidth, newHeight})
   	'center' == center -> each side (option = {newSize})
   */
			var buffer = null,
			    triggers = {},
			    itemBlocks = {},
			    map = null,
			    tileTypes = null,
			    item = null,
			    items = null;

			// TODO: should we allow changing viewpPort size as well ?
			/*				this.width = width;
   				this.height = height;
   				this.viewportW = vpWidth;
   				this.viewportH = vpHeight;
   				this.viewportX = 0;
   				this.viewportY = 0;*/

			if (direction === 'bottomleft') {
				var diffWidth = options.newWidth - this.width,
				    diffHeight = options.newHeight - this.height,
				    numCols = options.newWidth / this.tileWidth | 0,
				    numRows = options.newHeight / this.tileHeight | 0,
				    diffCols = numCols - this.numCols,
				    diffRows = numRows - this.numRows,
				    oldBlockX = this.width / this.viewportW | 0,
				    oldBlockY = this.height / this.viewportH | 0,
				    newBlockX = options.newWidth / this.viewportW | 0,
				    newBlockY = options.newHeight / this.viewportH | 0,
				    newBlocksX = newBlockX - oldBlockX,
				    newBlocksY = newBlockY - oldBlockY;

				// create new buffer for map tiles + behaviors
				buffer = new ArrayBuffer(numCols * numRows * 2), map = new Uint8Array(buffer, 0, numRows * numCols), tileTypes = new Uint8Array(buffer, numRows * numCols, numRows * numCols);

				// new buffer is automatically filled with zeros
				// so we only need to copy existing tiles/behaviors into the new
				// buffer at the correct position
				for (var y = diffRows; y < numRows; y++) {
					for (var x = 0; x < this.numCols; x++) {
						map[y * numCols + x] = this.map[y * numCols + x];
						tileTypes[y * numCols + x] = this.tileTypes[y * numCols + x];

						if (this.triggers[y * numCols + x]) {
							item = Object.assign({}, true, this.triggers[y * numCols + x]);
							if (item.spriteOptions) {
								item.spriteOptions.y += diffHeight;
							}
							triggers[y * numCols + x] = item;
						}
					}
				}

				this.setBuffer(buffer);
				this.width = options.newWidth;
				this.height = options.newHeight;

				this.triggers = triggers;

				this._calcNumTiles();

				// this was the easiest part, now we need to update triggers and mapblocks
				// if needed, we simply create new blocks, but do not modify blocks (we would
				// need to move each item depending on position, this is too much work)
				// simply add existing blocks, new ones are empty so should not be added
				for (var _y = newBlocksY; _y < newBlockY; ++_y) {
					for (var _x4 = 0; _x4 < oldBlockX; ++_x4) {
						if (this.windows[_y * oldBlockX + _x4]) {
							items = this.windows[_y * oldBlockX + _x4].items;

							for (var num = 0; num < items.length; ++num) {
								item = Object.assign({}, items[num]);
								// we consider x and y are always set
								if (item.spriteOptions) {
									item.spriteOptions.y += diffHeight;
								}
							}

							// TODO: since we're doing this.windows = mapItemBlocks we
							// should copy and not only get references of each element
							itemBlocks[_y * oldBlockX + _x4] = {
								displayed: false,
								items: items.slice(0)
							};
						}
					}
				}

				this.windows = itemBlocks;

				// that's all folks !
				// TODO: test me!
			} else {
				throw 'resize not support for direction' + direction;
			}
		}
	}]);

	return Map;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Map);

/***/ }),
/* 19 */
/* exports provided: default */
/* exports used: default */
/*!****************************!*\
  !*** ./js/Map/MapEvent.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*jshint devel: true*/
/**
 * MapEvent handles events that are triggered on the map.
 * Such events can be: checkpoint was reached, new wave needs to
 * be generated, etc...
 * 
 * For that, the MapEvent class stores a list of items, events, switches
 * that are on the map.
 * 
 * This is a default MapEvent class: games should extend MapEvent
 * to handle whatever events they need.
 * 
 * @param {Map} map The [`Map`](#Map) to use
 */
var MapEvent = function () {
    function MapEvent(map) {
        _classCallCheck(this, MapEvent);

        console.log('[MapEvent] init with map');
        this.map = map || null;
        this.reset();
    }

    /**
     * Resets the MapEvent switches, events and items
     */


    _createClass(MapEvent, [{
        key: 'reset',
        value: function reset() {
            this.switches = {};
            this.events = [];
            this.items = {};
        }

        /**
         * Adds a new [`GfxObject`]{#item} onto the map
         * 
         * @param {string} id of the item to add
         * @param {GfxObject} item to add
         */

    }, {
        key: 'addItem',
        value: function addItem(id, item) {
            this.items[id] = item;
        }

        /**
         * Returns an item
         * 
         * @param {string} id of the item to retrieve
         * 
         * @returns {Object|undefined} The item or undefined if it wasn't handled by the map
         */

    }, {
        key: 'getItem',
        value: function getItem(id) {
            return this.items[id];
        }

        // TODO: ability to trigger an event once a switch has been modified

    }, {
        key: 'setSwitch',
        value: function setSwitch(id, bool) {
            this.switches[id] = bool;
        }
    }, {
        key: 'toggleSwitch',
        value: function toggleSwitch(id) {
            this.setSwitch(id, typeof this.switches[id] !== 'undefined' ? !this.switches[id] : true);
        }
    }, {
        key: 'getSwitch',
        value: function getSwitch(id) {
            return this.switches[id] || false;
        }
    }, {
        key: 'checkConditions',
        value: function checkConditions(trigger) {
            var conditions = trigger.conditions,
                cond = null,
                i,
                success = true,
                max;

            if (!conditions) {
                return true;
            } else {
                // test that all conditions are valid
                for (i = 0, max = conditions.length; i < max; i++) {
                    cond = conditions[i];
                    switch (cond.type) {
                        case 'time':
                            // compare time
                            break;

                        case 'switch':
                            // get switch & status and compare
                            // console.log('getting switch', cond.id, '=>', cond.status);
                            success = this.getSwitch(cond.id) === cond.status;
                            break;
                    }

                    if (!success) {
                        break;
                    }
                }
                return success;
            }
        }
    }, {
        key: 'handleAction',
        value: function handleAction(options) {
            var sprite;

            // handle action
            switch (options.type) {
                case 'toggleSwitch':
                    sprite = options.sprite;
                    // toggle Sprite image
                    sprite.toggleSwitch();
                    // and set internal state for this sprite id
                    this.toggleSwitch(sprite.id);
                    break;

                default:
                    // super.handleAction(options);
                    console.log('[MapEvent] non-handled action type', options.type);
                    break;
            }
        }
    }, {
        key: 'handleEvent',
        value: function handleEvent(options) {
            var type = options.type,
                item = null;

            if (this.checkConditions(options)) {
                switch (type) {
                    case 'cp':
                        this.map.setStartXYFromMaster();
                        break;

                    case 'message':
                        this.map.notify('game:message', {
                            message: options.message
                        });
                        break;

                    case 'wave':
                        return this.map.handleWave(Object.assign({}, options));
                        break;

                    case 'explosion':
                        // generate explosion
                        this.map.scheduleSprite(options.spriteId, options.spriteOptions, 0);

                        item = this.getItem(options.targetId);

                        item.destroy();
                        break;

                    default:
                        // return super.handleEvent(options);
                        console.log('non-handled Event', options.type);
                        break;
                }
            } else {
                // we need to recheck a non triggered event
                return true;
            }
        }
    }, {
        key: 'triggerEvent',
        value: function triggerEvent(id) {
            this.events.push(id);
        }
    }, {
        key: 'isEventTriggered',
        value: function isEventTriggered(id) {
            return this.events.indexOf(id) > -1;
        }

        // handleEvent(options) {
        //     console.warn('[MapEvent] Unhandled event', options.type);
        //     return false;
        // }

        // handleAction(options) {

        // }

    }]);

    return MapEvent;
}();

/* harmony default export */ __webpack_exports__["a"] = (MapEvent);
;

/***/ }),
/* 20 */
/* exports provided: default */
/* exports used: default */
/*!*********************************!*\
  !*** ./js/Object/BitmapText.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Object__ = __webpack_require__(/*! Object/Object */ 5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/*jshint devel: true, bitwise: false*/
/*globals Class*/
/**
 * The BitmapText class allows to use a spritesheet as a font to draw text onto the screen
 * 
 * @param {String} type The type of the sprite.
 * @param {Object} options The options describing the BitmapText.
 * @param {String} options.imageSrc The path to the spritesheet file.
 * @param {Number} [options.offsetX=0] The optional horizontal offset at which to start getting bitmap characters inside the spritesheet.
 * @param {Number} [options.bmStartY=0] The optinal vertical offset at which to start getting bitmap characters.
 * @param {Number} charWidth the width of a character in pixels.
 * @param {Number} charHeight The height of a character in pixels.
 * 
 * @note the charset is limited to a subset of ascii right now: a-z 0-9
 * @example
 * 
 *	let myFont = new BitmapText('myFont', {
 *		offsetX: 34,
 *		bmStartY: 36,
 *		charWidth: 16,
 *		charHeight: 18,
 *		imageSrc: 'font'
 *	});
 */

var BitmapText = function (_GfxObject) {
	_inherits(BitmapText, _GfxObject);

	function BitmapText(type, options) {
		_classCallCheck(this, BitmapText);

		var _this = _possibleConstructorReturn(this, (BitmapText.__proto__ || Object.getPrototypeOf(BitmapText)).call(this, type, options));

		_this.imageSrc = options.imageSrc;

		// TODO: maybe we want to have fullsize ?
		_this.w = options.w || 320;
		_this.h = options.h || 18;

		_this.pixelHeight = 0;

		_this.maxLines = Math.floor(_this.h / (_this.charHeight + _this.lineSpacing));

		_this.easing = __WEBPACK_IMPORTED_MODULE_1_FX_FX__["a" /* default */].getEasing(options.easing || 'linear');

		_this.imageSrc = options.imageSrc || 'image not set';

		// TODO: buffer should be created here and not when object is added to the scene
		_this.buffer = null;

		_this.image = null;

		_this.scrolling = false;

		_this.text = options.text || 'BitmapText';

		/*			this.charCodes = this.getCharCodes(this.text);*/

		_this.scrollOffsetX = options.scrollOffsetX || 0;
		_this.scrollOffsetY = options.scrollOffsetY || 0;

		_this.textArray = [];

		_this.setFontParams(options);
		return _this;
	}

	/**
  * Generates a new buffer that can hold current text
  * 
  * @param {Display} display the display to get the buffer from
  */


	_createClass(BitmapText, [{
		key: 'createBuffer',
		value: function createBuffer(display) {
			// generate a buffer with enough height to hold every lines of text
			var width = this.w,
			    height = this.textArray.length * (this.charHeight + this.lineSpacing);

			this.buffer = display.getBuffer(width, height);
		}

		/**
   * Clears the buffer
   */

	}, {
		key: 'clearBuffer',
		value: function clearBuffer() {
			this.currentScene.display.clearScreen(this.buffer);
		}

		/**
   * Sets bitmapText properties using options
   * 
   * @param {Object} options
   */

	}, {
		key: 'setFontParams',
		value: function setFontParams(options) {
			this.lineSpacing = options.lineSpacing || 2;
			this.letterSpacing = options.letterSpacing || 2;

			this.charWidth = options.charWidth || 16; // 16
			this.charHeight = options.charHeight || 18; // 18
			this.maxCharPerLine = Math.floor(this.w / (this.charWidth + this.letterSpacing));
			this.maxPixels = this.maxCharPerLine * (this.charWidth + this.letterSpacing);

			this.offsetX = options.offsetX || 0; // 34
			this.offsetY = options.offsetY || 0; // 0
			this.bmStartX = options.bmStartX || 0; // 0
			this.bmStartY = options.bmStartY || 0; // 36
		}

		/**
   * Resets the bitmapFont to its default options
   */

	}, {
		key: 'reset',
		value: function reset() {
			_get(BitmapText.prototype.__proto__ || Object.getPrototypeOf(BitmapText.prototype), 'reset', this).call(this);
			this.setTextPosition();
		}
		/*		getCharCodes: function(str) {
  			var charCodes = [];
  
  			for (var i = 0; i < str.length; ++i) {
  				charCodes.push(str.charCodeAt(i));
  			}
  		},*/
		/**
   * Returns the lenght of a text line, in characters
   * 
   * @param {String} str The string to mesure.
   * @param {String} eof The character to use as end of line.
   * 
   * @returns {Number} The length of the string
   */

	}, {
		key: 'getNextLineLength',
		value: function getNextLineLength(str, eof) {
			var length = 0;

			while (length < str.length && str[length] !== eof) {
				length++;
			}

			return length;
		}

		/**
   * Calculates the position and size of each pixel lines to be rendered onto the screen
   */

	}, {
		key: 'getLines',
		value: function getLines() {
			var str = this.text,
			    line = '',
			    end = false,
			    i = 0,
			    j = 0,
			    size = 0;

			// reset textarray
			this.textArray.length = 0;

			while (!end) {
				str = str.replace(/^\n/, '');
				i = this.getNextLineLength(str, '\n');

				if (i) {
					line = str.substr(0, i);
					if (line.length <= this.maxCharPerLine) {
						// start with line length
						str = str.substr(i);
					} else {
						// we need to cut text
						line = str.substr(0, this.maxCharPerLine);
						// start with line length
						str = str.substr(this.maxCharPerLine);
					}

					// add new line
					this.textArray.push({
						text: line,
						x: this.align === 'center' ? Math.floor((this.maxPixels - line.length * (this.charWidth + this.letterSpacing)) / 2) : 0,
						y: j
					});

					j += this.charHeight + this.lineSpacing;
				} else {
					end = true;
				}
			}

			this.pixelHeight = this.textArray.length * (this.charHeight + this.lineSpacing);
		}

		/**
   * Scrolls text from the bottom to the top, firing an optional callback at the end
   * 
   * @param {Number} The duration of the scrolling in milliseconds.
   * @param {Function=undefined} An optional callback to fire when the scrolling is over.
   */

	}, {
		key: 'scrollFromBottom',
		value: function scrollFromBottom(duration, callback) {
			// set scrollPos to offscreen
			this.scrollOffsetY = this.h;

			this.scrollText({
				callback: callback,
				duration: duration,
				targetOffsetX: 0,
				targetOffsetY: this.h - this.pixelHeight
			});
		}

		/**
   * Scrolls text from the top, firing an optional callback at the end
   * 
   * @param {Number} The duration of the scrolling in milliseconds.
   * @param {Function=undefined} An optional callback to fire when the scrolling is over.
   */

	}, {
		key: 'scrollFromTop',
		value: function scrollFromTop(duration, callback) {
			// set scrollPos to offscreen
			this.scrollOffsetY = -this.pixelHeight;

			this.scrollText({
				callback: callback,
				duration: duration,
				targetOffsetX: 0,
				targetOffsetY: 0
			});
		}

		/**
   * Scrolls the current text block
   * 
   * @param {Object} options
   * @param {Number} options.targetOffsetX The horizontal destination of the scrolling.
   * @param {Number} options.targetOffsetY The vertical destination of the scrolling.
   * @param {Number} options.duration The duration of the scrolling, in milliseconds.
   * @param {Function} [options.callback=undefined] An optional callback function to call when the scrolling is done.
   * 
   * @note if a scrolling is already in progress, nothing happens
   * 
   * @private
   */

	}, {
		key: 'scrollText',
		value: function scrollText(options) {
			if (!this.scrolling) {
				console.log('starting scrolling');
				this.scrolling = true;

				this.callback = options.callback && options.callback.bind(this) || null;
				this.duration = options.duration || 10000;

				this.targetOffsetX = options.targetOffsetX;
				this.targetOffsetY = options.targetOffsetY;

				this.startX = this.scrollOffsetX;
				this.startY = this.scrollOffsetY;

				this.speedX = this.targetOffsetX - this.startX | 0;
				this.speedY = this.targetOffsetY - this.startY | 0;

				this.startMoveTime = new Date().getTime();
			}
		}

		/**
   * Does nothing
   * 
   * @private
   */

	}, {
		key: 'setTextPosition',
		value: function setTextPosition() {}
		// set back text position (resets scrolling)


		/**
   * Move() is called at each render loop and calculates the next position during a scrolling
   */

	}, {
		key: 'move',
		value: function move() {
			var currentTime = new Date().getTime(),
			    ellapsedTime = currentTime - this.startMoveTime,
			    t = ellapsedTime / this.duration,
			    moveProgress = void 0;

			if (this.scrolling === true) {
				if (ellapsedTime >= this.duration) {
					this.scrolling = false;
					this.scrollOffsetX = this.targetOffsetX;
					this.scrollOffsetY = this.targetOffsetY;
					if (this.callback) {
						this.callback();
					}
				} else {
					moveProgress = this.easing(t, ellapsedTime, 0, 1, this.duration);

					this.scrollOffsetX = this.startX + moveProgress * this.speedX | 0;
					this.scrollOffsetY = this.startY + moveProgress * this.speedY | 0;
				}
			}
		}

		/**
   * Returns the character horizontal offset in pixels inside the spritesheet
   * 
   * @param {String} char The character to get the position inside the spritesheet
   * 
   * @returns {Number} The horizontal offset in pixels of the character
   */

	}, {
		key: 'getCharOffset',
		value: function getCharOffset(char) {
			// The magic happens here!
			var code = char.toUpperCase().charCodeAt(0) - 65;

			return code * this.offsetX;
		}

		/**
   * Draws the specified line onto the screen
   * 
   * @param {Object} options
   * @param {Number} options.x The horizontal position of the line to draw
   * @param {Number} options.x The vertical position of the line to draw
   * @param {String} options.text The text to draw
   * 
   * @example
   * 
   * bitmapText.drawLine({
   * 	x: 0,
   *  y: 0,
   *  text: 'hi there'
   * })
   */

	}, {
		key: 'drawLine',
		value: function drawLine(options) {
			var x = options.x,
			    y = options.y,
			    i = 0,
			    offset = 0,
			    max = options.text.length;

			// draw each character
			for (i = 0; i < max; ++i) {
				if (options.text[i].charCodeAt(0) !== 32) {
					offset = this.getCharOffset(options.text[i]);
					this.buffer.drawImage(this.image, offset, this.bmStartY, this.charWidth, this.charHeight, x, y, this.charWidth, this.charHeight);
				}
				x += this.letterSpacing + this.charWidth;
			}
		}

		/**
  * Pre-renders text from this.textArray into the internal buffer
  * 
  */

	}, {
		key: 'renderText',
		value: function renderText() {
			var i = 0,
			    max = 0,
			    line = void 0;

			max = this.textArray.length;

			for (i = 0; i < max; ++i) {
				line = this.textArray[i];
				this.drawLine(line);
			}
		}

		/**
   * Changes the text of the sprite, calculates every line size, and renders it into
   * the internal buffer
   * 
   * @param {String} text The new text to use
   */

	}, {
		key: 'setText',
		value: function setText(text) {
			this.text = text;

			this.getLines();

			// generate wide-enough internal buffer to hold every lines of text
			if (!this.buffer) {
				this.createBuffer(this.currentScene.display);
			} else {
				this.clearBuffer();
			}

			this.renderText(this.text);
		}

		/**
   * Changes the image to use as spritesheet
   * 
   * @param {Image} image The new {image} to use as source.
   */

	}, {
		key: 'setImage',
		value: function setImage(image) {
			this.image = image;
		}

		/**
   * Sets the scene of the bitmap font
   * 
   * @param {Scene} scene The scene to use.
   */

	}, {
		key: 'setScene',
		value: function setScene(scene) {
			_get(BitmapText.prototype.__proto__ || Object.getPrototypeOf(BitmapText.prototype), 'setScene', this).call(this, scene);

			this.setText(this.text);
		}

		/**
   * Draws pre-rendered into destination buffer
   * 
   * @param {CanvasContext} destCtx The new cancas context where to draw the bitmap font.
   * @param {Boolean} debug Wether to draw debug stuff.
   * 
   * @note: once added onto the scene, this method is automatically called at each render loop.
   * 
   * @related {Scene}
   * 
   * @private
   */

	}, {
		key: 'draw',
		value: function draw(destCtx, debug) {
			var destY, copyHeight, copyStartY;

			if (!this.visible) {
				return;
			}

			if (this.scrollOffsetY >= 0) {
				destY = this.scrollOffsetY;
				copyHeight = this.h - destY;
				copyStartY = 0;
			} else {
				destY = 0;
				copyHeight = this.h; // auto clipped ?
				copyStartY = Math.abs(this.scrollOffsetY);
			}
			// if this.scrolling, need to first offset text into this.buffer

			if (this.isFxQueueEmpty()) {
				// draw
				// throw 'TODO: drawing of bitmapText';
				// TODO: should use scrollPos to update destination and simulate horizontal/vertical text scrolling
				destCtx.drawImage(this.buffer.canvas, 0, copyStartY, this.w, copyHeight, this.x + this.scrollOffsetX, this.y + destY, this.w, copyHeight);
				// destCtx.drawImage(this.image, Math.floor(this.x), Math.floor(this.y), Math.floorthis.(w), Math.floor(this.h), Math.floor(drawX + mapOffsetX), Math.floor(drawY + mapOffsetY), Math.floor(scaledW), Math.floor(scaledH));
			} else {
				this.executeFx(destCtx);
				throw 'TODO: drawing of bitmapText';
			}

			if (debug) {
				this.showObjectBox(destCtx);
			}
		}
	}]);

	return BitmapText;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Object__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (BitmapText);

/***/ }),
/* 21 */
/* exports provided: default */
/* exports used: default */
/*!***************************!*\
  !*** ./js/Object/Wave.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__ = __webpack_require__(/*! Resource/ResourceManager */ 6);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var Wave = function () {
	function Wave(options) {
		_classCallCheck(this, Wave);

		this.counter = options.size;
		this.type = options.afterDestroy;
		this.data = options.afterDestroyData;
	}

	_createClass(Wave, [{
		key: 'remove',
		value: function remove(element) {
			this.counter--;

			if (!this.counter) {
				this.destroy(element);
			}
		}
	}, {
		key: 'destroy',
		value: function destroy(element) {
			switch (this.type) {
				case 'reward':
					if (this.data) {
						var reward = new (__WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].getResourceById('SmallItem'))({
							x: element.x + 24, // bad: hardcoded !!
							y: element.y - 20,
							vy: -2,
							data: {
								itemType: this.data
							}
						});

						element.currentMap.addObject(reward);
					}
					break;

				default:
					throw 'reward not implemented', this.type;
					break;
			}
		}
	}]);

	return Wave;
}();

/* harmony default export */ __webpack_exports__["a"] = (Wave);
;

/***/ }),
/* 22 */
/* unknown exports provided */
/* exports used: default */
/*!*******************************************!*\
  !*** ./~/es6-promise/dist/es6-promise.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var require;/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   4.1.0
 */

(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = __webpack_require__(/*! vertx */ 45);
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
      GET_THEN_ERROR.error = null;
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));
//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 41), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 44)))

/***/ }),
/* 23 */
/* exports provided: Game, Pool, Scene, ResourceManager, Object, Sprite, Text, Wave, Menu, Hud, BitmapText, NotificationManager, Map, MapEvent, FX, Easing, InputManager, DisplayManager, Display, AudioManager, Binary, Dom */
/* all exports used */
/*!*****************************!*\
  !*** ./js/athena-module.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Core_Game__ = __webpack_require__(/*! Core/Game */ 24);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Game", function() { return __WEBPACK_IMPORTED_MODULE_0_Core_Game__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Core_Pool__ = __webpack_require__(/*! Core/Pool */ 14);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Pool", function() { return __WEBPACK_IMPORTED_MODULE_1_Core_Pool__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Scene_Scene__ = __webpack_require__(/*! Scene/Scene */ 38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Scene", function() { return __WEBPACK_IMPORTED_MODULE_2_Scene_Scene__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Resource_ResourceManager__ = __webpack_require__(/*! Resource/ResourceManager */ 6);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceManager", function() { return __WEBPACK_IMPORTED_MODULE_3_Resource_ResourceManager__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Object_Object__ = __webpack_require__(/*! Object/Object */ 5);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Object", function() { return __WEBPACK_IMPORTED_MODULE_4_Object_Object__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Object_Sprite__ = __webpack_require__(/*! Object/Sprite */ 12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return __WEBPACK_IMPORTED_MODULE_5_Object_Sprite__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_Object_Text__ = __webpack_require__(/*! Object/Text */ 13);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Text", function() { return __WEBPACK_IMPORTED_MODULE_6_Object_Text__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_Object_Wave__ = __webpack_require__(/*! Object/Wave */ 21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Wave", function() { return __WEBPACK_IMPORTED_MODULE_7_Object_Wave__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_Object_Menu__ = __webpack_require__(/*! Object/Menu */ 37);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Menu", function() { return __WEBPACK_IMPORTED_MODULE_8_Object_Menu__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_Object_Hud__ = __webpack_require__(/*! Object/Hud */ 36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Hud", function() { return __WEBPACK_IMPORTED_MODULE_9_Object_Hud__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_Object_BitmapText__ = __webpack_require__(/*! Object/BitmapText */ 20);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BitmapText", function() { return __WEBPACK_IMPORTED_MODULE_10_Object_BitmapText__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_Notification_NotificationManager__ = __webpack_require__(/*! Notification/NotificationManager */ 10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationManager", function() { return __WEBPACK_IMPORTED_MODULE_11_Notification_NotificationManager__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_Map_Map__ = __webpack_require__(/*! Map/Map */ 18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Map", function() { return __WEBPACK_IMPORTED_MODULE_12_Map_Map__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_Map_MapEvent__ = __webpack_require__(/*! Map/MapEvent */ 19);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MapEvent", function() { return __WEBPACK_IMPORTED_MODULE_13_Map_MapEvent__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_FX_FX__ = __webpack_require__(/*! FX/FX */ 1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FX", function() { return __WEBPACK_IMPORTED_MODULE_14_FX_FX__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_FX_Easing_Easing__ = __webpack_require__(/*! FX/Easing/Easing */ 17);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Easing", function() { return __WEBPACK_IMPORTED_MODULE_15_FX_Easing_Easing__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_Input_InputManager__ = __webpack_require__(/*! Input/InputManager */ 9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InputManager", function() { return __WEBPACK_IMPORTED_MODULE_16_Input_InputManager__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_Display_DisplayManager__ = __webpack_require__(/*! Display/DisplayManager */ 16);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayManager", function() { return __WEBPACK_IMPORTED_MODULE_17_Display_DisplayManager__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_Display_Display__ = __webpack_require__(/*! Display/Display */ 15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Display", function() { return __WEBPACK_IMPORTED_MODULE_18_Display_Display__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_Audio_AudioManager__ = __webpack_require__(/*! Audio/AudioManager */ 4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AudioManager", function() { return __WEBPACK_IMPORTED_MODULE_19_Audio_AudioManager__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_Binary_Binary__ = __webpack_require__(/*! Binary/Binary */ 11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Binary", function() { return __WEBPACK_IMPORTED_MODULE_20_Binary_Binary__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_Core_Dom__ = __webpack_require__(/*! Core/Dom */ 7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Dom", function() { return __WEBPACK_IMPORTED_MODULE_21_Core_Dom__["a"]; });


































/***/ }),
/* 24 */
/* exports provided: default */
/* exports used: default */
/*!*************************!*\
  !*** ./js/Core/Game.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__ = __webpack_require__(/*! Resource/ResourceManager */ 6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Binary_Binary__ = __webpack_require__(/*! Binary/Binary */ 11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Display_DisplayManager__ = __webpack_require__(/*! Display/DisplayManager */ 16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Audio_AudioManager__ = __webpack_require__(/*! Audio/AudioManager */ 4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Notification_NotificationManager__ = __webpack_require__(/*! Notification/NotificationManager */ 10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Input_InputManager__ = __webpack_require__(/*! Input/InputManager */ 9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_fpscounter__ = __webpack_require__(/*! fpscounter */ 40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_fpscounter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_fpscounter__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_Core_Dom__ = __webpack_require__(/*! Core/Dom */ 7);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*jshint devel: true, bitwise: false*/









/**
 * The `Game` class is the central part to AthenaJS
 * 
 * @param {Object} options
 * @param {boolean} [options.debug=false] Debug will be enabled if this is true.
 * @param {string} [options.name] The name of the game.
 * @param {string|HTMLElement} [options.target="new Dom('div')"] target The DOM target of the game: this is where the game canvas elements will be added.
 * By default the target is a new Div that is appened to the body element.
 * @param {boolean} [options.showFps=false] A little fps counter will be displayed if this is true.
 * @param {number} [options.width=1024] The width of the game display.
 * @param {number} [options.height=768] The height of the game display.
 * @param {Object} [options.resources] An optionnal array of resources of the form:``{ id: 'unique id', type: 'image|script|map|audio', src: 'path_to_resource'}`` that the scene needs.
 * 
 */

var Game = function () {
    function Game() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Game);

        console.log('[Game] Init()' /*, options*/);

        this.debug = options.debug;
        this.name = options.name;

        var target = options.target && new __WEBPACK_IMPORTED_MODULE_7_Core_Dom__["a" /* default */](options.target);

        // DOM element to use for the game (it will be cleared)
        this.target = target.length && target[0] || new __WEBPACK_IMPORTED_MODULE_7_Core_Dom__["a" /* default */]('div').appendTo('body')[0];

        // weather to display FPS
        this.showFps = typeof options.showFps !== 'undefined' ? options.showFps : false;

        if (this.showFps) {
            __WEBPACK_IMPORTED_MODULE_6_fpscounter___default()({
                width: 50,
                height: 50
            });
        }

        this.width = options.width || 1024;
        this.height = options.height || 768;

        this.resources = options.resources;

        // current display
        this.display = null;

        // current scene
        this.scene = null;

        this.running = false;

        // get ready for input events
        this._initEvents();

        // creates the main display
        this.createDisplay({
            name: 'main',
            width: options.width,
            height: options.height,
            numLayers: options.numLayers || 2
        }, options.target);

        this.toggleSound(typeof options.sound !== 'undefined' ? options.sound : true);

        if (!!options.sound === false) {
            console.warn('sound disabled: skipping audio resources');
            __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].skipResources.push('audio');
        }

        // eventLoop timeout
        this.timeout = null;

        // rendering loop
        this.animFrame = null;

        // listen for all events
        this.bindEvents('*');
    }

    /**
     * Get ready for events from NotificationManager
     * 
     * @param {String} eventList space-separated list of events to listen to
     * 
     */


    _createClass(Game, [{
        key: 'bindEvents',
        value: function bindEvents(eventList) {
            __WEBPACK_IMPORTED_MODULE_4_Notification_NotificationManager__["a" /* default */].listen(eventList, this.onEvent.bind(this));
        }

        /**
         * Method that gets called when receiving an event: by default it does nothing
         * It's up to the developer to overwrite this method on its Game
         * 
         * @param {string} event the event name that got fired.
         * 
         */

    }, {
        key: 'onEvent',
        value: function onEvent(event) {}

        /**
         * Toggles global sound
         * 
         * @param {boolean} bool Weather to enable or disable sound.
         * 
         */

    }, {
        key: 'toggleSound',
        value: function toggleSound(bool) {
            this.sound = bool;
            __WEBPACK_IMPORTED_MODULE_3_Audio_AudioManager__["a" /* default */].toggleSound(bool);
        }

        /**
         * Load resources associated with the game
         * TODO: DESCRIBE
         * 
         * @param {array} res An array of resources to load.
         * @param {function} [progressCb=undefined] A progress callback function that gets called after each resource has been loaded
         * @returns {Deferred} `this.readyDef`
         * @obsolete
         * 
         */
        // loadResources(res, progressCb/*, doneCb, failCb*/) {
        //     console.log('[Game] loading Resources...');
        //     this.readyDef = ResourceManager.addResources(res);

        //     // this.readyDef.done(this.cacheImages.bind(this));

        //     ResourceManager.loadResources('any', progressCb);

        //     return this.readyDef;
        // }


        /**
         * Creates a new display
         * 
         * TODO: DESCRIBE
         * @param {Object}
         * @param {String|HTMLElement} The target of the display: this is were canvas elements will be added
         * @private
         * 
         */

    }, {
        key: 'createDisplay',
        value: function createDisplay(options, target) {
            this.display = __WEBPACK_IMPORTED_MODULE_2_Display_DisplayManager__["a" /* default */].addDisplay(options, target);
        }

        /**
         * INTERNAL: initialize input events
         * @private
         */

    }, {
        key: '_initEvents',
        value: function _initEvents() {
            __WEBPACK_IMPORTED_MODULE_5_Input_InputManager__["a" /* default */]._init(this, {
                joystick: true
            });
        }

        /**
         * Calls when game is ready: DESCRIBE
         * 
         * @param {any} cb 
         * 
         */

    }, {
        key: 'onReady',
        value: function onReady(cb) {
            cb.apply(this);
        }

        /**
         * Sets a new scene as the current scene, autostarting it optionnaly
         * 
         * @param {Scene} scene instance to set as current Scene
         * @param {Boolean} autoStart should the scene autostart
         * 
         */

    }, {
        key: 'setScene',
        value: function setScene(scene, autoStart) {
            if (this.scene) {
                console.log('need to stop scene');
                this.stopScene();
                this.scene.stop();
            }

            this.scene = scene;

            this.scene.setDisplay(this.display);

            this.display.clearDisplay();

            if (autoStart !== false) {
                this.startScene();
            }
        }

        /**
         * This is the render scene loop that's get called at up to 60 times per second
         * 
         * @param {any} time since last frame was rendered
         * 
         * @private
         */

    }, {
        key: '_renderSceneLoop',
        value: function _renderSceneLoop(time) {
            var scene = this.scene;

            if (this.debug !== true && this.running) {
                // if we are playing events, set on each frame
                // TODO: maybe we could throttle it for 1/2 frame
                if (__WEBPACK_IMPORTED_MODULE_5_Input_InputManager__["a" /* default */].playingEvents) {
                    __WEBPACK_IMPORTED_MODULE_5_Input_InputManager__["a" /* default */].nextRecordedEvents();
                }

                this.animFrame = window.requestAnimationFrame(this._renderSceneLoop.bind(this));

                this.display.renderScene(scene);

                // TODO: hudScene drawing is hardcoded into display
                // this should be moved back here
                if (scene.hudScene) {}
                // use another display (canvas) for the hud: we could use the same one
                // this.display.renderSecondary(scene.hudScene);
                //
                // this.display.renderScene(scene.hudScene);


                // if we are recording events, we do it on each frame
                // TODO: maybe we could only record once key has been received ?
                if (__WEBPACK_IMPORTED_MODULE_5_Input_InputManager__["a" /* default */].recording) {
                    __WEBPACK_IMPORTED_MODULE_5_Input_InputManager__["a" /* default */].recordEvents();
                }
            }
        }

        /**
         * Main event loop: handles scene based-events
         * 
         * @private
         */

    }, {
        key: '_runSceneLoop',
        value: function _runSceneLoop() {
            var scene = this.scene;

            if (!this.running) {
                this.running = true;
            }

            scene.run();

            if (this.debug !== true && this.running) {
                this.timeout = setTimeout(this._runSceneLoop.bind(this), 16);
            }
        }

        /**
         * Pauses the game: both loops are stopped so almost no cpu/gpu is used when calling it
         * 
         */

    }, {
        key: 'togglePauseGame',
        value: function togglePauseGame() {
            if (this.running) {
                console.log('pausing game');
                this.running = false;
                this.scene.pause();

                // be sure to render any changes from the scene before stopping refresh
                this.display.renderScene(this.scene);

                // then stop render/event loop
                this.stopScene();
            } else {
                console.log('un-pausing game');
                this.running = true;
                this.scene.unpause();
                this._runSceneLoop();
                this._renderSceneLoop();
            }
        }

        /**
         * Starts the current scene
         * 
         * - loads the scene if not already loaded
         * - once it's loaded calls scene.start() and start both event & render loops
         * 
         */

    }, {
        key: 'startScene',
        value: function startScene() {
            console.log('[Game] startScene');
            var that = this;

            if (this.scene) {
                console.log('[Game] loading scene');
                this.scene.load().then(function () {
                    console.log('[Game] Scene', that.scene.name, 'loaded: starting run & render loops');
                    setTimeout(function () {
                        that.scene.start();
                        that._runSceneLoop();
                        that._renderSceneLoop();
                    }, 0);
                });
            } else {
                console.log('[Game] nothing to start: no scene selected!!');
            }
        }

        /**
         * Stops current scene from running: this will both halt render & event loops
         * 
         * Use Game.togglePauseGame() to temporarly pause a game
         * 
         */

    }, {
        key: 'stopScene',
        value: function stopScene() {
            this.running = false;

            console.log('[Game] Scene stopped, stopping run & render loops');

            if (this.animFrame) {
                window.cancelAnimationFrame(this.animFrame);
                this.animFrame = null;
            }
            if (this.timeout) {
                clearTimeout(this.timeout);
                this.timeout = null;
            }
        }
    }]);

    return Game;
}();

/* harmony default export */ __webpack_exports__["a"] = (Game);

/***/ }),
/* 25 */
/* exports provided: default */
/* exports used: default */
/*!********************************!*\
  !*** ./js/FX/Effect/Custom.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__ = __webpack_require__(/*! FX/Effect/Effect */ 8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/

var Custom = function (_Effect) {
    _inherits(Custom, _Effect);

    function Custom(options, display) {
        _classCallCheck(this, Custom);

        var _this = _possibleConstructorReturn(this, (Custom.__proto__ || Object.getPrototypeOf(Custom)).call(this, options, display));

        _this.callback = options.callback;

        _this.diff = _this.endValue - _this.startValue;
        return _this;
    }
    /*        start: function() {
                this.currentAngle = this.startAngle;
    
                // start timer and get deferred
                return this._super();
            },*/


    _createClass(Custom, [{
        key: 'process',
        value: function process(ctx, fxCtx, obj) {
            _get(Custom.prototype.__proto__ || Object.getPrototypeOf(Custom.prototype), 'process', this).call(this);

            this.callback(this.startValue + this.animProgress * this.diff);

            return this.ended;
        }
    }]);

    return Custom;
}(__WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Custom);

/***/ }),
/* 26 */
/* exports provided: default */
/* exports used: default */
/*!******************************!*\
  !*** ./js/FX/Effect/Fade.js ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__ = __webpack_require__(/*! FX/Effect/Effect */ 8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/

var Fade = function (_Effect) {
    _inherits(Fade, _Effect);

    function Fade(options, display) {
        _classCallCheck(this, Fade);

        var _this = _possibleConstructorReturn(this, (Fade.__proto__ || Object.getPrototypeOf(Fade)).call(this, Object.assign({
            startValue: 0,
            endValue: 1
        }, options), display));

        _this.startOpacity = _this.startValue !== undefined ? options.startValue : 0;
        _this.endOpacity = _this.endValue !== undefined ? options.endValue : 1;

        _this.diff = _this.endValue - _this.startValue;
        return _this;
    }

    _createClass(Fade, [{
        key: 'start',
        value: function start() {
            this.currentOpacity = 1;

            // start timer and get deferred
            return _get(Fade.prototype.__proto__ || Object.getPrototypeOf(Fade.prototype), 'start', this).call(this);
        }
    }, {
        key: 'process',
        value: function process(ctx, fxCtx, obj) {
            _get(Fade.prototype.__proto__ || Object.getPrototypeOf(Fade.prototype), 'process', this).call(this);

            this.currentOpacity = this.startValue + this.animProgress * this.diff;

            obj.setOpacity(this.currentOpacity);

            return this.ended;
        }
    }]);

    return Fade;
}(__WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Fade);

/***/ }),
/* 27 */
/* exports provided: default */
/* exports used: default */
/*!********************************!*\
  !*** ./js/FX/Effect/Mosaic.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__ = __webpack_require__(/*! FX/Effect/Effect */ 8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/

var Mosaic = function (_Effect) {
    _inherits(Mosaic, _Effect);

    function Mosaic(options, display) {
        _classCallCheck(this, Mosaic);

        // TODO: use displayManager to get a buffer
        var _this = _possibleConstructorReturn(this, (Mosaic.__proto__ || Object.getPrototypeOf(Mosaic)).call(this, Object.assign({
            startValue: 0.002,
            endValue: 1
        }, options), display));

        _this.buffer = display.getBuffer(_this.width, _this.height);

        _this.startWidth = null;

        // get ratio of the picture since we want to keep it during animation
        _this.ratio = _this.width / _this.height;
        _this.diff = _this.endValue * _this.width - _this.startValue * _this.width;

        console.log('got ratio=', _this.ratio, 'for', _this.width, _this.height, 'diff', _this.diff);
        return _this;
    }

    _createClass(Mosaic, [{
        key: 'start',
        value: function start() {
            this.startWidth = this.startValue * this.width;
            console.log('***', this.startWidth);

            return _get(Mosaic.prototype.__proto__ || Object.getPrototypeOf(Mosaic.prototype), 'start', this).call(this);
        }
    }, {
        key: 'process',
        value: function process(ctx, fxCtx) {
            _get(Mosaic.prototype.__proto__ || Object.getPrototypeOf(Mosaic.prototype), 'process', this).call(this);

            var newWidth = this.startWidth + this.animProgress * this.diff,
                newHeight = newWidth / this.ratio;

            // first draw image onto canvas
            this.buffer.drawImage(ctx.canvas, 0, 0, newWidth | 0, newHeight | 0);
            ctx.drawImage(this.buffer.canvas, 0, 0, newWidth | 0, newHeight | 0, 0, 0, this.width, this.height);

            return this.ended;
        }
    }]);

    return Mosaic;
}(__WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Mosaic);

/***/ }),
/* 28 */
/* exports provided: default */
/* exports used: default */
/*!********************************!*\
  !*** ./js/FX/Effect/Rotate.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__ = __webpack_require__(/*! FX/Effect/Effect */ 8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/

var Rotate = function (_Effect) {
    _inherits(Rotate, _Effect);

    function Rotate(options, display) {
        _classCallCheck(this, Rotate);

        var _this = _possibleConstructorReturn(this, (Rotate.__proto__ || Object.getPrototypeOf(Rotate)).call(this, Object.assign({
            startValue: 0,
            endValue: 2 * Math.PI,
            loop: true
        }, options), display));

        _this.startAngle = _this.startAngle !== undefined ? options.startValue : 0;
        _this.endAngle = _this.endAngle !== undefined ? options.endValue : 1;

        _this.diff = _this.endValue - _this.startValue;
        return _this;
    }

    _createClass(Rotate, [{
        key: 'start',
        value: function start() {
            this.currentAngle = this.startAngle;

            // start timer and get deferred
            return _get(Rotate.prototype.__proto__ || Object.getPrototypeOf(Rotate.prototype), 'start', this).call(this);
        }
    }, {
        key: 'process',
        value: function process(ctx, fxCtx, obj) {
            _get(Rotate.prototype.__proto__ || Object.getPrototypeOf(Rotate.prototype), 'process', this).call(this);

            this.currentAngle = this.startValue + this.animProgress * this.diff;

            obj.setAngle(this.currentAngle);

            return this.ended;
        }
    }]);

    return Rotate;
}(__WEBPACK_IMPORTED_MODULE_0_FX_Effect_Effect__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Rotate);

/***/ }),
/* 29 */
/* exports provided: default */
/* exports used: default */
/*!*****************************************!*\
  !*** ./js/Object/Behavior/Behaviors.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_GroundMove__ = __webpack_require__(/*! Object/Behavior/GroundMove */ 30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Object_Behavior_SimpleFall__ = __webpack_require__(/*! Object/Behavior/SimpleFall */ 34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Object_Behavior_PlayerMove__ = __webpack_require__(/*! Object/Behavior/PlayerMove */ 33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Object_Behavior_InOut__ = __webpack_require__(/*! Object/Behavior/InOut */ 31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Object_Behavior_Path__ = __webpack_require__(/*! Object/Behavior/Path */ 32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Object_Behavior_WeaponMove__ = __webpack_require__(/*! Object/Behavior/WeaponMove */ 35);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








/*jshint devel: true, bitwise: false*/
var behaviors = {};

var Behaviors = function () {
    function Behaviors() {
        _classCallCheck(this, Behaviors);
    }

    _createClass(Behaviors, [{
        key: 'addBehavior',
        value: function addBehavior(behaviorName, moveFn) {
            behaviors[behaviorName] = moveFn;
        }
    }, {
        key: 'getBehavior',
        value: function getBehavior(behaviorName) {
            return behaviors[behaviorName];
        }
    }]);

    return Behaviors;
}();

;

var inst = new Behaviors();

inst.addBehavior('ground', __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_GroundMove__["a" /* default */]);
inst.addBehavior('inout', __WEBPACK_IMPORTED_MODULE_3_Object_Behavior_InOut__["a" /* default */]);
inst.addBehavior('simplefall', __WEBPACK_IMPORTED_MODULE_1_Object_Behavior_SimpleFall__["a" /* default */]);
inst.addBehavior('weapon', __WEBPACK_IMPORTED_MODULE_5_Object_Behavior_WeaponMove__["a" /* default */]);
inst.addBehavior('player', __WEBPACK_IMPORTED_MODULE_2_Object_Behavior_PlayerMove__["a" /* default */]);
inst.addBehavior('path', __WEBPACK_IMPORTED_MODULE_4_Object_Behavior_Path__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (inst);

/***/ }),
/* 30 */
/* exports provided: default */
/* exports used: default */
/*!******************************************!*\
  !*** ./js/Object/Behavior/GroundMove.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/*jshint devel: true, bitwise: false*/
// by default
/**
 * GroundMove is a simple behavior that causes an object to move along the horizontal
 * axis until a wall or an hole is reached.
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager.
 * @param {Object} options General behavior & GroundMove specific options
 * @param {String} [options.direction="right"] The initial direction of the move, default = `right`.
 * 
 * @see {Behavior}
 */

var GroundMove = function (_Behavior) {
    _inherits(GroundMove, _Behavior);

    function GroundMove(sprite, Input, options) {
        _classCallCheck(this, GroundMove);

        var _this = _possibleConstructorReturn(this, (GroundMove.__proto__ || Object.getPrototypeOf(GroundMove)).call(this, sprite, Input, options));

        _this.direction = options.direction || 'right';

        if (_this.direction.match('left')) {
            _this.sprite.vx = -_this.sprite.vx;
        }

        if (_this.direction.match('top')) {
            _this.sprite.vy = -_this.sprite.vy;
        }
        return _this;
    }

    /**
     * Simple onMove handler that checks for a wall or hole
     * 
     */


    _createClass(GroundMove, [{
        key: 'onMove',
        value: function onMove(t) {
            var sprite = this.sprite,
                map = sprite.currentMap,
                nextX = sprite.x + sprite.vx,
                nextY = sprite.y + sprite.vy,
                hitBox = sprite.getHitBox(),
                startX = sprite.vx > 0 ? hitBox.x2 : hitBox.x;

            if (map.hitObjectTest(nextX + startX, nextY + hitBox.y, nextX + startX, nextY + hitBox.y, __WEBPACK_IMPORTED_MODULE_1_Map_Tile__["a" /* default */].TYPE.WALL)) {
                sprite.vx = -sprite.vx;
                if (this.onVXChange) {
                    this.onVXChange(sprite.vx);
                }
            } else if (map.hitObjectTest(nextX + hitBox.x, nextY + hitBox.y2 + 2, nextX + hitBox.x2, nextY + hitBox.y2 + 2, __WEBPACK_IMPORTED_MODULE_1_Map_Tile__["a" /* default */].TYPE.AIR)) {
                sprite.vx = -sprite.vx;
                if (this.onVXChange) {
                    this.onVXChange(sprite.vx);
                }
            } else if (map.hitObjectTest(nextX + hitBox.x, nextY + hitBox.y2 + 2, nextX + hitBox.x2, nextY + hitBox.y2 + 2, __WEBPACK_IMPORTED_MODULE_1_Map_Tile__["a" /* default */].TYPE.LADDER)) {
                sprite.vx = -sprite.vx;
                if (this.onVXChange) {
                    this.onVXChange(sprite.vx);
                }
            }

            sprite.x += sprite.vx;
            sprite.y += sprite.vy;
        }
    }]);

    return GroundMove;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (GroundMove);

/***/ }),
/* 31 */
/* exports provided: default */
/* exports used: default */
/*!*************************************!*\
  !*** ./js/Object/Behavior/InOut.js ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/
// by default

var InOut = function (_Behavior) {
    _inherits(InOut, _Behavior);

    function InOut(sprite, Input, options) {
        _classCallCheck(this, InOut);

        var _this = _possibleConstructorReturn(this, (InOut.__proto__ || Object.getPrototypeOf(InOut)).call(this, sprite, Input, options));

        _this.startY = sprite.y;
        _this.startX = sprite.x;

        _this.maxX = options.minX || 0;

        _this.maxY = options.minY || 0;
        return _this;
    }

    _createClass(InOut, [{
        key: 'onMove',
        value: function onMove(t) {
            var sprite = this.sprite,
                diffY = Math.abs(sprite.y - this.startY),
                diffX = Math.abs(sprite.x - this.startX);

            if (diffY > this.maxY) {
                sprite.vy = -sprite.vy;
                if (this.onVYChange) {
                    this.onVYChange();
                }
            }

            if (diffX > this.maxX) {
                sprite.vx = -sprite.vx;
                if (this.onVXChange) {
                    this.onVXChange();
                }
            }

            sprite.x += sprite.vx;
            sprite.y += sprite.vy;
        }
    }]);

    return InOut;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (InOut);

/***/ }),
/* 32 */
/* exports provided: default */
/* exports used: default */
/*!************************************!*\
  !*** ./js/Object/Behavior/Path.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/*jshint devel: true, bitwise: false*/

function sign(x) {
    return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
}

/**
 * A Path is a special behavior that uses a pre-defined (recorded) path to move
 * an object.
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager.
 * @param {Object} options The options of the behavior.
 * @param {Array} options.nodes The nodes of the path: a simple array with nodes[0] = vx, nodes[1] = vy, nodes[2] = vx, nodes[3] = vy,...
 * @param {Boolean} options.reverse Set to true so that when the end of the path is reached, movement goes backwards.
 * 
 * @see {Behavior}
 */

var Path = function (_Behavior) {
    _inherits(Path, _Behavior);

    function Path(sprite, Input, options) {
        _classCallCheck(this, Path);

        var _this = _possibleConstructorReturn(this, (Path.__proto__ || Object.getPrototypeOf(Path)).call(this, sprite, Input, options));

        _this.startY = sprite.y;
        _this.startX = sprite.x;

        _this.currentNode = 0;

        _this.offset = 2;

        _this.nodes = options.nodes;

        _this.reverse = options.reverse || false;

        _this.dirX = 0;
        _this.dirY = 0;

        _this.numNodes = _this.nodes.length / 2;
        return _this;
    }

    /**
     * Move handler: gets the next vx/vy from `this.nodes`
     * and makes sure to call onVXChange/onVYChange at each sign change
     */


    _createClass(Path, [{
        key: 'onMove',
        value: function onMove(t) {
            var sprite = this.sprite,
                pos = this.currentNode,
                offsetX = this.nodes[pos],
                offsetY = this.nodes[pos + 1];

            if (this.offset > 0) {
                sprite.x += offsetX;
                sprite.y += offsetY;
            } else {
                sprite.x -= offsetX;
                sprite.y -= offsetY;
            }

            if (offsetX) {
                if (this.dirX && sign(this.dirX) !== sign(offsetX)) {
                    this.onVXChange && this.onVXChange();
                }
                this.dirX = offsetX;
            }

            if (offsetY) {
                if (this.dirY && sign(this.dirY) !== sign(offsetY)) {
                    this.onVYChange && this.onVYChange();
                }
                this.dirY = offsetY;
            }

            this.currentNode += this.offset;

            if (this.currentNode >= this.nodes.length || this.currentNode < 0) {
                if (!this.reverse) {
                    sprite.moving = false;
                    return;
                } else {
                    if (this.onVXChange) {
                        this.dirX = 0;
                        this.onVXChange();
                    }

                    if (this.onVYChange) {
                        this.dirY = 0;
                        this.onVYChange();
                    }
                    this.currentNode = this.currentNode < 0 ? 0 : this.nodes.length - 2;
                    this.offset = -this.offset;
                }
            }
        }
    }]);

    return Path;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Path);

/***/ }),
/* 33 */
/* exports provided: default */
/* exports used: default */
/*!******************************************!*\
  !*** ./js/Object/Behavior/PlayerMove.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__ = __webpack_require__(/*! Audio/AudioManager */ 4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/*jshint devel: true, bitwise: false*/
/*globals Game*/

/**
 * PlayerMove is a behavior that is controlled by the player using keyboard/touch events.
 * 
 * To have a sprite controlled by the user you can simply attach this behavior.
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager
 * @param {Object} options Parameters specifics to the behavior
 * @param {String} [options.startMovement="idle""] The initial behavior state.
 * @param {String} [options.direction="right"] The initial direction.
 * @param {String} [options.lookDirection="left"] The initial look direction, can be different than direction.
 * 
 * @see {Behavior}
 */

var PlayerMove = function (_Behavior) {
    _inherits(PlayerMove, _Behavior);

    function PlayerMove(sprite, Input, options) {
        _classCallCheck(this, PlayerMove);

        var _this = _possibleConstructorReturn(this, (PlayerMove.__proto__ || Object.getPrototypeOf(PlayerMove)).call(this, sprite, Input, options));

        _this.direction = options.direction || 'right';

        _this.currentMovement = options.startMovement || '';

        _this.lookDirection = options.lookDirection || 'left';

        _this.climbVY = 2;

        _this.jumping = false;

        _this.firing = false;

        _this.fromLadder = false;

        _this.sideHit = false;
        return _this;
    }

    /**
     * onMove handler: uses InputManager to get keyboard status and move the sprite when needed
     * 
     * @param {Number} t The time ellapsed since last move
     */


    _createClass(PlayerMove, [{
        key: 'onMove',
        value: function onMove(t) {
            var Input = this.Input;

            if (this.currentMovement !== 'falling' && !this.currentMovement.match(/jump/) && !this.firing) {
                // console.log('left', Input.getKeyStatus(Input.keys.LEFT));
                // direction
                if (Input.getKeyStatus(Input.keys.LEFT) === true) {
                    if (Input.getKeyStatus(Input.keys.UP) === true) {
                        this.startJump('left');
                    } else {
                        this.walkLeft();
                    }
                } else if (Input.getKeyStatus(Input.keys.RIGHT) === true) {
                    if (Input.getKeyStatus(Input.keys.UP) === true) {
                        this.startJump('right');
                        console.log('startJump right', this.fromLadder);
                    } else {
                        this.walkRight();
                    }
                } else if (Input.getKeyStatus(Input.keys.UP) === true) {
                    this.goUpOrClimb(false);
                } else if (Input.getKeyStatus(Input.keys.DOWN) === true) {
                    // empty ? => fall (possible ?)
                    this.goDownOrClimb(0);
                } else {
                    if (this.currentMovement !== 'climb') {
                        if (!this.currentMovement.match('fire')) {
                            this.idle();
                        }
                    } else {
                        this.stopClimbing();
                    }
                }

                // fire (we may fire while jumping/moving)
                if (Input.getKeyStatus(Input.keys.CTRL, true) === true) {
                    switch (this.currentMovement) {
                        case 'faceWall':
                            if (this.switchAbove) {
                                this.getMapEvent().handleAction({
                                    type: 'toggleSwitch',
                                    sprite: this.switchAbove
                                });
                            }
                            break;

                        case 'climb':
                            if (!this.lookDirection) {
                                break;
                            }
                        case 'idle':
                        case 'walk_right':
                        case 'walk_left':
                            this.handleFire();
                            break;

                        case 'down':
                            // inventory
                            break;

                        default:
                            console.log('unhandle fire');
                            console.log(this.currentMovement);
                            break;
                    }
                }
            } else {
                if (this.currentMovement.match(/jump/)) {
                    // console.log('***', this.currentMovement, Input.getKeyStatus(Input.keys.SPACE, true));
                    if (Input.getKeyStatus(Input.keys.CTRL, true)) {
                        this.handleFire();
                    }
                    // TODO: handle up key to catch the ladder
                    if (!this.fromLadder && Input.getKeyStatus(Input.keys.UP) === true && !this.goUpOrClimb(true)) {
                        this.jump(this.lookDirection);
                    } else {
                        // console.log('jump 2');
                        this.jump(this.lookDirection);
                    }
                } else if (!this.currentMovement.match('fire') && !this.currentMovement.match('climb')) {
                    console.log('cas 2.2', this.currentMovement);
                    this.fall();
                }
            }
        }

        /**
         * Called when the player attemps to fire
         * 
         * @private
         */

    }, {
        key: 'handleFire',
        value: function handleFire() {
            var canFire = false,
                that = this;

            console.log('fire direction', this.lookDirection);

            if (this.firing) {
                return;
            }

            // TODO: right/left ?
            canFire = this.sprite.onEvent('fire', {
                direction: this.lookDirection
            });

            if (canFire) {
                this.firing = true;

                // player can fire & move only after fire animation has completed
                this.previousMovement = this.currentMovement;
                this.sprite.storeCurrentAnim();
                this.sprite.setAnimation('fire' + this.lookDirection, function () {
                    that.firing = false;
                    this.restorePreviousAnim();
                });
                // this.currentMovement = 'fire' + dir;
                // if (!this.previousMovement.match(/jump/)) {
                //    this.currentMovement = 'fire' + this.lookDirection;
                // }
            }
        }

        /**
         * Called when the player is walking
         * 
         * @param {String} direction The direction the player is heading at.
         * 
         * @private
         */

    }, {
        key: 'walk',
        value: function walk(direction) {
            // ADD: this.currentMovement = 'walk_left|right'
            var sprite = this.sprite,
                currentHitBox = sprite.getHitBox(),
                nextX = void 0,
                nextY = void 0,
                sound = void 0;

            this.currentMovement = 'walk_' + direction;

            this.vy = 0;
            sprite.currentAnimName = 'walk' + direction.charAt(0).toUpperCase() + direction.slice(1);
            sound = 'step_' + direction;
            this.lookDirection = direction;

            if (direction === 'left') {
                this.vx = -2;
            } else {
                this.vx = 2;
            }

            nextX = sprite.x + this.vx;
            nextY = sprite.y + this.vy;

            // hit wall ?
            if (!sprite.currentMap.hitObjectTest(nextX + currentHitBox.x, nextY + currentHitBox.y, nextX + currentHitBox.x2, nextY + currentHitBox.y2, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.WALL)) {
                sprite.startAnimation();
                if (sprite.currentFrameNum !== sprite.previousFrameNum && (sprite.currentFrameNum === 3 || sprite.currentFrameNum === 7)) {
                    __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].play(sound);
                }
            } else {
                this.idle();
            }

            sprite.x += this.vx;
            sprite.y += this.vy;

            this.fallTest();

            return 0;
        }

        /**
         * Called when player needs to walk on the left
         * 
         * @private
         */

    }, {
        key: 'walkLeft',
        value: function walkLeft() {
            if (this.currentMovement !== 'climb') {
                this.walk('left');
            } else {
                this.lookDirection = 'left';
            }
        }

        /**
         * Called when player needs to walk on the right
         * 
         * Lots of hardcoded constants that would be better off as behavior options
         * 
         * @private
         */

    }, {
        key: 'walkRight',
        value: function walkRight() {
            if (this.currentMovement !== 'climb') {
                this.walk('right');
            } else {
                this.lookDirection = 'right';
            }
        }

        /**
         * Called when the play starts jumping
         * 
         * @param {String} direction The direction of the jump (right or left).
         * 
         * @private
         */

    }, {
        key: 'startJump',
        value: function startJump(direction) {
            var sprite = this.sprite,
                that = this;

            if (!this.jumping) {
                console.log('starting jump', sprite.y);
                this.readyToJump = false;
                this.currentMovement = 'startjump';
                this.vx = direction === 'left' ? -2 : 2;
                this.vy = -4;
                this.gravity = 0.098;

                console.log('startJump', this.vy);

                sprite.setAnimation('goDown' + direction, function () {
                    console.log('end goDownLeft, ready to jump', this.vy, this.y);
                    that.readyToJump = true;
                    that.currentMovement = 'jump' + direction;
                    that.jumping = true;

                    // TODO: call onEvent('jump')
                    this.setAnimation('jump' + direction);
                });
            } else {
                that.readyToJump = true;
                this.jumping = true;
                that.currentMovement = 'jump' + direction;

                this.vx = direction === 'left' ? -2 : 2;
                this.vy = -4;
                this.gravity = 0.098;

                // TODO: call onEvent('jump')
                this.sprite.setAnimation('jump' + direction);
            }

            this.lookDirection = this.direction = direction;
            this.sideHit = false;

            __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].play('jump');
        }

        /**
         * Called when the playing is already jumping: this method is checks for colisions and
         * calculates next x/y sprite position
         * 
         * @param {String} direction The direction of the jump.
         * 
         * @private
         */

    }, {
        key: 'jump',
        value: function jump(direction) {
            var sprite = this.sprite,
                nextX = sprite.x + Math.ceil(this.vx),
                nextY = sprite.y + Math.ceil(this.vy),
                currentHitBox = sprite.getHitBox(),
                horizTileHit = null,
                vertTileHit = null,
                noVx = false,
                noVy = false;

            if (!this.readyToJump) {
                console.log('not ready to jump', this.fromLadder);
                return;
            }

            if (this.currentMovement.match(/jump/)) {
                horizTileHit = sprite.currentMap.hitObjectTest(nextX + currentHitBox.x, sprite.y + currentHitBox.y, nextX + currentHitBox.x2, sprite.y + currentHitBox.y2, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.WALL);
                // left/right collision ? => vx = 0, but player continues to go up
                if (horizTileHit) {
                    // debugger;
                    // console.log('[PlayerMove] Left/Right collision!');

                    // this.vx = 0;
                    this.sideHit = true;
                    noVx = true;

                    // set x to max(wall, nextx), which is wall-1
                    if (this.direction === 'right') {
                        sprite.x = horizTileHit.tile.x - currentHitBox.x2 - currentHitBox.x - 1;
                    } else {
                        sprite.x = horizTileHit.tile.x + sprite.currentMap.tileWidth;
                    }
                } /* else if (!this.fromLadder && this.sideHit === true) {
                  // side was hit during jump
                  noVy = true;
                     this.currentMovement = '';
                  AM.play('land');
                  }*/
                // top/down collision
                vertTileHit = sprite.currentMap.hitObjectTest(sprite.x + currentHitBox.x, nextY + currentHitBox.y, sprite.x + currentHitBox.x2, nextY + currentHitBox.y2, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.WALL);
                // top/bottom collision ? => fall
                if (vertTileHit) {
                    // top
                    if (this.vy < 0) {
                        // debugger;
                        console.log('[PlayerMove] Top collision, reversing vy!');
                        if (!this.sideHit) {
                            this.fall();
                        } else {
                            this.vy = -this.vy;
                            // ** this.vx = 0;
                        }
                        return;
                    } else {
                        // ground touched
                        console.log('[PlayerMove] touch ground!', this.currentMovement);
                        // debugger;
                        this.jumping = false;
                        this.fromLadder = false;

                        // TODO: play endJumLeft animation => onAnimationEnd, readyLeft
                        __WEBPACK_IMPORTED_MODULE_1_Audio_AudioManager__["a" /* default */].play('land');
                        this.currentMovement = 'idle';

                        sprite.y = vertTileHit.tile.y - sprite.getCurrentHeight();
                        this.vy = 0;
                        return;
                    }
                }
            }

            if (!noVx) {
                sprite.x += Math.ceil(this.vx);
            }
            if (!noVy) {
                sprite.y += Math.ceil(this.vy);
                this.vy += this.gravity;
            } else {
                this.vy = 0;
            }
        }

        /**
         * Called when the player stops moving
         * 
         * @private
         */

    }, {
        key: 'idle',
        value: function idle() {
            var sprite = this.sprite;

            this.vx = 0;
            this.vy = 0;

            sprite.stopAnimation();
        }

        /**
         * Called when the player needs to goDown
         * 
         * @private
         */

    }, {
        key: 'goDown',
        value: function goDown() {
            var sprite = this.sprite;
            this.vx = 0;
            this.vy = 0;

            sprite.currentAnimName = 'goDown' + this.lookDirection;

            this.currentMovement = '';
        }

        /**
         * Called when the player faces the wall
         * 
         * @private
         */

    }, {
        key: 'faceWall',
        value: function faceWall() {
            var sprite = this.sprite;

            this.vx = 0;
            this.vy = 0;

            // only check once
            if (this.currentMovement !== 'faceWall') {
                this.currentMovement = 'faceWall';
                sprite.advanceFrame('faceWall');
                this.switchAbove = this.sprite.currentMap.getSwitchAboveMaster();
                console.log('**** faceWall', this.switchAbove);
            }
        }

        /**
         * Called when the player starts climbing a ladder
         * 
         * @param {Number} direction The direction, can be 0 (down) or 1 (up)
         * 
         * @private
         */

    }, {
        key: 'climb',
        value: function climb(direction) {
            console.log('climbing');
            var sprite = this.sprite;

            this.fromLadder = true;

            this.currentMovement = 'climb';
            this.vx = 0;
            this.vy = direction ? -this.climbVY : this.climbVY;

            sprite.currentAnimName = 'climb';
            sprite.startAnimation();

            // TODO: check for top ladder or floor

            sprite.x += this.vx;
            sprite.y += this.vy;
        }

        /**
         * Called when the player stops climbing (ie: released up/down keys)
         * 
         * @private
         */

    }, {
        key: 'stopClimbing',
        value: function stopClimbing() /*direction*/{
            var sprite = this.sprite;

            this.vx = 0;
            this.vy = 0;
            sprite.stopAnimation();
        }

        /**
         * Called when the player moves the up arrow key: depending on its position he will face a wall
         * or climb a ladder
         * 
         * @param {Boolean} onlyClimb Set to true to only climb
         * 
         * @private
         */

    }, {
        key: 'goUpOrClimb',
        value: function goUpOrClimb(onlyClimb) {
            var sprite = this.sprite,
                currentHitBox = sprite.getHitBox(),
                diff = onlyClimb ? 0 : 24,
                pos = false,
                pos2 = false,
                Input = this.Input;

            if (Input.getKeyStatus(Input.keys.LEFT) === true || Input.getKeyStatus(Input.keys.RIGHT) === true) {
                return false;
            }

            if (onlyClimb === true) {
                if (sprite.currentMap.hitObjectTest(currentHitBox.x + sprite.x, currentHitBox.y + sprite.y + 40, currentHitBox.x + sprite.x - diff, currentHitBox.y2 + sprite.y - 50, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.LADDER)) {
                    pos = sprite.currentMap.hitObjectTest(currentHitBox.x2 + sprite.x + diff, currentHitBox.y + sprite.y + 40, currentHitBox.x2 + sprite.x - diff, currentHitBox.y2 + sprite.y - 50, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.LADDER);
                }
            } else {
                pos = sprite.currentMap.hitObjectTest(currentHitBox.x + sprite.x + diff, currentHitBox.y + sprite.y + 40, currentHitBox.x2 + sprite.x - diff, currentHitBox.y2 + sprite.y - 50, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.LADDER);
            }

            if (pos !== false) {
                // debugger;
                // center player over tile (ladder)
                if (this.currentMovement !== 'climb') {
                    // debugger;
                    sprite.centerXOverTile(pos);
                    this.lookDirection = '';
                }
                console.log('climbing, fromLadder', this.fromLadder, this.currentMovement);
                this.climb(1);

                return true;
            } else if (!onlyClimb) {
                // TODO: if (climb) anim(faceLadder)
                this.faceWall();

                return false;
            }
        }

        /**
         * This method is called when the player presses the down arrow key: depending on its position,
         * player will climb a ladder or get down
         * 
         * @private
         */

    }, {
        key: 'goDownOrClimb',
        value: function goDownOrClimb() {
            var sprite = this.sprite,
                currentHitBox = sprite.getHitBox(),
                pos = sprite.currentMap.hitObjectTest(currentHitBox.x + sprite.x + 24, currentHitBox.y2 + sprite.y + this.climbVY, currentHitBox.x2 + sprite.x - 24, currentHitBox.y2 + sprite.y + this.climbVY, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.LADDER);

            if (pos) {
                if (this.currentMovement !== 'climb') {
                    sprite.centerXOverTile(pos);
                }
                console.log(currentHitBox.x2 + sprite.x - 24, currentHitBox.y2 + sprite.y + this.climbVY);
                this.climb(0);
            } else {
                // TODO: if (climb) anim(faceLadder)
                if (this.currentMovement === 'climb' || this.currentMovement === 'faceWall') {
                    // debugger;
                    console.log(currentHitBox.x2 + sprite.x - 24, currentHitBox.y2 + sprite.y + this.climbVY);
                    console.log('faceWall');
                    pos = sprite.currentMap.hitObjectTest(currentHitBox.x + sprite.x + 24, currentHitBox.y2 + sprite.y + this.climbVY, currentHitBox.x2 + sprite.x - 24, currentHitBox.y2 + sprite.y + this.climbVY, __WEBPACK_IMPORTED_MODULE_2_Map_Tile__["a" /* default */].TYPE.LADDER);
                    this.faceWall();
                } else {
                    this.goDown();
                }
            }
        }

        /**
         * Called when the player is falling
         * 
         * @private
         */

    }, {
        key: 'fall',
        value: function fall() {
            var i = 4,
                sprite = this.sprite;

            this.jumping = false;

            //          AM.play('falling');
            // TODO: guess movement is different if we're falling after a jump or simple walk
            // console.log('fall()', this.lookDirection);
            for (; i > 0; i--) {
                if (this.fallTest(i)) {
                    this.vy = i;
                    break;
                }
            }

            if (i > 0) {
                this.vx = 0;
                sprite.y += this.vy;
                sprite.advanceFrame('fall' + this.lookDirection);
            } else {
                this.fromLadder = false;
                console.log('**land =>', this.fromLadder);
                // if (this.currentMovement === 'falling') {
                //     AM.play('land');
                // }
            }
        }

        /**
         * Checkes that player can fall
         * 
         * @param {Number=1} size The gap size to check for.
         * 
         * @returns {Boolean} true if the player falls
         * 
         * @private
         */

    }, {
        key: 'fallTest',
        value: function fallTest(size) {
            size = size || 1;

            var sprite = this.sprite,
                currentHitBox = sprite.getHitBox(),
                y = sprite.y + currentHitBox.y2 + size;

            // check for falling
            // var y = sprite.y + sprite.getCurrentHeight() + size;

            if (!sprite.currentMap.fallTest(sprite.x + currentHitBox.x, y) && !sprite.currentMap.fallTest(sprite.x + currentHitBox.x2, y)) {
                this.currentMovement = 'falling';
                return true;
            } else {

                //                    if (this.currentMovement == 'falling') {
                //                        debugger;
                //                        this.currentMap.fallTest(this.x + currentHitBox.x, y) && this.currentMap.fallTest(this.x + currentHitBox.x2, y);
                //                    }
                if (this.currentMovement == 'falling') {
                    this.currentMovement = '';
                }
                return false;
            }
        }
    }]);

    return PlayerMove;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (PlayerMove);

/***/ }),
/* 34 */
/* exports provided: default */
/* exports used: default */
/*!******************************************!*\
  !*** ./js/Object/Behavior/SimpleFall.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/*jshint devel: true, bitwise: false*/
/**
 * Simple behavior that makes an object bounce on the ground
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager.
 * @param {Object} options The options of the behavior.
 * @param {Number} [options.elasticity=0.80] The elasticity: the closer it is to 1, the higher the bounce.
 * @param {Function} [options.onEnd=undefined] An optional callback to execute when the object stops bouncing.
 * @param {Function} [options.onGround=undefined] An optional callback to execute each time the object touches the ground.
 * 
 * @example
 * 
 *  sprite.setBehavior('simplefall', {
 *    gravity: 0.3,
 *    onEnd: () => {
 *        this.moving = false;
 *    },
 *    onGround: function() {
 *      AM.play('bounce');
 *    }
 * });
 */

var SimpleFall = function (_Behavior) {
    _inherits(SimpleFall, _Behavior);

    function SimpleFall(sprite, Input, options) {
        _classCallCheck(this, SimpleFall);

        var _this = _possibleConstructorReturn(this, (SimpleFall.__proto__ || Object.getPrototypeOf(SimpleFall)).call(this, sprite, Input, options));

        _this.elasticity = typeof options.elasticity !== 'undefined' ? options.elasticity : 0.80;

        _this.onEnd = options.onEnd || null;
        _this.onGround = options.onGround || null;

        console.log('move initiated', sprite.vx, sprite.vy, _this.startVy, sprite.gravity);
        return _this;
    }

    /**
     * The move handler that gets executed at each move loop.
     * 
     * Simply calculates the next vertical position using current velocity.
     * Each time the object reaches the ground, it bounces a little less, using the elasticity property,
     * until it reaches the ground and stops bouncing.
     * 
     */


    _createClass(SimpleFall, [{
        key: 'onMove',
        value: function onMove(t) {
            var sprite = this.sprite,
                map = sprite.currentMap,
                nextX = sprite.x + sprite.vx,
                nextY = sprite.y + sprite.vy,
                hitBox = sprite.getHitBox(),
                hitTest = null;

            // reached ground ? revert vy
            hitTest = map.hitObjectTest(nextX + hitBox.x, nextY + hitBox.y2, nextX + hitBox.x2, nextY + hitBox.y2, __WEBPACK_IMPORTED_MODULE_1_Map_Tile__["a" /* default */].TYPE.WALL);
            if (hitTest) {
                if (this.onGround) {
                    this.onGround();
                }
                this.resetY();
                if (Math.abs(sprite.vy) <= sprite.gravity) {
                    sprite.moving = false;
                    if (this.onEnd) {
                        this.onEnd();
                    }
                }
            } else {
                sprite.vy += sprite.gravity;

                sprite.y += sprite.vy;
            }
        }

        /**
         * Called when the object reaches the ground: simply inverts velocity
         * 
         * @private
         */

    }, {
        key: 'resetY',
        value: function resetY() {
            this.sprite.vy = -this.sprite.vy * this.elasticity;
        }
    }]);

    return SimpleFall;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (SimpleFall);

/***/ }),
/* 35 */
/* exports provided: default */
/* exports used: default */
/*!******************************************!*\
  !*** ./js/Object/Behavior/WeaponMove.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__ = __webpack_require__(/*! Object/Behavior/Behavior */ 3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/*jshint devel: true, bitwise: false*/
/**
 * Simple behavior that moves horizontally until a wall is reached.
 * 
 * @param {Sprite} sprite The sprite to attach the behavior to.
 * @param {InputManager} Input A reference to the InputManager.
 * @param {Object} options The options of the behavior
 * @param {String} [options.direction="left"] The initial direction of the move, default is `right`.
 * 
 */

var WeaponMove = function (_Behavior) {
    _inherits(WeaponMove, _Behavior);

    function WeaponMove(sprite, Input, options) {
        _classCallCheck(this, WeaponMove);

        var _this = _possibleConstructorReturn(this, (WeaponMove.__proto__ || Object.getPrototypeOf(WeaponMove)).call(this, sprite, Input, options));

        _this.direction = options.direction || 'right';

        if (_this.direction.match('left')) {
            sprite.vx = -sprite.vx;
        }

        if (_this.direction.match('top')) {
            sprite.vy = -sprite.vy;
        }
        return _this;
    }

    /**
     * The onMove event handler, simply moves updates the object's x using vx and calls VXChange
     * when it reaches a wall
     */


    _createClass(WeaponMove, [{
        key: 'onMove',
        value: function onMove(t) {
            var sprite = this.sprite,
                map = sprite.currentMap,
                nextX = sprite.x + sprite.vx,
                nextY = sprite.y + sprite.vy,
                hitBox = sprite.getHitBox(),
                startX = sprite.vx > 0 ? hitBox.x2 : hitBox.x;

            if (map.hitObjectTest(nextX + startX, nextY + hitBox.y, nextX + startX, nextY + hitBox.y2, __WEBPACK_IMPORTED_MODULE_1_Map_Tile__["a" /* default */].TYPE.WALL)) {
                sprite.vx = -sprite.vx;
                if (this.onVXChange) {
                    this.onVXChange(sprite.vx);
                }
            }

            sprite.x += sprite.vx;
            sprite.y += sprite.vy;
        }
    }]);

    return WeaponMove;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Behavior_Behavior__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (WeaponMove);

/***/ }),
/* 36 */
/* exports provided: default */
/* exports used: default */
/*!**************************!*\
  !*** ./js/Object/Hud.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Sprite__ = __webpack_require__(/*! Object/Sprite */ 12);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// define(['Sprite'], function() {

/*jshint devel: true, bitwise: false*/
/*globals Class*/

var Hud = function () {
	function Hud(options) {
		_classCallCheck(this, Hud);

		// super(options);

		this.score = options.score || 0;
		this.alertnateScore = options.alternateScore || 0;
		this.energy = options.energy || 100;
		this.$dest = options.target;
		this.info = '';
		this.inventory = {};

		this.width = options.width || 1024;
		this.height = options.height || 64;

		Object.defineProperty(this, "score", {
			get: function get() {
				return this.score;
			},

			set: function set(score) {
				// TODO: some checks
				this.score = score;
			}
		});
	}

	_createClass(Hud, [{
		key: 'drawBackground',
		value: function drawBackground() {}
	}, {
		key: 'draw',
		value: function draw() {
			// TODO
			this.drawBackground();
		}
	}]);

	return Hud;
}();

/* harmony default export */ __webpack_exports__["a"] = (Hud);

/***/ }),
/* 37 */
/* exports provided: default */
/* exports used: default */
/*!***************************!*\
  !*** ./js/Object/Menu.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Object_Object__ = __webpack_require__(/*! Object/Object */ 5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Object_Text__ = __webpack_require__(/*! Object/Text */ 13);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/*jshint devel: true, bitwise: false*/
/**
 * The menu class allows to quickly add text menu to an Athena Scene
 * 
 * Each menu entry is called menuItem and is a simple object with the following properties:
 * { text: 'menu text', selectable: true|false, active: true|false, visible: true|false }
 * 
 * @param {String} type The type of object.
 * @param {Object} options
 * @param {String} [options.title="Menu Title"] The title of the menu.
 * @param {String} [options.color="black"] The color of the menu.
 * @param {Array} [options.menuItems=[]] The menu items to add.
 * @param {String} [options.selectedColor="red"] The default color to use for the selected menu item.
 * 
 * @example
 * 
 * let myMenu = new Menu('mainMenu', {
 *   title: 'Gods JS',
 *      color: 'white',
 *      menuItems: [
 *      {
 *          text: '> Start Game',
 *          selectable: true,
 *          visible: true,
 *          active: true
 *      },
 *      {
 *          text: '> Cannot Select ;)',
 *          selectable: true,
 *          visible: true
 *      }]
 *    })
 */

var Menu = function (_GfxObject) {
    _inherits(Menu, _GfxObject);

    function Menu(type, options) {
        _classCallCheck(this, Menu);

        // this.type = type;
        // this.id = this.type + new Date().getTime();

        var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, type, options));

        _this.title = new __WEBPACK_IMPORTED_MODULE_1_Object_Text__["a" /* default */](type, {
            color: options.color || 'black',
            text: options.title || 'Menu Title'
        });

        _this.color = options.color || 'white';
        _this.selectedColor = options.selectedColor || 'red';

        _this.menuItems = [];

        _this.selectedItem = options.selectedItem || 0;

        _this.selectCallbacks = [];
        _this.hoverCallbacks = [];

        _this.itemHeight = options.itemHeight || 40;

        // SUPERHERE this._super(type, options);

        _this.title.moveTo(_this.x, _this.y);

        _this.addMenuItems(options.menuItems || []);
        return _this;
    }

    /**
     * Adds a new menu item
     * 
     * @param {Object} menu An hash describing the menu.
     * The hash can have the following properties: 
     * { text: 'menu text', selectable: true|false, active: true|false, visible: true|false }
     */


    _createClass(Menu, [{
        key: 'addMenuItem',
        value: function addMenuItem(menu) {
            var y = this.y + (this.menuItems.length + 1) * this.itemHeight,
                menuItem = new __WEBPACK_IMPORTED_MODULE_1_Object_Text__["a" /* default */]('menuItem' + this.menuItems.length, menu);

            menuItem.moveTo(this.x, y);
            menuItem.visible = menu.visible === true || false;
            menuItem.selectable = menu.selectable === true || false;

            this.menuItems.push(menuItem);
        }

        /**
         * Adds several menuItems in a row
         * 
         * @param {Array} items The list of items to add
         * 
         * @see addMenuItem()
         */

    }, {
        key: 'addMenuItems',
        value: function addMenuItems(items) {
            var _this2 = this;

            console.log('addMenuItems', items);

            items.forEach(function (item, idx) {
                _this2.addMenuItem(item);
                if (item.active) {
                    _this2.selectedItem = idx;
                }
            });
        }

        /**
         * Selects the next item in the item list
         * 
         * @private
         */

    }, {
        key: 'nextItem',
        value: function nextItem() {
            if (++this.selectedItem >= this.menuItems.length) {
                this.selectedItem = 0;
            }

            if (this.selectedItem && this.menuItems[this.selectedItem] && !this.menuItems[this.selectedItem].selectable) {
                this.nextItem();
            }
        }

        /**
         * Returns the index of the selected item
         * 
         * @returns {Number} The index of the selected item.
         * 
         * @private
         */

    }, {
        key: 'getSelectedItemIndex',
        value: function getSelectedItemIndex() {
            return this.selectedItem;
        }

        /**
         * Returns the current selected Item object
         * 
         * @returns {Object} Current selected item.
         * 
         * @private
         */

    }, {
        key: 'getSelectedItem',
        value: function getSelectedItem() {
            return this.menuItems[this.selectedItem];
        }

        /**
         * Updates the text of a menu item
         * 
         * @param {Number} itemId The index of the item to modify.
         * @param {String} text The new text.
         * 
         */

    }, {
        key: 'setText',
        value: function setText(itemId, text) {
            this.menuItems[itemId] = text;
        }

        /**
         * Draw method for the Text object
         * 
         * @param {CanvasContext} destCtx The canvas context where to draw the menu
         * 
         * @private
         */

    }, {
        key: 'draw',
        value: function draw(destCtx) {
            var _this3 = this;

            if (this.angle !== 0) {
                destCtx.save();
                destCtx.rotate(this.angle);
            }

            this.title.draw(destCtx);

            this.menuItems.forEach(function (menuItem, idx) {
                if (idx === _this3.selectedItem) {
                    menuItem.color = _this3.selectedColor || 'blue';
                } else {
                    menuItem.color = _this3.color;
                }
                menuItem.draw(destCtx);
            });

            if (this.angle !== 0) {
                destCtx.restore();
            }
        }
    }]);

    return Menu;
}(__WEBPACK_IMPORTED_MODULE_0_Object_Object__["a" /* default */]);

;

/* harmony default export */ __webpack_exports__["a"] = (Menu);

/***/ }),
/* 38 */
/* exports provided: default */
/* exports used: default */
/*!***************************!*\
  !*** ./js/Scene/Scene.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__ = __webpack_require__(/*! Resource/ResourceManager */ 6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Object_Sprite__ = __webpack_require__(/*! Object/Sprite */ 12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Object_BitmapText__ = __webpack_require__(/*! Object/BitmapText */ 20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Object_Text__ = __webpack_require__(/*! Object/Text */ 13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_Map_Map__ = __webpack_require__(/*! Map/Map */ 18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_Map_Tile__ = __webpack_require__(/*! Map/Tile */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_Notification_NotificationManager__ = __webpack_require__(/*! Notification/NotificationManager */ 10);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }









/*jshint devel: true, bitwise: false*/
// debug
window.scenes = {};

/**
 * The `Scene` is used to display your objects. In AthenaJS you first add objects onto the scene.
 * When you scene is rendered (at 60fps), your objects appear on the screen.
 * 
 * Instead of creating a new scene, it is common to extend the Scene class to create your own scene.
 * 
 * @param {Object} options
 * @param {string} [options.name="Scene"+timestamp] The name of your scene.
 * @param {Object} [options.resources] An optional array of resources of the form: ``{ id: 'unique id', type: 'image|script|map|audio', src: 'path_to_resource'}`` that the scene needs.
 * @param {number} [options.backgrounds=1] The number of backgrounds: a scene can have any number of backgrounds.
 * @param {number} [options.layers=2] The number of layers: layers are stacked above the backgrounds.
 * @param {number} [options.foregrounds=1] The number of foreground layers. This would typically be used for parallax scrollings.
 * @param {number} [options.opacity=1] The default opacity for the scene: can be usefull to have fadeIn effects when starting the scene.
 * @param {number} [options.hudScene] Scenes can have an option `hud` scene that is automatically rendered on top of it. This allows to easily add score/status elements to games.
 * 
 */

var Scene = function () {
    function Scene(options) {
        _classCallCheck(this, Scene);

        console.log('[scene ' + options.name + '] ' + 'Init()', options);

        // we may have several backgrounds
        this.backgrounds = new Array(options.backgrounds || 1);

        this.layers = new Array(options.layers || 2);

        // foregrounds will be added later
        this.foregrounds = new Array(options.backgrounds || 1);

        this.readyDef = null;

        this.resources = options.resources || null;

        this.pics = {};

        this.map = null;

        this.loaded = false;

        this.running = false;

        this.backgroundImage = null;

        this.name = options.name || 'Scene' + new Date().getTime();

        this.opacity = typeof options.opacity !== 'undefined' ? options.opacity : 1;

        this.hudScene = options.hudScene || null;

        // will hold the time of gameplay
        this.time = null;
        this.playTime = null;

        // debug
        window.scenes[this.name] = this;

        console.log('end constructor');
    }
    /**
     * Browsers seem to do some conversion the first time drawImage is used from/to canvas
     * 
     * @see [Optimising the canvas element](http://www.warpdesign.fr/my-experience-optimising-the-canvas-html5-element/)
     * @private
     * 
     */


    _createClass(Scene, [{
        key: '_prepareCanvas',
        value: function _prepareCanvas() {
            this.display.prepareCanvas(this.resources);
        }

        /**
         * Fill layers arrays
         * @private
         */

    }, {
        key: '_fillArrays',
        value: function _fillArrays() {
            for (var i = 0; i < this.layers.length; ++i) {
                this.layers[i] = [];
            }

            for (var _i = 0; _i < this.backgrounds.length; ++_i) {
                this.backgrounds[_i] = [];
            }
            for (var _i2 = 0; _i2 < this.foregrounds.length; ++_i2) {
                this.foregrounds[_i2] = [];
            }
        }

        /**
         * Save references of loaded resources for later use
         * @private
         */

    }, {
        key: '_getResourcesRef',
        value: function _getResourcesRef() {
            var resources = this.resources;

            resources.forEach(function (res) {
                res.elt = __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].getResourceById(res.id);
            });
        }

        /**
         * Loads resources
         * 
         * @param {array} res An array of resources to load.
         * @param {function} [progressCb=undefined] A progress callback function that gets called after each resource has been loaded
         * @returns {Deferred} `this.readyDef`
         * @private
         * 
         */

    }, {
        key: 'loadResources',
        value: function loadResources(res, progressCb /*, doneCb, failCb*/) {
            var _this = this;

            console.log('[scene ' + this.name + '] ' + 'loading Resources...');

            if (!this.loaded) {
                console.log('[scene ' + this.name + '] ' + ' seems like the scene needs to be loaded: goooo!');
                this.readyDef = __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].addResources(res);

                // add the huds resources as well
                if (this.hudScene && !this.hudScene.loaded) {
                    this.readyDef = __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].addResources(this.hudScene.resources);
                }

                this.readyDef.then(function () {
                    if (_this.hudScene) {
                        _this.hudScene.load();
                    }
                    _this.loaded = true;
                });

                this.readyDef.then(this.cacheImages.bind(this));
                this.readyDef.then(this.onLoad.bind(this));

                __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].loadResources('any', progressCb);
            } else {
                console.log('[scene ' + this.name + '] ' + ' seems like the scene has already been loaded: good!');
                // this.onLoad();
            }

            return this.readyDef;
        }

        /**
         * Loads the scene (if needed)
         * @private
         */

    }, {
        key: 'load',
        value: function load() {
            console.log('[Scene ' + this.name + '] load()');
            return this.loadResources(this.resources);
        }

        /**
         * Simple debug method: this be redefined for specific games
         */

    }, {
        key: 'debug',
        value: function debug() {
            console.log('[scene ' + this.name + '] ' + 'debug() default scene debug does nothing!');
        }

        /**
         * This method is called once resources have been loaded and does the following:
         * 1. creates layer arrays
         * 2. get reference resources from the resourceManager
         * 3. prepare canvas elements
         */

    }, {
        key: 'onLoad',
        value: function onLoad() {
            this._fillArrays();
            this._getResourcesRef();
            this._prepareCanvas();
        }

        /**
         * Get a reference of each `image` resource that has been loaded.
         * 
         * @private
         */

    }, {
        key: 'cacheImages',
        value: function cacheImages() {
            console.log('[scene ' + this.name + '] ' + ' caching Images');
            // var max = this.resources.length,
            //     i,
            //     id;

            for (var i = 0, max = this.resources.length; i < max; i++) {
                var id = this.resources[i].id;
                if (this.resources[i].type === 'image') {
                    this.pics[id] = __WEBPACK_IMPORTED_MODULE_0_Resource_ResourceManager__["a" /* default */].getResourceById(id);
                }
            }
            console.log('[scene ' + this.name + '] ');
        }

        /**
         * Associates the specified map with the scene: the map will then be used to render the scene.
         * *note* The map can either be an instance of a Map or a class inheriting from Map, in which case
         * 
         * @param {Map|Object} map The `Map` to use: it can be an instance of a Map inheriting class or
         * an options Object that will be used to create a new {Map} instance
         * 
         */

    }, {
        key: 'setMap',
        value: function setMap(map) {
            if (map instanceof __WEBPACK_IMPORTED_MODULE_4_Map_Map__["a" /* default */]) {
                this.map = map;
            } else {
                this.map = new __WEBPACK_IMPORTED_MODULE_4_Map_Map__["a" /* default */](map);
            }
            // debug stuff
            window.currentMap = this.map;
        }

        /**
         * Add one ore more display objects onto the scene
         * 
         * @param {Array|GfxObject} objects The object(s) to add onto the scene.
         * @param {string} [layerType="front"] Defines in which type of layer the object should be added.
         * @param {number} [layerNum=0] Defines the layer number where to add the objects.
         */

    }, {
        key: 'addObject',
        value: function addObject(objects, layerType, layerNum) {
            // console.log('[scene ' + this.name + '] ' + 'addObject', objects, layerType, layerNum);
            // var layer = null,
            //     that = this;

            var type = layerType || 'front',
                num = layerNum || 0,
                layer = null;

            switch (type) {
                case 'back':
                    layer = this.backgrounds[num];
                    break;

                case 'fore':
                    layer = this.foregrounds[num];
                    break;

                default:
                case 'front':
                    layer = this.layers[num];
                    break;
            }

            // console.log('[scene ' + this.name + '] ' + layerNum, layerType, layer, this.layers);

            if (Array.isArray(objects)) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var obj = _step.value;

                        console.log('[scene ' + this.name + '] ' + 'pushing', obj);
                        layer.push(obj);
                        if (typeof obj.setImage === 'function') {
                            obj.setImage(this.pics[obj.imageSrc]);
                        }
                        obj.setScene(this);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                layer.push(objects);
                if (typeof objects.setImage === 'function') {
                    objects.setImage(this.pics[objects.imageSrc]);
                }
                objects.setScene(this);
            }
        }

        /**
         * Draws the associated map into the specified canvas context
         * 
         * @param {CanvasContext} destCtx The canvas context where the map should be rendered.
         * 
         * @private
         */

    }, {
        key: 'drawMap',
        value: function drawMap(destCtx) {
            if (!this.map.isDirty) {
                return;
            }

            this.display.clearScreen(destCtx);
            this.map.draw(destCtx, false);
        }

        /**
         * Draws every object that is part of the associated map
         * 
         * @param {CanvasContext} destCtx The canvas context where the map should be rendered.
         * 
         * @private
         */

    }, {
        key: 'drawMapObjects',
        value: function drawMapObjects(destCtx) {
            this.map.drawObjects(destCtx);
        }

        /**
         * Draws every object that has been added onto the scene
         * 
         * @param {CanvasContext} destCtx The canvas context where the map should be rendered.
         * 
         * @private
         */

    }, {
        key: 'drawSceneObjects',
        value: function drawSceneObjects(destCtx) {
            // var i, j,
            //     max, max2,
            //     obj = null,
            //     layer = null;

            // i = j = max = max2 = 0;

            // got through the list of all objects and render them if they are visible ?
            for (var i = 0, max = this.layers.length; i < max; i++) {
                var layer = this.layers[i];
                for (var j = 0, max2 = layer.length; j < max2; j++) {
                    var obj = layer[j];
                    obj.draw(destCtx);
                }
            }
        }

        /**
         * This method calls the move() callback of each object that has been placed onto the map.
         * 
         * It is automatically called by the run method after each frame.
         * 
         * @private
         */

    }, {
        key: 'moveSceneObjects',
        value: function moveSceneObjects() {
            // var i, j,
            //     max, max2,
            //     obj = null,
            //     layer = null;

            // i = j = max = max2 = 0;

            // got through the list of all objects and call move method ?
            for (var i = 0, max = this.layers.length; i < max; i++) {
                var layer = this.layers[i];
                for (var j = 0, max2 = layer.length; j < max2; j++) {
                    var obj = layer[j];
                    obj.move();
                }
            }
        }

        /**
         * Changes the opacity of the scene
         * 
         * @param {number} opacity The new opacity.
         */

    }, {
        key: 'setOpacity',
        value: function setOpacity(opacity) {
            this.opacity = opacity;
        }

        /**
         * Returns the current opacity of the scene
         * 
         * @returns {number} The current opacity value.
         */

    }, {
        key: 'getOpacity',
        value: function getOpacity() {
            return this.opacity;
        }

        /**
         * You can set a static background image independently of the layers/
         * 
         * @param {Image|String} The image to set as background
         * @obsolete
         */

    }, {
        key: 'setBackgroundImage',
        value: function setBackgroundImage(image) {
            this.backgroundImage = image;
            // todo: hardcoded for now
            if (image instanceof Image) {
                new Dom('.main').css('backgroundImage', 'url(' + image.src + ')');
            } else {
                new Dom('.main').css('backgroundImage', 'url(' + image + ')');
            }
        }

        /**
         * Resume the scene playback
         */

    }, {
        key: 'resume',
        value: function resume() {
            this.start(true);
        }

        /**
         * Starts the scene
         * 
         * @param {boolean} [doNotResetMap=false] set to false if you don't want the map associated with the scene to have
         * its objects reset. This is useful when pausing the game for example.
         */

    }, {
        key: 'start',
        value: function start(doNotResetMap) {
            if (!this.loaded) {
                console.warn('[Scene] start() attempt to start a scene that has not been loaded yet. Start failed.');
            }

            this.running = true;

            if (this.map) {
                if (!doNotResetMap) this.map.reset();else this.map.resume();

                // force render of the map in any way
                this.map.isDirty = true;
            }

            // reset layers too
            this.backgrounds.length = 0;

            this.layers.forEach(function (layer) {
                layer.length = 0;
            });

            // be sure to clear all canvas, inc. secondary, especially
            // if we go from a scene with an hud, to a scene without one
            this.display.clearAllScreens();

            this.foregrounds.length = 0;

            this.time = new Date().getTime();

            this.playTime = null;

            if (this.hudScene) {
                this.hudScene.start();
            }
        }

        /***
         * stop the scene: TODO MERGE
         */

    }, {
        key: 'stop',
        value: function stop() {
            this.running = false;

            if (this.hudScene) {
                this.hudScene.stop();
            }
        }

        /**
         * pause the scene: TODO MERGE
         */

    }, {
        key: 'pause',
        value: function pause() {
            this.running = false;
            this.playTime = new Date().getTime() - this.time;
            console.log('pausing, playTime = ', this.playTime / 1000);

            if (this.hudScene) {
                this.hudScene.pause();
            }
        }

        /**
         * unpause the scene: TODO MERGE
         */

    }, {
        key: 'unpause',
        value: function unpause() {
            this.running = true;
            this.time = new Date().getTime() - this.playTime;
            console.log('resuming, playTime = ', this.playTime / 1000);
            this.playTime = null;

            if (this.hudScene) {
                this.hudScene.unpause();
            }
        }

        /**
         * Get the total playtime
         * 
         * @returns {number} the total playtime in milliseconds
         */

    }, {
        key: 'getPlayTime',
        value: function getPlayTime() {
            var playTime = null;

            if (this.playTime) {
                playTime = this.playTime;
            } else {
                playTime = new Date().getTime() - this.time;
            }

            return playTime / 1000;
        }

        /**
         * The run loop is where scene elements are moved and collisions are checked.
         * 
         * The map, if there is one, is also updated here (viewport, new objects, etc)
         */

    }, {
        key: 'run',
        value: function run() {
            this.moveSceneObjects();

            // user-loop: put user interaction here
            // move map, and sprites found onto the map
            if (this.map) {
                this.map.move();
                this.map.checkCollisions();
            }
        }

        /**
         * This method is responsible for drawing the scene and will be called 60 times a second.
         * 
         * @param {Array} layers The layers array to draw.
         * *note* When the scene is not running, this method isn't called at all.
         */

    }, {
        key: 'render',
        value: function render(layers) {
            if (this.hudScene) {
                this.display.clearScreen(layers[1]);
            }

            // render-loop: put render-related stuff here
            if (this.map) {
                this.drawMap(layers[0]);
                this.drawMapObjects(layers[1]);
            }

            this.drawSceneObjects(layers[1]);
        }

        /**
         * Notify the scene of an event
         * 
         * @param {string} eventType The type of event to trigger.
         * @param {any} data The data (if any) associated with the event.
         */

    }, {
        key: 'notify',
        value: function notify(eventType, data) {
            __WEBPACK_IMPORTED_MODULE_6_Notification_NotificationManager__["a" /* default */].notify(eventType, data);
        }

        /**
         * Subscribe to a list of events
         * 
         * @param {String} eventList The list of events to subscribe to as a space separated string.
         */

    }, {
        key: 'bindEvents',
        value: function bindEvents(eventList) {
            __WEBPACK_IMPORTED_MODULE_6_Notification_NotificationManager__["a" /* default */].listen(eventList, this.onEvent.bind(this));
        }

        /**
         * onEvent is called once one of the registered events has been triggered
         */

    }, {
        key: 'onEvent',
        value: function onEvent() {}

        /**
         * Attach the specified display to the scene
         * 
         * @param {Display} display The display to attach the scene to.
         */

    }, {
        key: 'setDisplay',
        value: function setDisplay(display) {
            this.display = display;

            if (this.hudScene) {
                this.hudScene.setDisplay(display);
            }
        }

        /**
         * Apply the specified effect to the scene
         * 
         * @param {String} fxName The name of the effect to apply.
         * @param {Object} options The options of the effect.
         */

    }, {
        key: 'animate',
        value: function animate(fxName, options) {
            return this.display.animate(fxName, options, this);
        }

        /**
         * Remove the specified object from the scene
         * 
         * @param {GfxObject} gfxObject the object to remove from the scene
         */

    }, {
        key: 'removeObject',
        value: function removeObject(gfxObject) {
            var layer = this.layers[0],
                foundIndex = layer.indexOf(gfxObject);

            if (foundIndex > -1) {
                layer.splice(foundIndex, 1);
            }
        }
    }]);

    return Scene;
}();

;

/* harmony default export */ __webpack_exports__["a"] = (Scene);

/***/ }),
/* 39 */,
/* 40 */
/* unknown exports provided */
/* exports used: default */
/*!*********************************************!*\
  !*** ./js/lib/fpscounter/fpscounter.min.js ***!
  \*********************************************/
/***/ (function(module, exports) {

/*
 * fpscounter.js
 *
 * A simple in-browser fps counter, suitable for using with a bookmarklet
 * 
 * @author Pete Otaqui <pete@otaqui.com>
 * @url https://github.com/pete-otaqui/fpscounter
 * @license Creative Commons Attribution 3.0 Unported
 * @license http://creativecommons.org/licenses/by/3.0/deed.en_GB
*/
(function (global) {
    global.fpscounter = function (options) {
        // late binding for options > global.fpscounter_options > defaults
        options = options || {};
        var globals = global.fpscounter_options || {};

        var defaults = {
            remove_on_click: false,
            width: 100,
            height: 50
        };
        Object.keys(defaults).forEach(function (key) {
            options[key] = options[key] || globals[key] || defaults[key];
        });

        // get the width height for repeated use
        var canvas_w = options.width,
            canvas_h = options.height;

        // create the new dom elements, the canvas context, the style
        var ele = document.createElement('div');
        ele.className = 'fpscounter';
        ele.style.width = canvas_w + 'px';
        ele.style.height = canvas_h + 'px';

        var canvas = document.createElement('canvas');
        canvas.className = 'fpscounter-canvas';
        canvas.width = canvas_w;
        canvas.height = canvas_h;

        var context = canvas.getContext('2d'),
            text_fps_x = canvas_w / 2 - 14,
            text_fps_y = canvas_h / 2 + 10,
            text_max_x = 4,
            text_max_y = 8,
            text_min_x = 4,
            text_min_y = canvas_h - 4,
            fps_font = 'bold 30px Monospace',
            min_max_font = '10px Monospace';

        var gradient_fill = context.createLinearGradient(0, 0, 0, canvas_h);
        gradient_fill.addColorStop(0, '#001133');
        gradient_fill.addColorStop(1, '#112288');

        var gradient_line = context.createLinearGradient(0, 0, 0, canvas_h);
        gradient_line.addColorStop(0, '#2848d8');
        gradient_line.addColorStop(1, '#3366ff');

        context.lineWidth = 1;
        context.strokeStyle = gradient_line;

        var style = document.createElement('style');
        style.textContent = '.fpscounter { ' + 'position: fixed; ' + 'top: 0; ' + 'right: 0; ' + 'background-color: #000; ' + 'color: #fff; ' + 'font-size: 30px; ' + 'font-family: monospace;' + 'z-index: 999999' + '}';

        ele.appendChild(canvas);
        document.body.appendChild(ele);
        document.querySelector('head').appendChild(style);

        // initialize some timing and history variables
        var t_pre,
            t_now,
            u_pre,
            u_lim,
            h_arr = [],
            h_len = canvas_w,
            raf_request,
            raf_running;

        // we won't update anything more often than this many milliseconds
        u_lim = 100;

        // reduce an array of values to it members bounding values in the form [min, max]
        function h_reduce(memo, item) {
            if (!memo[0] || item < memo[0]) memo[0] = item;
            if (!memo[1] || item > memo[1]) memo[1] = item;
            return memo;
        }

        function checkfps() {
            var fps, c_min_max, c_min, c_max, c_delta, first_point, xy;
            raf_running = true;
            t_now = Date.now();
            // this is where we throttle displayed updates
            if (t_now >= u_pre + u_lim) {

                // get the fps for the history
                fps = Math.min(60, Math.round(1 / (t_now - t_pre) * 1000));
                h_arr.unshift(fps);

                // do required math
                context.clearRect(0, 0, canvas_w, canvas_h);
                if (h_arr.length > h_len) h_arr.pop();
                c_min_max = h_arr.reduce(h_reduce, []);
                c_min = c_min_max[0];
                c_max = c_min_max[1];
                c_delta = c_max - c_min;

                // draw the line graph
                context.fillStyle = gradient_fill;
                context.beginPath();
                // first_point = fpsToPoint(0, h_arr[0], c_min, c_delta);
                context.moveTo(canvas_w, canvas_h);
                h_arr.forEach(function (fps_val, index) {
                    xy = fpsToPoint(index, fps_val, c_min, c_delta);
                    context.lineTo(xy[0], xy[1]);
                });
                context.lineTo(xy[0], canvas_h);
                context.lineTo(canvas_w, canvas_h);
                context.fill();
                context.stroke();

                context.fillStyle = '#fff';
                // write the main FPS text
                context.font = fps_font;
                context.fillText(fps, text_fps_x, text_fps_y);

                // write the limit texts
                context.font = min_max_font;
                context.fillText(c_min, text_min_x, text_min_y);
                context.fillText(c_max, text_max_x, text_max_y);

                // set the "update time" counter
                u_pre = t_now;
            }

            // set the "frame time" counter
            t_pre = t_now;

            // request another update later
            if (raf_running) {
                raf_request = requestAnimationFrame(checkfps);
            }
        }

        // convert an fps value to an [x,y] array
        function fpsToPoint(index, fps_val, min, delta) {
            return [canvas_w - index, canvas_h - canvas_h * (fps_val - min) / delta];
        }

        // add removal event
        ele.addEventListener('click', function () {
            raf_running = !raf_running;
            if (raf_running) {
                start();
            } else {
                cancelAnimationFrame(raf_request);
                if (options.remove_on_click) {
                    document.body.removeChild(ele);
                }
            }
        });

        // start
        function start() {
            t_pre = Date.now();
            h_arr = [];
            u_pre = t_pre;
            checkfps();
        }

        start();
    };

    // lots of negatives here because the assumption is we should start
    if (!global.fpscounter_options || global.fpscounter_options.auto_start !== false) {
        // global.fpscounter();
    }
})(window);

/*** EXPORTS FROM exports-loader ***/
module.exports = fpscounter;

/***/ }),
/* 41 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 42 */
/* unknown exports provided */
/* exports used: default */
/*!**************************************!*\
  !*** ./~/web-audio-daw/build/wad.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return (root['Wad'] = factory());
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['Wad'] = factory();
  }
}(this, function () {

(function(window){

  var WORKER_PATH = 'recorderWorker.js';

  var Recorder = function(source, cfg){
    var config = cfg || {};
    var bufferLen = config.bufferLen || 4096;
    var numChannels = config.numChannels || 2;
    this.context = source.context;
    this.node = (this.context.createScriptProcessor ||
                 this.context.createJavaScriptNode).call(this.context,
                 bufferLen, numChannels, numChannels);
    var worker = new Worker(config.workerPath || WORKER_PATH);
    worker.postMessage({
      command: 'init',
      config: {
        sampleRate: this.context.sampleRate,
        numChannels: numChannels
      }
    });
    var recording = false,
      currCallback;

    this.node.onaudioprocess = function(e){
      if (!recording) return;
      var buffer = [];
      for (var channel = 0; channel < numChannels; channel++){
          buffer.push(e.inputBuffer.getChannelData(channel));
      }
      worker.postMessage({
        command: 'record',
        buffer: buffer
      });
    }

    this.configure = function(cfg){
      for (var prop in cfg){
        if (cfg.hasOwnProperty(prop)){
          config[prop] = cfg[prop];
        }
      }
    }

    this.record = function(){
      recording = true;
    }

    this.stop = function(){
      recording = false;
    }

    this.clear = function(){
      worker.postMessage({ command: 'clear' });
    }

    this.getBuffer = function(cb) {
      currCallback = cb || config.callback;
      worker.postMessage({ command: 'getBuffer' })
    }

    this.exportWAV = function(cb, type){
      currCallback = cb || config.callback;
      type = type || config.type || 'audio/wav';
      if (!currCallback) throw new Error('Callback not set');
      worker.postMessage({
        command: 'exportWAV',
        type: type
      });
    }

    worker.onmessage = function(e){
      var blob = e.data;
      currCallback(blob);
    }

    source.connect(this.node);
    this.node.connect(this.context.destination);    //this should not be necessary
  };

  Recorder.forceDownload = function(blob, filename){
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = filename || 'output.wav';
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
  }

  window.Recorder = Recorder;

})(window);;/*
    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
    is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function(window) {
    var userContext,
        userInstance,
        pipe = function(param, val) {
            param.value = val;
        },
        Super = Object.create(null, {
            activate: {
                writable: true,
                value: function(doActivate) {
                    if (doActivate) {
                        this.input.disconnect();
                        this.input.connect(this.activateNode);
                        if (this.activateCallback) {
                            this.activateCallback(doActivate);
                        }
                    } else {
                        this.input.disconnect();
                        this.input.connect(this.output);
                    }
                }
            },
            bypass: {
                get: function() {
                    return this._bypass;
                },
                set: function(value) {
                    if (this._lastBypassValue === value) {
                        return;
                    }
                    this._bypass = value;
                    this.activate(!value);
                    this._lastBypassValue = value;
                }
            },
            connect: {
                value: function(target) {
                    this.output.connect(target);
                }
            },
            disconnect: {
                value: function(target) {
                    this.output.disconnect(target);
                }
            },
            connectInOrder: {
                value: function(nodeArray) {
                    var i = nodeArray.length - 1;
                    while (i--) {
                        if (!nodeArray[i].connect) {
                            return console.error("AudioNode.connectInOrder: TypeError: Not an AudioNode.", nodeArray[i]);
                        }
                        if (nodeArray[i + 1].input) {
                            nodeArray[i].connect(nodeArray[i + 1].input);
                        } else {
                            nodeArray[i].connect(nodeArray[i + 1]);
                        }
                    }
                }
            },
            getDefaults: {
                value: function() {
                    var result = {};
                    for (var key in this.defaults) {
                        result[key] = this.defaults[key].value;
                    }
                    return result;
                }
            },
            automate: {
                value: function(property, value, duration, startTime) {
                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,
                        dur = duration ? ~~(duration / 1000) : 0,
                        _is = this.defaults[property],
                        param = this[property],
                        method;

                    if (param) {
                        if (_is.automatable) {
                            if (!duration) {
                                method = "setValueAtTime";
                            } else {
                                method = "linearRampToValueAtTime";
                                param.cancelScheduledValues(start);
                                param.setValueAtTime(param.value, start);
                            }
                            param[method](value, dur + start);
                        } else {
                            param = value;
                        }
                    } else {
                        console.error("Invalid Property for " + this.name);
                    }
                }
            }
        }),
        FLOAT = "float",
        BOOLEAN = "boolean",
        STRING = "string",
        INT = "int";

    if (typeof module !== "undefined" && module.exports) {
        module.exports = Tuna;
    } else if (true) {
        window.define("Tuna", definition);
    } else {
        window.Tuna = Tuna;
    }

    function definition() {
        return Tuna;
    }

    function Tuna(context) {
        if (!(this instanceof Tuna)) {
            return new Tuna(context);
        }
        if (!window.AudioContext) {
            window.AudioContext = window.webkitAudioContext;
        }
        if (!context) {
            console.log("tuna.js: Missing audio context! Creating a new context for you.");
            context = window.AudioContext && (new window.AudioContext());
        }
        if (!context) {
            throw new Error("Tuna cannot initialize because this environment does not support web audio.");
        }
        connectify(context);
        userContext = context;
        userInstance = this;
    }

    function connectify(context) {
        if (context.__connectified__ === true) return;

        var gain = context.createGain(),
            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),
            oconnect = proto.connect;

        proto.connect = shimConnect;
        context.__connectified__ = true; // Prevent overriding connect more than once

        function shimConnect() {
            var node = Array.prototype.shift.apply(arguments);
            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);
            arguments = Array.prototype.slice.call(arguments);
            arguments.unshift(node);
            oconnect.apply(this, arguments);
            return node;
        }
    }

    function dbToWAVolume(db) {
        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);
    }

    function fmod(x, y) {
        // http://kevin.vanzonneveld.net
        // *     example 1: fmod(5.7, 1.3);
        // *     returns 1: 0.5
        var tmp, tmp2, p = 0,
            pY = 0,
            l = 0.0,
            l2 = 0.0;

        tmp = x.toExponential().match(/^.\.?(.*)e(.+)$/);
        p = parseInt(tmp[2], 10) - (tmp[1] + "").length;
        tmp = y.toExponential().match(/^.\.?(.*)e(.+)$/);
        pY = parseInt(tmp[2], 10) - (tmp[1] + "").length;

        if (pY > p) {
            p = pY;
        }

        tmp2 = (x % y);

        if (p < -100 || p > 20) {
            // toFixed will give an out of bound error so we fix it like this:
            l = Math.round(Math.log(tmp2) / Math.log(10));
            l2 = Math.pow(10, l);

            return (tmp2 / l2).toFixed(l - p) * l2;
        } else {
            return parseFloat(tmp2.toFixed(-p));
        }
    }

    function sign(x) {
        if (x === 0) {
            return 1;
        } else {
            return Math.abs(x) / x;
        }
    }

    function tanh(n) {
        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));
    }

    function initValue(userVal, defaultVal) {
        return userVal === undefined ? defaultVal : userVal;
    }

    Tuna.prototype.Bitcrusher = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;

        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);
        this.output = userContext.createGain();

        this.activateNode.connect(this.processor);
        this.processor.connect(this.output);

        var phaser = 0,
            last = 0,
            input, output, step, i, length;
        this.processor.onaudioprocess = function(e) {
            input = e.inputBuffer.getChannelData(0),
            output = e.outputBuffer.getChannelData(0),
            step = Math.pow(1 / 2, this.bits);
            length = input.length;
            for (i = 0; i < length; i++) {
                phaser += this.normfreq;
                if (phaser >= 1.0) {
                    phaser -= 1.0;
                    last = step * Math.floor(input[i] / step + 0.5);
                }
                output[i] = last;
            }
        };

        this.bits = properties.bits || this.defaults.bits.value;
        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {
        name: {
            value: "Bitcrusher"
        },
        defaults: {
            writable: true,
            value: {
                bits: {
                    value: 4,
                    min: 1,
                    max: 16,
                    automatable: false,
                    type: INT
                },
                bufferSize: {
                    value: 4096,
                    min: 256,
                    max: 16384,
                    automatable: false,
                    type: INT
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                },
                normfreq: {
                    value: 0.1,
                    min: 0.0001,
                    max: 1.0,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        bits: {
            enumerable: true,
            get: function() {
                return this.processor.bits;
            },
            set: function(value) {
                this.processor.bits = value;
            }
        },
        normfreq: {
            enumerable: true,
            get: function() {
                return this.processor.normfreq;
            },
            set: function(value) {
                this.processor.normfreq = value;
            }
        }
    });

    Tuna.prototype.Cabinet = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.convolver = this.newConvolver(properties.impulsePath ||
            "../impulses/impulse_guitar.wav");
        this.makeupNode = userContext.createGain();
        this.output = userContext.createGain();

        this.activateNode.connect(this.convolver.input);
        this.convolver.output.connect(this.makeupNode);
        this.makeupNode.connect(this.output);

        this.makeupGain = initValue(properties.makeupGain, this.defaults
            .makeupGain);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Cabinet.prototype = Object.create(Super, {
        name: {
            value: "Cabinet"
        },
        defaults: {
            writable: true,
            value: {
                makeupGain: {
                    value: 1,
                    min: 0,
                    max: 20,
                    automatable: true,
                    type: FLOAT
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                }
            }
        },
        makeupGain: {
            enumerable: true,
            get: function() {
                return this.makeupNode.gain;
            },
            set: function(value) {
                this.makeupNode.gain.value = value;
            }
        },
        newConvolver: {
            value: function(impulsePath) {
                return new userInstance.Convolver({
                    impulse: impulsePath,
                    dryLevel: 0,
                    wetLevel: 1
                });
            }
        }
    });

    Tuna.prototype.Chorus = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.attenuator = this.activateNode = userContext.createGain();
        this.splitter = userContext.createChannelSplitter(2);
        this.delayL = userContext.createDelay();
        this.delayR = userContext.createDelay();
        this.feedbackGainNodeLR = userContext.createGain();
        this.feedbackGainNodeRL = userContext.createGain();
        this.merger = userContext.createChannelMerger(2);
        this.output = userContext.createGain();

        this.lfoL = new userInstance.LFO({
            target: this.delayL.delayTime,
            callback: pipe
        });
        this.lfoR = new userInstance.LFO({
            target: this.delayR.delayTime,
            callback: pipe
        });

        this.input.connect(this.attenuator);
        this.attenuator.connect(this.output);
        this.attenuator.connect(this.splitter);
        this.splitter.connect(this.delayL, 0);
        this.splitter.connect(this.delayR, 1);
        this.delayL.connect(this.feedbackGainNodeLR);
        this.delayR.connect(this.feedbackGainNodeRL);
        this.feedbackGainNodeLR.connect(this.delayR);
        this.feedbackGainNodeRL.connect(this.delayL);
        this.delayL.connect(this.merger, 0, 0);
        this.delayR.connect(this.merger, 0, 1);
        this.merger.connect(this.output);

        this.feedback = initValue(properties.feedback, this.defaults.feedback
            .value);
        this.rate = initValue(properties.rate, this.defaults.rate.value);
        this.delay = initValue(properties.delay, this.defaults.delay.value);
        this.depth = initValue(properties.depth, this.defaults.depth.value);
        this.lfoR.phase = Math.PI / 2;
        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))
        this.lfoL.activate(true);
        this.lfoR.activate(true);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Chorus.prototype = Object.create(Super, {
        name: {
            value: "Chorus"
        },
        defaults: {
            writable: true,
            value: {
                feedback: {
                    value: 0.4,
                    min: 0,
                    max: 0.95,
                    automatable: false,
                    type: FLOAT
                },
                delay: {
                    value: 0.0045,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                depth: {
                    value: 0.7,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                rate: {
                    value: 1.5,
                    min: 0,
                    max: 8,
                    automatable: false,
                    type: FLOAT
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                }
            }
        },
        delay: {
            enumerable: true,
            get: function() {
                return this._delay;
            },
            set: function(value) {
                this._delay = 0.0002 * (Math.pow(10, value) * 2);
                this.lfoL.offset = this._delay;
                this.lfoR.offset = this._delay;
                this._depth = this._depth;
            }
        },
        depth: {
            enumerable: true,
            get: function() {
                return this._depth;
            },
            set: function(value) {
                this._depth = value;
                this.lfoL.oscillation = this._depth * this._delay;
                this.lfoR.oscillation = this._depth * this._delay;
            }
        },
        feedback: {
            enumerable: true,
            get: function() {
                return this._feedback;
            },
            set: function(value) {
                this._feedback = value;
                this.feedbackGainNodeLR.gain.value = this._feedback;
                this.feedbackGainNodeRL.gain.value = this._feedback;
            }
        },
        rate: {
            enumerable: true,
            get: function() {
                return this._rate;
            },
            set: function(value) {
                this._rate = value;
                this.lfoL.frequency = this._rate;
                this.lfoR.frequency = this._rate;
            }
        }
    });

    Tuna.prototype.Compressor = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.compNode = this.activateNode = userContext.createDynamicsCompressor();
        this.makeupNode = userContext.createGain();
        this.output = userContext.createGain();

        this.compNode.connect(this.makeupNode);
        this.makeupNode.connect(this.output);

        this.automakeup = initValue(properties.automakeup, this.defaults
            .automakeup
            .value);
        this.makeupGain = properties.makeupGain || this.defaults.makeupGain
            .value;
        this.threshold = initValue(properties.threshold, this.defaults.threshold
            .value);
        this.release = properties.release || this.defaults.release.value;
        this.attack = initValue(properties.attack, this.defaults.attack
            .value);
        this.ratio = properties.ratio || this.defaults.ratio.value;
        this.knee = initValue(properties.knee, this.defaults.knee.value);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Compressor.prototype = Object.create(Super, {
        name: {
            value: "Compressor"
        },
        defaults: {
            writable: true,
            value: {
                threshold: {
                    value: -20,
                    min: -60,
                    max: 0,
                    automatable: true,
                    type: FLOAT
                },
                release: {
                    value: 250,
                    min: 10,
                    max: 2000,
                    automatable: true,
                    type: FLOAT
                },
                makeupGain: {
                    value: 1,
                    min: 1,
                    max: 100,
                    automatable: true,
                    type: FLOAT
                },
                attack: {
                    value: 1,
                    min: 0,
                    max: 1000,
                    automatable: true,
                    type: FLOAT
                },
                ratio: {
                    value: 4,
                    min: 1,
                    max: 50,
                    automatable: true,
                    type: FLOAT
                },
                knee: {
                    value: 5,
                    min: 0,
                    max: 40,
                    automatable: true,
                    type: FLOAT
                },
                automakeup: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                }
            }
        },
        computeMakeup: {
            value: function() {
                var magicCoefficient = 4,
                    // raise me if the output is too hot
                    c = this.compNode;
                return -(c.threshold.value - c.threshold.value /
                        c.ratio.value) /
                    magicCoefficient;
            }
        },
        automakeup: {
            enumerable: true,
            get: function() {
                return this._automakeup;
            },
            set: function(value) {
                this._automakeup = value;
                if (this._automakeup) this.makeupGain = this.computeMakeup();
            }
        },
        threshold: {
            enumerable: true,
            get: function() {
                return this.compNode.threshold;
            },
            set: function(value) {
                this.compNode.threshold.value = value;
                if (this._automakeup) this.makeupGain = this.computeMakeup();
            }
        },
        ratio: {
            enumerable: true,
            get: function() {
                return this.compNode.ratio;
            },
            set: function(value) {
                this.compNode.ratio.value = value;
                if (this._automakeup) this.makeupGain = this.computeMakeup();
            }
        },
        knee: {
            enumerable: true,
            get: function() {
                return this.compNode.knee;
            },
            set: function(value) {
                this.compNode.knee.value = value;
                if (this._automakeup) this.makeupGain = this.computeMakeup();
            }
        },
        attack: {
            enumerable: true,
            get: function() {
                return this.compNode.attack;
            },
            set: function(value) {
                this.compNode.attack.value = value / 1000;
            }
        },
        release: {
            enumerable: true,
            get: function() {
                return this.compNode.release;
            },
            set: function(value) {
                this.compNode.release = value / 1000;
            }
        },
        makeupGain: {
            enumerable: true,
            get: function() {
                return this.makeupNode.gain;
            },
            set: function(value) {
                this.makeupNode.gain.value = dbToWAVolume(value);
            }
        }
    });

    Tuna.prototype.Convolver = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.convolver = userContext.createConvolver();
        this.dry = userContext.createGain();
        this.filterLow = userContext.createBiquadFilter();
        this.filterHigh = userContext.createBiquadFilter();
        this.wet = userContext.createGain();
        this.output = userContext.createGain();

        this.activateNode.connect(this.filterLow);
        this.activateNode.connect(this.dry);
        this.filterLow.connect(this.filterHigh);
        this.filterHigh.connect(this.convolver);
        this.convolver.connect(this.wet);
        this.wet.connect(this.output);
        this.dry.connect(this.output);

        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel
            .value);
        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel
            .value);
        this.highCut = properties.highCut || this.defaults.highCut.value;
        this.buffer = properties.impulse ||
            "../impulses/ir_rev_short.wav";
        this.lowCut = properties.lowCut || this.defaults.lowCut.value;
        this.level = initValue(properties.level, this.defaults.level.value);
        this.filterHigh.type = "lowpass";
        this.filterLow.type = "highpass";
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Convolver.prototype = Object.create(Super, {
        name: {
            value: "Convolver"
        },
        defaults: {
            writable: true,
            value: {
                highCut: {
                    value: 22050,
                    min: 20,
                    max: 22050,
                    automatable: true,
                    type: FLOAT
                },
                lowCut: {
                    value: 20,
                    min: 20,
                    max: 22050,
                    automatable: true,
                    type: FLOAT
                },
                dryLevel: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT
                },
                wetLevel: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT
                },
                level: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT
                }
            }
        },
        lowCut: {
            get: function() {
                return this.filterLow.frequency;
            },
            set: function(value) {
                this.filterLow.frequency.value = value;
            }
        },
        highCut: {
            get: function() {
                return this.filterHigh.frequency;
            },
            set: function(value) {
                this.filterHigh.frequency.value = value;
            }
        },
        level: {
            get: function() {
                return this.output.gain;
            },
            set: function(value) {
                this.output.gain.value = value;
            }
        },
        dryLevel: {
            get: function() {
                return this.dry.gain
            },
            set: function(value) {
                this.dry.gain.value = value;
            }
        },
        wetLevel: {
            get: function() {
                return this.wet.gain;
            },
            set: function(value) {
                this.wet.gain.value = value;
            }
        },
        buffer: {
            enumerable: false,
            get: function() {
                return this.convolver.buffer;
            },
            set: function(impulse) {
                var convolver = this.convolver,
                    xhr = new XMLHttpRequest();
                if (!impulse) {
                    console.log("Tuna.Convolver.setBuffer: Missing impulse path!");
                    return;
                }
                xhr.open("GET", impulse, true);
                xhr.responseType = "arraybuffer";
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {
                            userContext.decodeAudioData(xhr.response, function(buffer) {
                                convolver.buffer = buffer;
                            }, function(e) {
                                if (e) console.log("Tuna.Convolver.setBuffer: Error decoding data" + e);
                            });
                        }
                    }
                };
                xhr.send(null);
            }
        }
    });

    Tuna.prototype.Delay = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.dry = userContext.createGain();
        this.wet = userContext.createGain();
        this.filter = userContext.createBiquadFilter();
        this.delay = userContext.createDelay();
        this.feedbackNode = userContext.createGain();
        this.output = userContext.createGain();

        this.activateNode.connect(this.delay);
        this.activateNode.connect(this.dry);
        this.delay.connect(this.filter);
        this.filter.connect(this.feedbackNode);
        this.feedbackNode.connect(this.delay);
        this.feedbackNode.connect(this.wet);
        this.wet.connect(this.output);
        this.dry.connect(this.output);

        this.delayTime = properties.delayTime || this.defaults.delayTime.value;
        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);
        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);
        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);
        this.cutoff = properties.cutoff || this.defaults.cutoff.value;
        this.filter.type = "lowpass";
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Delay.prototype = Object.create(Super, {
        name: {
            value: "Delay"
        },
        defaults: {
            writable: true,
            value: {
                delayTime: {
                    value: 100,
                    min: 20,
                    max: 1000,
                    automatable: false,
                    type: FLOAT
                },
                feedback: {
                    value: 0.45,
                    min: 0,
                    max: 0.9,
                    automatable: true,
                    type: FLOAT
                },
                cutoff: {
                    value: 20000,
                    min: 20,
                    max: 20000,
                    automatable: true,
                    type: FLOAT
                },
                wetLevel: {
                    value: 0.5,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT
                },
                dryLevel: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT
                }
            }
        },
        delayTime: {
            enumerable: true,
            get: function() {
                return this.delay.delayTime;
            },
            set: function(value) {
                this.delay.delayTime.value = value / 1000;
            }
        },
        wetLevel: {
            enumerable: true,
            get: function() {
                return this.wet.gain;
            },
            set: function(value) {
                this.wet.gain.value = value;
            }
        },
        dryLevel: {
            enumerable: true,
            get: function() {
                return this.dry.gain;
            },
            set: function(value) {
                this.dry.gain.value = value;
            }
        },
        feedback: {
            enumerable: true,
            get: function() {
                return this.feedbackNode.gain;
            },
            set: function(value) {
                this.feedbackNode.gain.value = value;
            }
        },
        cutoff: {
            enumerable: true,
            get: function() {
                return this.filter.frequency;
            },
            set: function(value) {
                this.filter.frequency.value = value;
            }
        }
    });

    Tuna.prototype.Filter = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.filter = userContext.createBiquadFilter();
        this.output = userContext.createGain();

        this.activateNode.connect(this.filter);
        this.filter.connect(this.output);

        this.frequency = properties.frequency || this.defaults.frequency
            .value;
        this.Q = properties.resonance || this.defaults.Q.value;
        this.filterType = initValue(properties.filterType, this.defaults
            .filterType
            .value);
        this.gain = initValue(properties.gain, this.defaults.gain.value);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Filter.prototype = Object.create(Super, {
        name: {
            value: "Filter"
        },
        defaults: {
            writable: true,
            value: {
                frequency: {
                    value: 800,
                    min: 20,
                    max: 22050,
                    automatable: true,
                    type: FLOAT
                },
                Q: {
                    value: 1,
                    min: 0.001,
                    max: 100,
                    automatable: true,
                    type: FLOAT
                },
                gain: {
                    value: 0,
                    min: -40,
                    max: 40,
                    automatable: true,
                    type: FLOAT
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                },
                filterType: {
                    value: "lowpass",
                    automatable: false,
                    type: STRING
                }
            }
        },
        filterType: {
            enumerable: true,
            get: function() {
                return this.filter.type;
            },
            set: function(value) {
                this.filter.type = value;
            }
        },
        Q: {
            enumerable: true,
            get: function() {
                return this.filter.Q;
            },
            set: function(value) {
                this.filter.Q.value = value;
            }
        },
        gain: {
            enumerable: true,
            get: function() {
                return this.filter.gain;
            },
            set: function(value) {
                this.filter.gain.value = value;
            }
        },
        frequency: {
            enumerable: true,
            get: function() {
                return this.filter.frequency;
            },
            set: function(value) {
                this.filter.frequency.value = value;
            }
        }
    });

    Tuna.prototype.MoogFilter = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.bufferSize = properties.bufferSize || this.defaults.bufferSize
            .value;

        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.processor = userContext.createScriptProcessor(this.bufferSize,
            1,
            1);
        this.output = userContext.createGain();

        this.activateNode.connect(this.processor);
        this.processor.connect(this.output);

        var in1, in2, in3, in4, out1, out2, out3, out4;
        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;
        var input, output, f, fb, i, length;
        this.processor.onaudioprocess = function(e) {
            input = e.inputBuffer.getChannelData(0),
                output = e.outputBuffer.getChannelData(0),
                f = this.cutoff * 1.16,
                inputFactor = 0.35013 * (f * f) * (f * f);
            fb = this.resonance * (1.0 - 0.15 * f * f);
            length = input.length;
            for (i = 0; i < length; i++) {
                input[i] -= out4 * fb;
                input[i] *= inputFactor;
                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1
                in1 = input[i];
                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2
                in2 = out1;
                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3
                in3 = out2;
                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4
                in4 = out3;
                output[i] = out4;
            }
        };

        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff
            .value);
        this.resonance = initValue(properties.resonance, this.defaults.resonance
            .value);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {
        name: {
            value: "MoogFilter"
        },
        defaults: {
            writable: true,
            value: {
                bufferSize: {
                    value: 4096,
                    min: 256,
                    max: 16384,
                    automatable: false,
                    type: INT
                },
                bypass: {
                    value: false,
                    automatable: false,
                    type: BOOLEAN
                },
                cutoff: {
                    value: 0.065,
                    min: 0.0001,
                    max: 1.0,
                    automatable: false,
                    type: FLOAT
                },
                resonance: {
                    value: 3.5,
                    min: 0.0,
                    max: 4.0,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        cutoff: {
            enumerable: true,
            get: function() {
                return this.processor.cutoff;
            },
            set: function(value) {
                this.processor.cutoff = value;
            }
        },
        resonance: {
            enumerable: true,
            get: function() {
                return this.processor.resonance;
            },
            set: function(value) {
                this.processor.resonance = value;
            }
        }
    });

    Tuna.prototype.Overdrive = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.inputDrive = userContext.createGain();
        this.waveshaper = userContext.createWaveShaper();
        this.outputDrive = userContext.createGain();
        this.output = userContext.createGain();

        this.activateNode.connect(this.inputDrive);
        this.inputDrive.connect(this.waveshaper);
        this.waveshaper.connect(this.outputDrive);
        this.outputDrive.connect(this.output);

        this.ws_table = new Float32Array(this.k_nSamples);
        this.drive = initValue(properties.drive, this.defaults.drive.value);
        this.outputGain = initValue(properties.outputGain, this.defaults
            .outputGain
            .value);
        this.curveAmount = initValue(properties.curveAmount, this.defaults
            .curveAmount
            .value);
        this.algorithmIndex = initValue(properties.algorithmIndex, this
            .defaults
            .algorithmIndex.value);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Overdrive.prototype = Object.create(Super, {
        name: {
            value: "Overdrive"
        },
        defaults: {
            writable: true,
            value: {
                drive: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT,
                    scaled: true
                },
                outputGain: {
                    value: 1,
                    min: 0,
                    max: 1,
                    automatable: true,
                    type: FLOAT,
                    scaled: true
                },
                curveAmount: {
                    value: 0.725,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                algorithmIndex: {
                    value: 0,
                    min: 0,
                    max: 5,
                    automatable: false,
                    type: INT
                }
            }
        },
        k_nSamples: {
            value: 8192
        },
        drive: {
            get: function() {
                return this.inputDrive.gain;
            },
            set: function(value) {
                this._drive = value;
            }
        },
        curveAmount: {
            get: function() {
                return this._curveAmount;
            },
            set: function(value) {
                this._curveAmount = value;
                if (this._algorithmIndex === undefined) {
                    this._algorithmIndex = 0;
                }
                this.waveshaperAlgorithms[this._algorithmIndex]
                    (this._curveAmount,
                        this.k_nSamples, this.ws_table);
                this.waveshaper.curve = this.ws_table;
            }
        },
        outputGain: {
            get: function() {
                return this.outputDrive.gain;
            },
            set: function(value) {
                this._outputGain = dbToWAVolume(value);
            }
        },
        algorithmIndex: {
            get: function() {
                return this._algorithmIndex;
            },
            set: function(value) {
                this._algorithmIndex = value;
                this.curveAmount = this._curveAmount;
            }
        },
        waveshaperAlgorithms: {
            value: [
                function(amount, n_samples, ws_table) {
                    amount = Math.min(amount, 0.9999);
                    var k = 2 * amount / (1 - amount),
                        i, x;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));
                    }
                },
                function(amount, n_samples, ws_table) {
                    var i, x, y;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;
                        ws_table[i] = tanh(y);
                    }
                },
                function(amount, n_samples, ws_table) {
                    var i, x, y, a = 1 - amount;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);
                        ws_table[i] = tanh(y * 2);
                    }
                },
                function(amount, n_samples, ws_table) {
                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        abx = Math.abs(x);
                        if (abx < a) y = abx;
                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));
                        else if (abx > 1) y = abx;
                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));
                    }
                },
                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive
                    var i, x;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        if (x < -0.08905) {
                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -
                                0.032847)) + 0.01;
                        } else if (x >= -0.08905 && x < 0.320018) {
                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;
                        } else {
                            ws_table[i] = 0.630035;
                        }
                    }
                },
                function(amount, n_samples, ws_table) {
                    var a = 2 + Math.round(amount * 14),
                        // we go from 2 to 16 bits, keep in mind for the UI
                        bits = Math.round(Math.pow(2, a - 1)),
                        // real number of quantization steps divided by 2
                        i, x;
                    for (i = 0; i < n_samples; i++) {
                        x = i * 2 / n_samples - 1;
                        ws_table[i] = Math.round(x * bits) / bits;
                    }
                }
            ]
        }
    });

    Tuna.prototype.Phaser = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.splitter = this.activateNode = userContext.createChannelSplitter(2);
        this.filtersL = [];
        this.filtersR = [];
        this.feedbackGainNodeL = userContext.createGain();
        this.feedbackGainNodeR = userContext.createGain();
        this.merger = userContext.createChannelMerger(2);
        this.filteredSignal = userContext.createGain();
        this.output = userContext.createGain();
        this.lfoL = new userInstance.LFO({
            target: this.filtersL,
            callback: this.callback
        });
        this.lfoR = new userInstance.LFO({
            target: this.filtersR,
            callback: this.callback
        });

        var i = this.stage;
        while (i--) {
            this.filtersL[i] = userContext.createBiquadFilter();
            this.filtersR[i] = userContext.createBiquadFilter();
            this.filtersL[i].type = "allpass";
            this.filtersR[i].type = "allpass";
        }
        this.input.connect(this.splitter);
        this.input.connect(this.output);
        this.splitter.connect(this.filtersL[0], 0, 0);
        this.splitter.connect(this.filtersR[0], 1, 0);
        this.connectInOrder(this.filtersL);
        this.connectInOrder(this.filtersR);
        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);
        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);
        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);
        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);
        this.feedbackGainNodeL.connect(this.filtersL[0]);
        this.feedbackGainNodeR.connect(this.filtersR[0]);
        this.merger.connect(this.output);

        this.rate = initValue(properties.rate, this.defaults.rate.value);
        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;
        this.depth = initValue(properties.depth, this.defaults.depth.value);
        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);
        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);

        this.lfoL.activate(true);
        this.lfoR.activate(true);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Phaser.prototype = Object.create(Super, {
        name: {
            value: "Phaser"
        },
        stage: {
            value: 4
        },
        defaults: {
            writable: true,
            value: {
                rate: {
                    value: 0.1,
                    min: 0,
                    max: 8,
                    automatable: false,
                    type: FLOAT
                },
                depth: {
                    value: 0.6,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                feedback: {
                    value: 0.7,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                stereoPhase: {
                    value: 40,
                    min: 0,
                    max: 180,
                    automatable: false,
                    type: FLOAT
                },
                baseModulationFrequency: {
                    value: 700,
                    min: 500,
                    max: 1500,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        callback: {
            value: function(filters, value) {
                for (var stage = 0; stage < 4; stage++) {
                    filters[stage].frequency.value = value;
                }
            }
        },
        depth: {
            get: function() {
                return this._depth;
            },
            set: function(value) {
                this._depth = value;
                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;
                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;
            }
        },
        rate: {
            get: function() {
                return this._rate;
            },
            set: function(value) {
                this._rate = value;
                this.lfoL.frequency = this._rate;
                this.lfoR.frequency = this._rate;
            }
        },
        baseModulationFrequency: {
            enumerable: true,
            get: function() {
                return this._baseModulationFrequency;
            },
            set: function(value) {
                this._baseModulationFrequency = value;
                this.lfoL.offset = this._baseModulationFrequency;
                this.lfoR.offset = this._baseModulationFrequency;
                this._depth = this._depth;
            }
        },
        feedback: {
            get: function() {
                return this._feedback;
            },
            set: function(value) {
                this._feedback = value;
                this.feedbackGainNodeL.gain.value = this._feedback;
                this.feedbackGainNodeR.gain.value = this._feedback;
            }
        },
        stereoPhase: {
            get: function() {
                return this._stereoPhase;
            },
            set: function(value) {
                this._stereoPhase = value;
                var newPhase = this.lfoL._phase + this._stereoPhase *
                    Math.PI /
                    180;
                newPhase = fmod(newPhase, 2 * Math.PI);
                this.lfoR._phase = newPhase;
            }
        }
    });

    Tuna.prototype.PingPongDelay = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.wetLevel = userContext.createGain();
        this.stereoToMonoMix = userContext.createGain();
        this.feedbackLevel = userContext.createGain();
        this.output = userContext.createGain();
        this.delayLeft = userContext.createDelay();
        this.delayRight = userContext.createDelay();

        this.activateNode = userContext.createGain();
        this.splitter = userContext.createChannelSplitter(2);
        this.merger = userContext.createChannelMerger(2);

        this.activateNode.connect(this.splitter);
        this.splitter.connect(this.stereoToMonoMix, 0, 0);
        this.splitter.connect(this.stereoToMonoMix, 1, 0);
        this.stereoToMonoMix.gain.value = .5;
        this.stereoToMonoMix.connect(this.wetLevel);
        this.wetLevel.connect(this.delayLeft);
        this.feedbackLevel.connect(this.delayLeft);
        this.delayLeft.connect(this.delayRight);
        this.delayRight.connect(this.feedbackLevel);
        this.delayLeft.connect(this.merger, 0, 0);
        this.delayRight.connect(this.merger, 0, 1);
        this.merger.connect(this.output);
        this.activateNode.connect(this.output);

        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;
        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;
        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;
        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {
        name: {
            value: "PingPongDelay"
        },
        delayTimeLeft: {
            enumerable: true,
            get: function() {
                return this._delayTimeLeft;
            },
            set: function(value) {
                this._delayTimeLeft = value;
                this.delayLeft.delayTime.value = value / 1000;
            }
        },
        delayTimeRight: {
            enumerable: true,
            get: function() {
                return this._delayTimeRight;
            },
            set: function(value) {
                this._delayTimeRight = value;
                this.delayRight.delayTime.value = value / 1000;
            }
        },
        defaults: {
            writable: true,
            value: {
                delayTimeLeft: {
                    value: 200,
                    min: 1,
                    max: 10000,
                    automatable: false,
                    type: INT
                },
                delayTimeRight: {
                    value: 400,
                    min: 1,
                    max: 10000,
                    automatable: false,
                    type: INT
                },
                feedback: {
                    value: 0.3,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                wetLevel: {
                    value: 0.5,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                }
            }
        }
    });

    Tuna.prototype.Tremolo = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.splitter = this.activateNode = userContext.createChannelSplitter(
                2),
            this.amplitudeL = userContext.createGain(), this.amplitudeR =
            userContext.createGain(), this.merger = userContext.createChannelMerger(
                2), this.output = userContext.createGain();
        this.lfoL = new userInstance.LFO({
            target: this.amplitudeL.gain,
            callback: pipe
        });
        this.lfoR = new userInstance.LFO({
            target: this.amplitudeR.gain,
            callback: pipe
        });

        this.input.connect(this.splitter);
        this.splitter.connect(this.amplitudeL, 0);
        this.splitter.connect(this.amplitudeR, 1);
        this.amplitudeL.connect(this.merger, 0, 0);
        this.amplitudeR.connect(this.merger, 0, 1);
        this.merger.connect(this.output);

        this.rate = properties.rate || this.defaults.rate.value;
        this.intensity = initValue(properties.intensity, this.defaults.intensity
            .value);
        this.stereoPhase = initValue(properties.stereoPhase, this.defaults
            .stereoPhase
            .value);

        this.lfoL.offset = 1 - (this.intensity / 2);
        this.lfoR.offset = 1 - (this.intensity / 2);
        this.lfoL.phase = this.stereoPhase * Math.PI / 180;

        this.lfoL.activate(true);
        this.lfoR.activate(true);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.Tremolo.prototype = Object.create(Super, {
        name: {
            value: "Tremolo"
        },
        defaults: {
            writable: true,
            value: {
                intensity: {
                    value: 0.3,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                stereoPhase: {
                    value: 0,
                    min: 0,
                    max: 180,
                    automatable: false,
                    type: FLOAT
                },
                rate: {
                    value: 5,
                    min: 0.1,
                    max: 11,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        intensity: {
            enumerable: true,
            get: function() {
                return this._intensity;
            },
            set: function(value) {
                this._intensity = value;
                this.lfoL.offset = 1 - this._intensity / 2;
                this.lfoR.offset = 1 - this._intensity / 2;
                this.lfoL.oscillation = this._intensity;
                this.lfoR.oscillation = this._intensity;
            }
        },
        rate: {
            enumerable: true,
            get: function() {
                return this._rate;
            },
            set: function(value) {
                this._rate = value;
                this.lfoL.frequency = this._rate;
                this.lfoR.frequency = this._rate;
            }
        },
        stereoPhase: {
            enumerable: true,
            get: function() {
                return this._rate;
            },
            set: function(value) {
                this._stereoPhase = value;
                var newPhase = this.lfoL._phase + this._stereoPhase *
                    Math.PI /
                    180;
                newPhase = fmod(newPhase, 2 * Math.PI);
                this.lfoR.phase = newPhase;
            }
        }
    });

    Tuna.prototype.WahWah = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.activateNode = userContext.createGain();
        this.envelopeFollower = new userInstance.EnvelopeFollower({
            target: this,
            callback: function(context, value) {
                context.sweep = value;
            }
        });
        this.filterBp = userContext.createBiquadFilter();
        this.filterPeaking = userContext.createBiquadFilter();
        this.output = userContext.createGain();

        //Connect AudioNodes
        this.activateNode.connect(this.filterBp);
        this.filterBp.connect(this.filterPeaking);
        this.filterPeaking.connect(this.output);

        //Set Properties
        this.init();
        this.automode = initValue(properties.enableAutoMode, this.defaults
            .automode
            .value);
        this.resonance = properties.resonance || this.defaults.resonance
            .value;
        this.sensitivity = initValue(properties.sensitivity, this.defaults
            .sensitivity
            .value);
        this.baseFrequency = initValue(properties.baseFrequency, this.defaults
            .baseFrequency
            .value);
        this.excursionOctaves = properties.excursionOctaves || this.defaults
            .excursionOctaves
            .value;
        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);

        this.activateNode.gain.value = 2;
        this.envelopeFollower.activate(true);
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.WahWah.prototype = Object.create(Super, {
        name: {
            value: "WahWah"
        },
        defaults: {
            writable: true,
            value: {
                automode: {
                    value: true,
                    automatable: false,
                    type: BOOLEAN
                },
                baseFrequency: {
                    value: 0.5,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                excursionOctaves: {
                    value: 2,
                    min: 1,
                    max: 6,
                    automatable: false,
                    type: FLOAT
                },
                sweep: {
                    value: 0.2,
                    min: 0,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                },
                resonance: {
                    value: 10,
                    min: 1,
                    max: 100,
                    automatable: false,
                    type: FLOAT
                },
                sensitivity: {
                    value: 0.5,
                    min: -1,
                    max: 1,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        activateCallback: {
            value: function(value) {
                this.automode = value;
            }
        },
        automode: {
            get: function() {
                return this._automode;
            },
            set: function(value) {
                this._automode = value;
                if (value) {
                    this.activateNode.connect(this.envelopeFollower.input);
                    this.envelopeFollower.activate(true);
                } else {
                    this.envelopeFollower.activate(false);
                    this.activateNode.disconnect();
                    this.activateNode.connect(this.filterBp);
                }
            }
        },
        filterFreqTimeout: {
            value: 0
        },
        setFilterFreq: {
            value: function() {
                try {
                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;
                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;
                } catch (e) {
                    clearTimeout(this.filterFreqTimeout);
                    //put on the next cycle to let all init properties be set
                    this.filterFreqTimeout = setTimeout(function() {
                        this.setFilterFreq();
                    }.bind(this), 0);
                }
            }
        },
        sweep: {
            enumerable: true,
            get: function() {
                return this._sweep.value;
            },
            set: function(value) {
                this._sweep = Math.pow(value > 1 ? 1 : value <
                    0 ? 0 :
                    value,
                    this._sensitivity);
                this.setFilterFreq();
            }
        },
        baseFrequency: {
            enumerable: true,
            get: function() {
                return this._baseFrequency;
            },
            set: function(value) {
                this._baseFrequency = 50 * Math.pow(10, value *
                    2);
                this._excursionFrequency = Math.min(userContext
                    .sampleRate /
                    2,
                    this.baseFrequency * Math.pow(2, this._excursionOctaves)
                );
                this.setFilterFreq();
            }
        },
        excursionOctaves: {
            enumerable: true,
            get: function() {
                return this._excursionOctaves;
            },
            set: function(value) {
                this._excursionOctaves = value;
                this._excursionFrequency = Math.min(userContext
                    .sampleRate /
                    2,
                    this.baseFrequency * Math.pow(2, this._excursionOctaves)
                );
                this.setFilterFreq();
            }
        },
        sensitivity: {
            enumerable: true,
            get: function() {
                return this._sensitivity;
            },
            set: function(value) {
                this._sensitivity = Math.pow(10, value);
            }
        },
        resonance: {
            enumerable: true,
            get: function() {
                return this._resonance;
            },
            set: function(value) {
                this._resonance = value;
                this.filterPeaking.Q = this._resonance;
            }
        },
        init: {
            value: function() {
                this.output.gain.value = 1;
                this.filterPeaking.type = "peaking";
                this.filterBp.type = "bandpass";
                this.filterPeaking.frequency.value = 100;
                this.filterPeaking.gain.value = 20;
                this.filterPeaking.Q.value = 5;
                this.filterBp.frequency.value = 100;
                this.filterBp.Q.value = 1;
            }
        }
    });

    Tuna.prototype.EnvelopeFollower = function(properties) {
        if (!properties) {
            properties = this.getDefaults();
        }
        this.input = userContext.createGain();
        this.jsNode = this.output = userContext.createScriptProcessor(
            this.buffersize,
            1, 1);

        this.input.connect(this.output);

        this.attackTime = initValue(properties.attackTime, this.defaults
            .attackTime
            .value);
        this.releaseTime = initValue(properties.releaseTime, this.defaults
            .releaseTime
            .value);
        this._envelope = 0;
        this.target = properties.target || {};
        this.callback = properties.callback || function() {};
    };
    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {
        name: {
            value: "EnvelopeFollower"
        },
        defaults: {
            value: {
                attackTime: {
                    value: 0.003,
                    min: 0,
                    max: 0.5,
                    automatable: false,
                    type: FLOAT
                },
                releaseTime: {
                    value: 0.5,
                    min: 0,
                    max: 0.5,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        buffersize: {
            value: 256
        },
        envelope: {
            value: 0
        },
        sampleRate: {
            value: 44100
        },
        attackTime: {
            enumerable: true,
            get: function() {
                return this._attackTime;
            },
            set: function(value) {
                this._attackTime = value;
                this._attackC = Math.exp(-1 / this._attackTime *
                    this.sampleRate /
                    this.buffersize);
            }
        },
        releaseTime: {
            enumerable: true,
            get: function() {
                return this._releaseTime;
            },
            set: function(value) {
                this._releaseTime = value;
                this._releaseC = Math.exp(-1 / this._releaseTime *
                    this.sampleRate /
                    this.buffersize);
            }
        },
        callback: {
            get: function() {
                return this._callback;
            },
            set: function(value) {
                if (typeof value === "function") {
                    this._callback = value;
                } else {
                    console.error("tuna.js: " + this.name +
                        ": Callback must be a function!");
                }
            }
        },
        target: {
            get: function() {
                return this._target;
            },
            set: function(value) {
                this._target = value;
            }
        },
        activate: {
            value: function(doActivate) {
                this.activated = doActivate;
                if (doActivate) {
                    this.jsNode.connect(userContext.destination);
                    this.jsNode.onaudioprocess = this.returnCompute(
                        this);
                } else {
                    this.jsNode.disconnect();
                    this.jsNode.onaudioprocess = null;
                }
            }
        },
        returnCompute: {
            value: function(instance) {
                return function(event) {
                    instance.compute(event);
                };
            }
        },
        compute: {
            value: function(event) {
                var count = event.inputBuffer.getChannelData(0)
                    .length,
                    channels = event.inputBuffer.numberOfChannels,
                    current, chan, rms, i;
                chan = rms = i = 0;
                if (channels > 1) { //need to mixdown
                    for (i = 0; i < count; ++i) {
                        for (; chan < channels; ++chan) {
                            current = event.inputBuffer.getChannelData(chan)[i];
                            rms += (current * current) / channels;
                        }
                    }
                } else {
                    for (i = 0; i < count; ++i) {
                        current = event.inputBuffer.getChannelData(0)[i];
                        rms += (current * current);
                    }
                }
                rms = Math.sqrt(rms);

                if (this._envelope < rms) {
                    this._envelope *= this._attackC;
                    this._envelope += (1 - this._attackC) * rms;
                } else {
                    this._envelope *= this._releaseC;
                    this._envelope += (1 - this._releaseC) *
                        rms;
                }
                this._callback(this._target, this._envelope);
            }
        }
    });

    Tuna.prototype.LFO = function(properties) {
        //Instantiate AudioNode
        this.output = userContext.createScriptProcessor(256, 1, 1);
        this.activateNode = userContext.destination;

        //Set Properties
        this.frequency = initValue(properties.frequency, this.defaults.frequency
            .value);
        this.offset = initValue(properties.offset, this.defaults.offset.value);
        this.oscillation = initValue(properties.oscillation, this.defaults
            .oscillation
            .value);
        this.phase = initValue(properties.phase, this.defaults.phase.value);
        this.target = properties.target || {};
        this.output.onaudioprocess = this.callback(properties.callback ||
            function() {});
        this.bypass = properties.bypass || false;
    };
    Tuna.prototype.LFO.prototype = Object.create(Super, {
        name: {
            value: "LFO"
        },
        bufferSize: {
            value: 256
        },
        sampleRate: {
            value: 44100
        },
        defaults: {
            value: {
                frequency: {
                    value: 1,
                    min: 0,
                    max: 20,
                    automatable: false,
                    type: FLOAT
                },
                offset: {
                    value: 0.85,
                    min: 0,
                    max: 22049,
                    automatable: false,
                    type: FLOAT
                },
                oscillation: {
                    value: 0.3,
                    min: -22050,
                    max: 22050,
                    automatable: false,
                    type: FLOAT
                },
                phase: {
                    value: 0,
                    min: 0,
                    max: 2 * Math.PI,
                    automatable: false,
                    type: FLOAT
                }
            }
        },
        frequency: {
            get: function() {
                return this._frequency;
            },
            set: function(value) {
                this._frequency = value;
                this._phaseInc = 2 * Math.PI * this._frequency *
                    this.bufferSize /
                    this.sampleRate;
            }
        },
        offset: {
            get: function() {
                return this._offset;
            },
            set: function(value) {
                this._offset = value;
            }
        },
        oscillation: {
            get: function() {
                return this._oscillation;
            },
            set: function(value) {
                this._oscillation = value;
            }
        },
        phase: {
            get: function() {
                return this._phase;
            },
            set: function(value) {
                this._phase = value;
            }
        },
        target: {
            get: function() {
                return this._target;
            },
            set: function(value) {
                this._target = value;
            }
        },
        activate: {
            value: function(doActivate) {
                if (!doActivate) {
                    this.output.disconnect(userContext.destination);
                } else {
                    this.output.connect(userContext.destination);
                }
            }
        },
        callback: {
            value: function(callback) {
                var that = this;
                return function() {
                    that._phase += that._phaseInc;
                    if (that._phase > 2 * Math.PI) {
                        that._phase = 0;
                    }
                    callback(that._target, that._offset +
                        that._oscillation *
                        Math.sin(that._phase));
                };
            }
        }
    });

    Tuna.toString = Tuna.prototype.toString = function() {
        return "Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js";
    };
})(this);
;

/** Let's do the vendor-prefix dance. **/
    var audioContext = window.AudioContext || window.webkitAudioContext;
    var context      = new audioContext();
    var MediaStreamHelper = {
        /*
	        The browser have to support Promises if the browser supports only the deprecated version of getUserMedia.
	        There is a polyfill for Promises!
          Example:
	          MediaStreamHelper.initialize(window);
	          getUserMedia({audio: true}).then(function(stream) {}).catch(function(error) {});
	*/
		    UNSUPPORT: false,
		    SUPPORT_STANDARD_VERSION: 1,
		    SUPPORT_DEPRECATED_VERSION: 2,
		    isGetUserMediaSupported: function isGetUserMediaSupported(window) {
				    if(window.navigator.mediaDevices.getUserMedia) return this.SUPPORT_STANDARD_VERSION;
				    else if(window.navigator.getUserMedia) return this.SUPPORT_DEPRECATED_VERSION;
				    else
					    return this.UNSUPPORT;
			    },
		    initialize: function initializeMediaStreamHelper(window) {
				    window.navigator.mediaDevices = window.navigator.mediaDevices || {};
				    window.navigator.getUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;

				    var howIsItSupported = this.isGetUserMediaSupported(window);
				    if(howIsItSupported != this.UNSUPPORT)
				    {
					    window.getUserMedia = howIsItSupported == this.SUPPORT_STANDARD_VERSION ?
						    window.navigator.mediaDevices.getUserMedia.bind(window.navigator.mediaDevices) :
						    function(constraints) {
								    return new Promise(function(resolve, reject) {
										    window.navigator.getUserMedia(constraints, resolve, reject);
									    });
							    };
				    }
			    }
	    };
    MediaStreamHelper.initialize(window);
    if(window.getUserMedia) console.log("Your browser supports getUserMedia.");
    else
        console.log("Your browser does not support getUserMedia.");
/////////////////////////////////////////

var Wad = (function(){

/** Pre-render a noise buffer instead of generating noise on the fly. **/
    var noiseBuffer = (function(){
        // the initial seed
        Math.seed = 6;
        Math.seededRandom = function(max, min){
            max = max || 1;
            min = min || 0;
            Math.seed = ( Math.seed * 9301 + 49297 ) % 233280;
            var rnd = Math.seed / 233280;

            return min + rnd * (max - min);
        }
        var bufferSize = 2 * context.sampleRate;
        var noiseBuffer = context.createBuffer(1, bufferSize, context.sampleRate);
        var output = noiseBuffer.getChannelData(0);
        for ( var i = 0; i < bufferSize; i++ ) {
            output[i] = Math.seededRandom() * 2 - 1;
        }
        return noiseBuffer;
    })()
/////////////////////////////////////////////////////////////////////////

/** a lil hack. just be glad it isn't on Object.prototype. **/
    var isArray = function(object){
        return Object.prototype.toString.call(object) === '[object Array]';
    }

/** Set up the default ADSR envelope. **/
    var constructEnv = function(that, arg){
        that.env = { //default envelope, if one is not specified on play
            attack  : arg.env ? valueOrDefault(arg.env.attack,  1) : 0,    // time in seconds from onset to peak volume
            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume
            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1
            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume
            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume
        };
        that.defaultEnv = {
            attack  : arg.env ? valueOrDefault(arg.env.attack,  1) : 0,    // time in seconds from onset to peak volume
            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume
            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1
            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume
            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume
        };
    }
/////////////////////////////////////////


/** Set up the default filter and filter envelope. **/
    var constructFilter = function(that, arg){

        if ( !arg.filter ) { arg.filter = null; }

        else if ( isArray(arg.filter) ) {
            that.filter = arg.filter.map(function(filterArg){
                return {
                    type : filterArg.type || 'lowpass',
                    frequency : filterArg.frequency || 600,
                    q : filterArg.q || 1,
                    env : filterArg.env || null,
                }
            });
        }
        else {
            that.filter  = [{
                type : arg.filter.type || 'lowpass',
                frequency : arg.filter.frequency || 600,
                q : arg.filter.q || 1,
                env : arg.filter.env ||null,
            }];
        }
    }
//////////////////////////////////////////////////////


/** If the Wad uses an audio file as the source, request it from the server.
Don't let the Wad play until all necessary files have been downloaded. **/
    var requestAudioFile = function(that, callback){
        var request = new XMLHttpRequest();
        request.open("GET", that.source, true);
        request.responseType = "arraybuffer";
        that.playable--;
        request.onload = function(){
            context.decodeAudioData(request.response, function (decodedBuffer){
                that.decodedBuffer = decodedBuffer;
                if ( that.env.hold === 3.14159 ) { // audio buffers should not use the default hold
                    that.env.hold = that.decodedBuffer.duration + 1
                }
                if ( callback ) { callback(that); }
                that.playable++;
                if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }
            })
        };
        request.send();
    };
//////////////////////////////////////////////////////////////////////////

/** Set up the vibrato LFO **/
    var constructVibrato = function(that, arg){
        if ( arg.vibrato ) {
            that.vibrato = {
                shape     : valueOrDefault(arg.vibrato.shape, 'sine'),
                speed     : valueOrDefault(arg.vibrato.speed, 1),
                magnitude : valueOrDefault(arg.vibrato.magnitude, 5),
                attack    : valueOrDefault(arg.vibrato.attack, 0)
            };
        }
        else { that.vibrato = null; }
    };
//////////////////////////////


/** Set up the tremolo LFO **/
    var constructTremolo = function(that, arg){
        if ( arg.tremolo ) {
            that.tremolo = {
                shape     : valueOrDefault(arg.tremolo.shape, 'sine'),
                speed     : valueOrDefault(arg.tremolo.speed, 1),
                magnitude : valueOrDefault(arg.tremolo.magnitude, 5),
                attack    : valueOrDefault(arg.tremolo.attack, 1)
            };
        }
        else { that.tremolo = null; }
    };
//////////////////////////////

/** Grab the reverb impulse response file from a server.
You may want to change Wad.defaultImpulse to serve files from your own server.
Check out http://www.voxengo.com/impulses/ for free impulse responses. **/
    var constructReverb = function(that, arg){
        if ( arg.reverb ) {
            that.reverb = { wet : valueOrDefault(arg.reverb.wet, 1) };
            var impulseURL = arg.reverb.impulse || Wad.defaultImpulse;
            var request = new XMLHttpRequest();
            request.open("GET", impulseURL, true);
            request.responseType = "arraybuffer";
            that.playable--;
            request.onload = function(){
                context.decodeAudioData(request.response, function (decodedBuffer){

                    that.reverb.buffer = decodedBuffer;
                    that.playable++;
                    if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }
                    if ( that instanceof Wad.Poly ) { that.setUp(arg); }
                    if ( that.source === 'mic' && that.reverb && that.reverb.buffer && that.reverb.node && !that.reverb.node.buffer ) { // I think this is only relevant when calling play() with args on a mic
                        that.reverb.node.convolver.buffer = that.reverb.buffer;
                    }

                })
            };
            request.send();
        }
        else {
            that.reverb = null;
        }
    };

    var constructPanning = function(that, arg){
        if ( 'panning' in arg ) {
            that.panning = { location : arg.panning };
            if ( typeof(arg.panning) === "number" ) {
                that.panning.type = 'stereo';
            }

            else {
                that.panning.type = '3d'
                that.panning.panningModel = arg.panningModel || 'equalpower';
            }
        }

        else {
            that.panning = {
                location : 0,
                type     : 'stereo',
            };
        }
        if ( that.panning.type === 'stereo' && !context.createStereoPanner ) {
            console.log("Your browser does not support stereo panning. Falling back to 3D panning.")
            that.panning = {
                location     : [0,0,0],
                type         : '3d',
                panningModel : 'equalpower',
            }
        }
    };
//////////////////////////////////////////////////////////////////////////////
    var constructDelay = function(that, arg){
        if ( arg.delay ) {
            that.delay = {
                delayTime    : valueOrDefault(arg.delay.delayTime, .5),
                maxDelayTime : valueOrDefault(arg.delay.maxDelayTime, 2),
                feedback     : valueOrDefault(arg.delay.feedback, .25),
                wet          : valueOrDefault(arg.delay.wet, .25)
            };
        }
        else { that.delay = null; }
    };
/** Special initialization and configuration for microphone Wads **/
    var getConsent = function(that, arg) {
        that.nodes             = [];
        that.mediaStreamSource = null;
        that.gain              = null;
        getUserMedia({audio: true, video: false}).then(function(stream) {
            // console.log('got stream')
            that.mediaStreamSource = context.createMediaStreamSource(stream);
            Wad.micConsent = true
            setUpMic(that, arg);
        }).catch(function(error) { console.log('Error setting up microphone input: ', error); }); // This is the error callback.
    };
////////////////////////////////////////////////////////////////////

    var setUpMic = function(that, arg){
        that.nodes           = [];
        that.gain            = context.createGain();
        that.gain.gain.value = valueOrDefault(arg.volume,that.volume);
        that.nodes.push(that.mediaStreamSource);
        that.nodes.push(that.gain);
        // console.log('that ', arg)

        if ( that.filter || arg.filter ) { createFilters(that, arg); }

        if ( that.reverb || arg.reverb ) { setUpReverbOnPlay(that, arg); }

        constructPanning(that, arg);
        setUpPanningOnPlay(that, arg);

        if ( that.delay || arg.delay ) {
            setUpDelayOnPlay(that, arg);
        }
        setUpTunaOnPlay(that, arg)
        that.setUpExternalFxOnPlay(arg, context);
    }

    var Wad = function(arg){
/** Set basic Wad properties **/
        this.source        = arg.source;
        this.destination   = arg.destination || context.destination; // the last node the sound is routed to
        this.volume        = valueOrDefault(arg.volume, 1); // peak volume. min:0, max:1 (actually max is infinite, but ...just keep it at or below 1)
        this.defaultVolume = this.volume;
        this.playable      = 1; // if this is less than 1, this Wad is still waiting for a file to download before it can play
        this.pitch         = Wad.pitches[arg.pitch] || arg.pitch || 440;
        this.detune        = arg.detune || 0 // In Cents.
        this.globalReverb  = arg.globalReverb || false;
        this.gain          = [];
        this.loop          = arg.loop || false;
        this.tuna          = arg.tuna || null;
        constructEnv(this, arg);
        constructFilter(this, arg);
        constructVibrato(this, arg);
        constructTremolo(this, arg);
        constructReverb(this, arg);
        this.constructExternalFx(arg, context);
        constructPanning(this, arg);
        constructDelay(this, arg);
////////////////////////////////


/** If the Wad's source is noise, set the Wad's buffer to the noise buffer we created earlier. **/
        if ( this.source === 'noise' ) {
            this.decodedBuffer = noiseBuffer;
        }
//////////////////////////////////////////////////////////////////////////////////////////////////


/** If the Wad's source is the microphone, the rest of the setup happens here. **/
        else if ( this.source === 'mic' ) {
            getConsent(this, arg);
        }
//////////////////////////////////////////////////////////////////////////////////


/** If the Wad's source is an object, assume it is a buffer from a recorder. There's probably a better way to handle this. **/
        else if ( typeof this.source == 'object' ) {
            var newBuffer = context.createBuffer(2, this.source[0].length, context.sampleRate);
            newBuffer.getChannelData(0).set(this.source[0]);
            newBuffer.getChannelData(1).set(this.source[1]);
            this.decodedBuffer = newBuffer;
        }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** If the source is not a pre-defined value, assume it is a URL for an audio file, and grab it now. **/
        else if ( !( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) ) {
            requestAudioFile(this, arg.callback);
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////
        else { arg.callback && arg.callback(this) }
    };
    Wad.micConsent = false
    Wad.audioContext = context
    if ( window.Tuna != undefined ) {
        Wad.tuna = new Tuna(Wad.audioContext)
    }

/** When a note is played, these two functions will schedule changes in volume and filter frequency,
as specified by the volume envelope and filter envelope **/
    var filterEnv = function(wad, arg){
        wad.filter.forEach(function (filter, index){
            filter.node.frequency.linearRampToValueAtTime(filter.frequency, arg.exactTime);
            filter.node.frequency.linearRampToValueAtTime(filter.env.frequency, arg.exactTime + filter.env.attack);
        });
    };

    var playEnv = function(wad, arg){
        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime);
        wad.gain[0].gain.linearRampToValueAtTime(wad.volume, arg.exactTime + wad.env.attack + 0.00001);
        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + 0.00002);
        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + 0.00003);
        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + wad.env.release + 0.00004);
        wad.soundSource.start(arg.exactTime);
        wad.soundSource.stop(arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + wad.env.release);
    };

////////////////////////////////////////////////////////////////////////////////////////////////////


/** When all the nodes are set up for this Wad, this function plugs them into each other,
with special handling for nodes with custom interfaces (e.g. reverb, delay). **/
    var plugEmIn = function(that, arg){
        // console.log('nodes? ', that.nodes)
        var destination = ( arg && arg.destination ) || that.destination;
        for ( var i = 1; i < that.nodes.length; i++ ) {
            if ( that.nodes[i-1].interface === 'custom' ) {
                var from = that.nodes[i-1].output;
            }
            else { // assume native interface
                var from = that.nodes[i-1];
            }
            if ( that.nodes[i].interface === 'custom' ) {
                var to = that.nodes[i].input
            }
            else { // assume native interface
                var to = that.nodes[i]
            }
            from.connect(to);
        }
        if ( that.nodes[that.nodes.length-1].interface === 'custom') {
            var lastStop = that.nodes[that.nodes.length-1].output;
        }
        else { // assume native interface
            var lastStop = that.nodes[that.nodes.length-1];
        }
        lastStop.connect(destination);

        /** Global reverb is super deprecated, and should be removed at some point. **/
        if ( Wad.reverb && that.globalReverb ) {
            that.nodes[that.nodes.length - 1].connect(Wad.reverb.node);
            Wad.reverb.node.connect(Wad.reverb.gain);
            Wad.reverb.gain.connect(destination);
        }
        /**************************************************************************/
    };
/////////////////////////////////////////////////////////////////////////////////////////


/** Initialize and configure an oscillator node **/
    var setUpOscillator = function(that, arg){
        arg = arg || {};
        that.soundSource = context.createOscillator();
        that.soundSource.type = that.source;
        if ( arg.pitch ) {
            if ( arg.pitch in Wad.pitches ) {
                that.soundSource.frequency.value = Wad.pitches[arg.pitch];
            }
            else {
                that.soundSource.frequency.value = arg.pitch;
            }
        }
        else {
            that.soundSource.frequency.value = that.pitch;
        }
        that.soundSource.detune.value = arg.detune || that.detune;
    };
///////////////////////////////////////////////////

/** Set the ADSR volume envelope according to play() arguments, or revert to defaults **/
    var setUpEnvOnPlay = function(that, arg){
        if ( arg && arg.env ) {
            that.env.attack  = valueOrDefault(arg.env.attack, that.defaultEnv.attack);
            that.env.decay   = valueOrDefault(arg.env.decay, that.defaultEnv.decay);
            that.env.sustain = valueOrDefault(arg.env.sustain, that.defaultEnv.sustain);
            that.env.hold    = valueOrDefault(arg.env.hold, that.defaultEnv.hold);
            that.env.release = valueOrDefault(arg.env.release, that.defaultEnv.release);
        }
        else {
            that.env = {
                attack  : that.defaultEnv.attack,
                decay   : that.defaultEnv.decay,
                sustain : that.defaultEnv.sustain,
                hold    : that.defaultEnv.hold,
                release : that.defaultEnv.release
            };
        }
    };
//////////////////////////////////////////////////////////////////////////////////


/** Set the filter and filter envelope according to play() arguments, or revert to defaults **/

    var createFilters = function(that, arg){
        if ( arg.filter && !isArray(arg.filter) ) {
            arg.filter = [arg.filter];
        }
        that.filter.forEach(function (filter, i) {
            filter.node                 = context.createBiquadFilter();
            filter.node.type            = filter.type;
            filter.node.frequency.value = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].frequency || filter.frequency ) : filter.frequency;
            filter.node.Q.value         = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].q         || filter.q )         : filter.q;
            if ( ( arg.filter && arg.filter[i].env || that.filter[i].env ) && !( that.source === "mic" ) ) {
                filter.env = {
                    attack    : ( arg.filter && arg.filter[i].env && arg.filter[i].env.attack )    || that.filter[i].env.attack,
                    frequency : ( arg.filter && arg.filter[i].env && arg.filter[i].env.frequency ) || that.filter[i].env.frequency
                };
            }

            that.nodes.push(filter.node);
        })
    };

    var setUpFilterOnPlay = function(that, arg){
        if ( arg && arg.filter && that.filter ) {
            if ( !isArray(arg.filter) ) arg.filter = [arg.filter]
            createFilters(that, arg)
        }
        else if ( that.filter ) {
            createFilters(that, that);
        }
    };
///////////////////////////////////////////////////////////////////////////////////////////////

/** Initialize and configure a convolver node for playback **/
    var setUpReverbOnPlay = function(that, arg){
        var reverbNode = {
            interface : 'custom',
            input : context.createGain(),
            convolver : context.createConvolver(),
            wet : context.createGain(),
            output : context.createGain()
        }
        reverbNode.convolver.buffer = that.reverb.buffer;
        reverbNode.wet.gain.value   = that.reverb.wet;

        reverbNode.input.connect(reverbNode.convolver);
        reverbNode.input.connect(reverbNode.output);
        reverbNode.convolver.connect(reverbNode.wet);
        reverbNode.wet.connect(reverbNode.output);

        that.reverb.node = reverbNode;
        that.nodes.push(that.reverb.node);
    };
//////////////////////////////////////////////////////////////


/** Initialize and configure a panner node for playback **/
    var setUpPanningOnPlay = function(that, arg){
        var panning = arg && arg.panning; // can be zero provided as argument
        if (typeof panning === 'undefined') { panning = that.panning.location; }

        if (typeof panning  === 'number') {
            that.panning.node = context.createStereoPanner();
            that.panning.node.pan.value = panning;
            that.panning.type = 'stereo';
        }
        else {
            that.panning.node = context.createPanner();
            that.panning.node.setPosition(panning[0], panning[1], panning[2]);
            that.panning.node.panningModel = arg.panningModel || that.panningModel || 'equalpower';
            that.panning.type = '3d';
        }

        that.nodes.push(that.panning.node);

    };
///////////////////////////////////////////////////////////


/** Initialize and configure a vibrato LFO Wad for playback **/
    var setUpVibratoOnPlay = function(that, arg){
        that.vibrato.wad = new Wad({
            source : that.vibrato.shape,
            pitch  : that.vibrato.speed,
            volume : that.vibrato.magnitude,
            env    : {
                attack : that.vibrato.attack
            },
            destination : that.soundSource.frequency
        });
        that.vibrato.wad.play();
    };
///////////////////////////////////////////////////////////////


/** Initialize and configure a tremolo LFO Wad for playback **/
    var setUpTremoloOnPlay = function(that, arg){
        that.tremolo.wad = new Wad({
            source : that.tremolo.shape,
            pitch  : that.tremolo.speed,
            volume : that.tremolo.magnitude,
            env    : {
                attack : that.tremolo.attack,
                hold   : 10
            },
            destination : that.gain[0].gain
        });
        that.tremolo.wad.play();
    };
///////////////////////////////////////////////////////////////

    var setUpDelayOnPlay = function(that, arg){
        if ( that.delay ) {
            if ( !arg.delay ) { arg.delay = {}; }
            //create the nodes we’ll use
            var delayNode = { // the custom delay node
                interface    : 'custom',
                input        : context.createGain(),
                output       : context.createGain(),
                delayNode    : context.createDelay(that.delay.maxDelayTime), // the native delay node inside the custom delay node.
                feedbackNode : context.createGain(),
                wetNode      : context.createGain(),
            }

            //set some decent values
            delayNode.delayNode.delayTime.value = valueOrDefault(arg.delay.delayTime, that.delay.delayTime);
            delayNode.feedbackNode.gain.value   = valueOrDefault(arg.delay.feedback, that.delay.feedback);
            delayNode.wetNode.gain.value        = valueOrDefault(arg.delay.wet, that.delay.wet);


            //set up the routing
            delayNode.input.connect(delayNode.delayNode);
            delayNode.input.connect(delayNode.output);
            delayNode.delayNode.connect(delayNode.feedbackNode);
            delayNode.delayNode.connect(delayNode.wetNode);
            delayNode.feedbackNode.connect(delayNode.delayNode);
            delayNode.wetNode.connect(delayNode.output);
            that.delay.delayNode = delayNode;

            that.nodes.push(delayNode)
        }
    };

/** **/
    var constructCompressor = function(that, arg){
        that.compressor = context.createDynamicsCompressor();
        that.compressor.attack.value    = valueOrDefault(arg.compressor.attack, that.compressor.attack.value);
        that.compressor.knee.value      = valueOrDefault(arg.compressor.knee, that.compressor.knee.value);
        that.compressor.ratio.value     = valueOrDefault(arg.compressor.ratio, that.compressor.ratio.value);
        that.compressor.release.value   = valueOrDefault(arg.compressor.release, that.compressor.release.value);
        that.compressor.threshold.value = valueOrDefault(arg.compressor.threshold, that.compressor.threshold.value);
        that.nodes.push(that.compressor);
    };
    var setUpTunaOnPlay = function(that, arg){
        if ( !( that.tuna || arg.tuna ) ) { return }
        var tunaConfig = {}
        if ( that.tuna ) {
            for ( var key in that.tuna ) {
                tunaConfig[key] = that.tuna[key]
            }
        }

        // overwrite settings from `this` with settings from arg
        if ( arg.tuna ) {
            for ( var key in arg.tuna ) {
                tunaConfig[key] = arg.tuna[key]
            }
        }
        console.log('tunaconfig: ', tunaConfig)
        for ( var key in tunaConfig) {
            console.log(key)
            var tunaEffect = new Wad.tuna[key](tunaConfig[key])
            that.nodes.push(tunaEffect)
        }
        // console.log(that.nodes)
    }
///

/** Method to allow users to setup external fx in the constructor **/
    Wad.prototype.constructExternalFx = function(arg, context){
        //override me in your own code
    };


//////////////////////////////////////////////////////////////////////////////

/** To be overrided by the user **/
    Wad.prototype.setUpExternalFxOnPlay = function(arg, context){
        //user does what is necessary here, and then maybe does something like:
        // this.nodes.push(externalFX)
    };
///////////////////////////////////////////////////////////////


/** the play() method will create the various nodes that are required for this Wad to play,
set properties on those nodes according to the constructor arguments and play() arguments,
plug the nodes into each other with plugEmIn(),
then finally play the sound by calling playEnv() **/
    Wad.prototype.play = function(arg){
        arg = arg || { arg : null };
        if ( this.playable < 1 ) {
            this.playOnLoad    = true;
            this.playOnLoadArg = arg;
        }

        else if ( this.source === 'mic' ) {
            if ( Wad.micConsent ) {
                if ( arg.arg === null ) {
                    plugEmIn(this, arg);
                }
                else {
                    constructFilter(this, arg);
                    constructVibrato(this, arg);
                    constructTremolo(this, arg);
                    constructReverb(this, arg);
                    this.constructExternalFx(arg, context);
                    constructPanning(this, arg);
                    constructDelay(this, arg);
                    setUpMic(this, arg);
                    plugEmIn(this, arg);
                }
            }
            else { console.log('You have not given your browser permission to use your microphone.')}
        }

        else {
            this.nodes = [];
            if ( !arg.wait ) { arg.wait = 0; }
            if ( arg.volume ) { this.volume = arg.volume; }
            else { this.volume = this.defaultVolume; }

            if ( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) {
                setUpOscillator(this, arg);
            }

            else {
                this.soundSource = context.createBufferSource();
                this.soundSource.buffer = this.decodedBuffer;
                if ( this.source === 'noise' || this.loop || arg.loop ) {
                    this.soundSource.loop = true;
                }
            }

            if (arg.exactTime === undefined) {
                arg.exactTime = context.currentTime + arg.wait;
            }

            this.nodes.push(this.soundSource);


    /**  sets the volume envelope based on the play() arguments if present,
    or defaults to the constructor arguments if the volume envelope is not set on play() **/
            setUpEnvOnPlay(this, arg);
    ////////////////////////////////////////////////////////////////////////////////////////


    /**  sets up the filter and filter envelope based on the play() argument if present,
    or defaults to the constructor argument if the filter and filter envelope are not set on play() **/
            setUpFilterOnPlay(this, arg);
    ///////////////////////////////////////////////////////////////////////////////////////////////////
            setUpTunaOnPlay(this, arg);

            this.setUpExternalFxOnPlay(arg, context);


            this.gain.unshift(context.createGain()); // sets up the gain node
            this.gain[0].label = arg.label;
            this.nodes.push(this.gain[0]);

            if ( this.gain.length > 15 ) {
                this.gain.length = 15
            }

            // sets up reverb
            if ( this.reverb ) { setUpReverbOnPlay(this, arg); }

    /**  sets panning based on the play() argument if present, or defaults to the constructor argument if panning is not set on play **/
            setUpPanningOnPlay(this, arg);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            setUpDelayOnPlay(this, arg);

            plugEmIn(this, arg);

            if ( this.filter && this.filter[0].env ) { filterEnv(this, arg); }
            playEnv(this, arg);

            //sets up vibrato LFO
            if ( this.vibrato ) { setUpVibratoOnPlay(this, arg); }

            //sets up tremolo LFO
            if ( this.tremolo ) { setUpTremoloOnPlay(this, arg); }
        }
        if ( arg.callback ) { arg.callback(this); }
        return this;
    };

//////////////////////////////////////////////////////////////////////////////////////////


    /** Change the volume of a Wad at any time, including during playback **/
    Wad.prototype.setVolume = function(volume){
        this.defaultVolume = volume;
        if ( this.gain.length > 0 ) { this.gain[0].gain.value = volume; }
        return this;
    };

    /**
    Change the playback speed of a Wad during playback.
    inputSpeed is a value of 0 < speed, and is the rate of playback of the audio.
    E.g. if input speed = 2.0, the playback will be twice as fast
    **/
    Wad.prototype.setSpeed = function(inputSpeed) {

        //Check/Save the input
        var speed;
        if(inputSpeed && inputSpeed > 0) speed = inputSpeed;
        else speed = 0;

        //Check if we have a soundsource (Though we always should)
        if(this.soundSource) {

            //Set the value
            this.soundSource.playbackRate.value = speed;
        }
        else {

            //Inform that there is no delay on the current wad
            console.log("Sorry, but the wad does not contain a soundSource!");
        }

        return this;
    };

    Wad.prototype.setDetune = function(detune){
        this.soundSource.detune.value = detune;
        return this;
    };

    /** Change the panning of a Wad at any time, including during playback **/
    Wad.prototype.setPanning = function(panning){
        this.panning.location = panning;
        if ( isArray(panning) && this.panning.type === '3d' && this.panning.node ) {
            this.panning.node.setPosition(panning[0], panning[1], panning[2]);

        }
        else if ( typeof panning === 'number' && this.panning.type === 'stereo' && this.panning.node) {
            this.panning.node.pan.value = panning;
        }

        if ( isArray(panning) ) { this.panning.type = '3d' }
        else if ( typeof panning === 'number' ) { this.panning.type = 'stereo' }
        return this;
    };

    /**
    Change the Reverb of a Wad at any time, including during playback.
    inputWet is a value of 0 < wetness/gain < 1
    **/
    Wad.prototype.setReverb = function(inputWet) {

        //Check/Save the input

        var wet;
        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;
        else if(inputWet >= 1) wet = 1;
        else wet = 0;

        //Check if we have delay
        if(this.reverb) {

            //Set the value
            this.reverb.wet = wet;

            //Set the node's value, if it exists
            if(this.reverb.node) {

                this.reverb.node.wet.gain.value = wet;
            }
        }
        else {

            //Inform that there is no reverb on the current wad
            console.log("Sorry, but the wad does not contain Reverb!");
        }

        return this;
    };


    /**
    Change the Delay of a Wad at any time, including during playback.
    inputTime is a value of time > 0, and is the time in seconds between each delayed playback.
    inputWet is a value of gain 0 < inputWet < 1, and is Relative volume change between the original sound and the first delayed playback.
    inputFeedback is a value of gain 0 < inputFeedback < 1, and is Relative volume change between each delayed playback and the next.
    **/
    Wad.prototype.setDelay = function(inputTime, inputWet, inputFeedback){

        //Check/Save the input
        var time;
        if(inputTime && inputTime > 0) time = inputTime;
        else time = 0;

        var wet;
        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;
        else if(inputWet >= 1) wet = 1;
        else wet = 0;

        var feedback;
        if(inputFeedback && inputFeedback > 0 && inputFeedback < 1) feedback = inputFeedback;
        else if(inputFeedback >= 1) feedback = 1;
        else feedback = 0;

        //Check if we have delay
        if(this.delay) {

            //Set the value
            this.delay.delayTime = time;
            this.delay.wet = wet;
            this.delay.feedback = feedback;

            //Set the node's value, if it exists
            if(this.delay.delayNode) {

                this.delay.delayNode.delayNode.delayTime.value = time;
                this.delay.delayNode.wetNode.gain.value = wet;
                this.delay.delayNode.feedbackNode.gain.value = feedback;
            }
        }
        else {

            //Inform that there is no delay on the current wad
            console.log("Sorry, but the wad does not contain delay!");
        }

        return this;
    };


//////////////////////////////////////////////////////////////////////////////////////////


/** If multiple instances of a sound are playing simultaneously, stop() only can stop the most recent one **/
    Wad.prototype.stop = function(label){
        if ( !( this.source === 'mic' ) ) {
            if ( label ) {
                for ( var i = 0; i < this.gain.length; i++ ) {
                    if ( this.gain[i].label === label ) {
                        this.gain[i].gain.cancelScheduledValues(context.currentTime);
                        this.gain[i].gain.setValueAtTime(this.gain[i].gain.value, context.currentTime);
                        this.gain[i].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);
                    }
                }
            }
            if ( !label ) {
                this.gain[0].gain.cancelScheduledValues(context.currentTime);
                this.gain[0].gain.setValueAtTime(this.gain[0].gain.value, context.currentTime);
                this.gain[0].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);
            }
        }
        else if (Wad.micConsent ) {
            this.mediaStreamSource.disconnect(0);
        }
        else { console.log('You have not given your browser permission to use your microphone.')}
        if ( this.tremolo ) {
            this.tremolo.wad.stop()
        }
    };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    var buflen = 2048;
    var buf = new Uint8Array( buflen );
    var MINVAL = 134;  // 128 == zero.  MINVAL is the "minimum detected signal" level.

    var noteFromPitch = function( frequency ) {
        var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );
        return Math.round( noteNum ) + 69;
    }

    var frequencyFromNoteNumber = function( note ) {
        return 440 * Math.pow(2,(note-69)/12);
    }

    var centsOffFromPitch = function( frequency, note ) {
        return Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );
    }


    function autoCorrelate( buf, sampleRate ) {
        var MIN_SAMPLES = 4;    // corresponds to an 11kHz signal
        var MAX_SAMPLES = 1000; // corresponds to a 44Hz signal
        var SIZE = 1000;
        var best_offset = -1;
        var best_correlation = 0;
        var rms = 0;
        var foundGoodCorrelation = false;

        if (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))
            return -1;  // Not enough data

        for ( var i = 0; i < SIZE; i++ ) {
            var val = ( buf[i] - 128 ) / 128;
            rms += val * val;
        }
        rms = Math.sqrt(rms/SIZE);
        if (rms<0.01)
            return -1;

        var lastCorrelation=1;
        for (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {
            var correlation = 0;

            for (var i=0; i<SIZE; i++) {
                correlation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));
            }
            correlation = 1 - (correlation/SIZE);
            if ((correlation>0.9) && (correlation > lastCorrelation))
                foundGoodCorrelation = true;
            else if (foundGoodCorrelation) {
                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.
                return sampleRate/best_offset;
            }
            lastCorrelation = correlation;
            if (correlation > best_correlation) {
                best_correlation = correlation;
                best_offset = offset;
            }
        }
        if (best_correlation > 0.01) {
            // console.log("f = " + sampleRate/best_offset + "Hz (rms: " + rms + " confidence: " + best_correlation + ")")
            return sampleRate/best_offset;
        }
        return -1;
    //  var best_frequency = sampleRate/best_offset;
    }


    Wad.Poly = function(arg){
        if ( !arg ) { arg = {}; }
        this.isSetUp  = false;
        this.playable = 1;

        if ( arg.reverb ) {
            constructReverb(this, arg); // We need to make sure we have downloaded the impulse response before continuing with the setup.
        }
        else {
            this.setUp(arg);
        }
    };

    Wad.Poly.prototype.setUp = function(arg){ // Anything that needs to happen before reverb is set up can go here.
        this.wads              = [];
        this.input             = context.createAnalyser();
        this.input.fftSize     = 2048
        this.nodes             = [this.input];
        this.destination       = arg.destination || context.destination; // the last node the sound is routed to
        this.volume            = arg.volume || 1;
        this.output            = context.createGain();
        this.output.gain.value = this.volume;
        this.tuna              = arg.tuna || null;

        if ( !( typeof Recorder === 'undefined' ) && arg.recConfig ) { // Recorder should be defined, unless you're running the unconcatenated source version and forgot to include recorder.js.
            this.rec               = new Recorder(this.output, arg.recConfig);
            this.rec.recordings    = [];

            var that = this;
            var getRecorderBufferCallback = function( buffers ) {
                that.rec.createWadArg.source = buffers;
                that.rec.recordings.unshift(new Wad(that.rec.createWadArg));
            };
            this.rec.createWad = function(arg){
                this.createWadArg = arg || { env : { hold : 9001 } };
                this.getBuffer(getRecorderBufferCallback);
            };
        }

        this.globalReverb = arg.globalReverb || false; // deprecated

        constructFilter(this, arg);
        if ( this.filter ) { createFilters(this, arg); }

        if ( this.reverb ) { setUpReverbOnPlay(this, arg); }

        this.constructExternalFx(arg, context);

        constructPanning(this, arg);
        setUpPanningOnPlay(this, arg);
        if ( arg.compressor ) { constructCompressor(this, arg); }

        constructDelay(this, arg);
        setUpDelayOnPlay(this, arg);
        setUpTunaOnPlay(this, arg);
        this.nodes.push(this.output);
        plugEmIn(this, arg);
        this.isSetUp = true;
        if ( arg.callback ) { arg.callback(this); }
    }

/**
    The MIT License (MIT)

Copyright (c) 2014 Chris Wilson
**/
    Wad.Poly.prototype.updatePitch = function( time ) {
        this.input.getByteTimeDomainData( buf );
        var ac = autoCorrelate( buf, context.sampleRate );

        if ( ac !== -1 && ac !== 11025 && ac !== 12000 ) {
            var pitch = ac;
            this.pitch = Math.floor( pitch ) ;
            var note = noteFromPitch( pitch );
            this.noteName = Wad.pitchesArray[note - 12];
            // Detune doesn't seem to work.
            // var detune = centsOffFromPitch( pitch, note );
            // if (detune == 0 ) {
            //     this.detuneEstimate = 0;
            // } else {

            //     this.detuneEstimate = detune
            // }
        }
        var that = this;
        that.rafID = window.requestAnimationFrame( function(){ that.updatePitch() } );
    }

    Wad.Poly.prototype.stopUpdatingPitch = function(){
        cancelAnimationFrame(this.rafID)
    }

    Wad.Poly.prototype.setVolume = function(volume){
        if ( this.isSetUp ) {
            this.output.gain.value = volume;
        }
        else {
            console.log('This PolyWad is not set up yet.');
        }
        return this;
    }

    Wad.Poly.prototype.play = function(arg){
        if ( this.isSetUp ) {
            if ( this.playable < 1 ) {
                this.playOnLoad    = true;
                this.playOnLoadArg = arg;
            }
            else {
                if ( arg && arg.volume ) {
                    this.output.gain.value = arg.volume; // if two notes are played with volume set as a play arg, does the second one overwrite the first? maybe input should be an array of gain nodes, like regular wads.
                    arg.volume = undefined; // if volume is set, it should change the gain on the polywad's gain node, NOT the gain nodes for individual wads inside the polywad.
                }
                for ( var i = 0; i < this.wads.length; i++ ) {
                    this.wads[i].play(arg);
                }
            }
        }
        else {
            console.log('This PolyWad is not set up yet.');
        }
        return this;
    };

    Wad.Poly.prototype.stop = function(arg){
        if ( this.isSetUp ) {
            for ( var i = 0; i < this.wads.length; i++ ) {
                this.wads[i].stop(arg);
            }
        }
    };

    Wad.Poly.prototype.add = function(wad){
        if ( this.isSetUp ) {
            wad.destination = this.input;
            this.wads.push(wad);
            if ( wad instanceof Wad.Poly ) {
                wad.output.disconnect(0);
                wad.output.connect(this.input);
            }
        }
        else {
            console.log('This PolyWad is not set up yet.');
        }
        return this;
    };



    Wad.Poly.prototype.remove = function(wad){
        if ( this.isSetUp ) {
            for ( var i = 0; i < this.wads.length; i++ ) {
                if ( this.wads[i] === wad ) {
                    this.wads[i].destination = context.destination;
                    this.wads.splice(i,1);
                    if ( wad instanceof Wad.Poly ) {
                        wad.output.disconnect(0);
                        wad.output.connect(context.destination);
                    }
                }
            }
        }
        return this;
    };

    Wad.Poly.prototype.constructExternalFx = function(arg, context){

    };

/** If a Wad is created with reverb without specifying a URL for the impulse response,
grab it from the defaultImpulse URL **/
    Wad.defaultImpulse = 'http://www.codecur.io/us/sendaudio/widehall.wav';

    // This method is deprecated.
    Wad.setGlobalReverb = function(arg){
        Wad.reverb                 = {};
        Wad.reverb.node            = context.createConvolver();
        Wad.reverb.gain            = context.createGain();
        Wad.reverb.gain.gain.value = arg.wet;
        var impulseURL             = arg.impulse || Wad.defaultImpulse;
        var request                = new XMLHttpRequest();
        request.open("GET", impulseURL, true);
        request.responseType = "arraybuffer";

        request.onload = function() {
            context.decodeAudioData(request.response, function (decodedBuffer){
                Wad.reverb.node.buffer = decodedBuffer;
            });
        };
        request.send();

    };
//////////////////////////////////////////////////////////////////////////////////////
//  Utility function to avoid javascript type conversion bug checking zero values   //

    var valueOrDefault = function(value, def) {
        var val = (value == null) ? def : value;
        return val;
    };

//////////////////////////////////////////////////////////////////////////////////////
/** This object is a mapping of note names to frequencies. **/
    Wad.pitches = {
        'A0'  : 27.5000,
        'A#0' : 29.1352,
        'Bb0' : 29.1352,
        'B0'  : 30.8677,
        'B#0'  : 32.7032,
        'Cb1'  : 30.8677,
        'C1'  : 32.7032,
        'C#1' : 34.6478,
        'Db1' : 34.6478,
        'D1'  : 36.7081,
        'D#1' : 38.8909,
        'Eb1' : 38.8909,
        'E1'  : 41.2034,
        'Fb1'  : 41.2034,
        'E#1'  : 43.6535,
        'F1'  : 43.6535,
        'F#1' : 46.2493,
        'Gb1' : 46.2493,
        'G1'  : 48.9994,
        'G#1' : 51.9131,
        'Ab1' : 51.9131,
        'A1'  : 55.0000,
        'A#1' : 58.2705,
        'Bb1' : 58.2705,
        'B1'  : 61.7354,
        'Cb2'  : 61.7354,
        'B#1'  : 65.4064,
        'C2'  : 65.4064,
        'C#2' : 69.2957,
        'Db2' : 69.2957,
        'D2'  : 73.4162,
        'D#2' : 77.7817,
        'Eb2' : 77.7817,
        'E2'  : 82.4069,
        'Fb2'  : 82.4069,
        'E#2'  : 87.3071,
        'F2'  : 87.3071,
        'F#2' : 92.4986,
        'Gb2' : 92.4986,
        'G2'  : 97.9989,
        'G#2' : 103.826,
        'Ab2' : 103.826,
        'A2'  : 110.000,
        'A#2' : 116.541,
        'Bb2' : 116.541,
        'B2'  : 123.471,
        'Cb3'  : 123.471,
        'B#2'  : 130.813,
        'C3'  : 130.813,
        'C#3' : 138.591,
        'Db3' : 138.591,
        'D3'  : 146.832,
        'D#3' : 155.563,
        'Eb3' : 155.563,
        'E3'  : 164.814,
        'Fb3'  : 164.814,
        'E#3'  : 174.614,
        'F3'  : 174.614,
        'F#3' : 184.997,
        'Gb3' : 184.997,
        'G3'  : 195.998,
        'G#3' : 207.652,
        'Ab3' : 207.652,
        'A3'  : 220.000,
        'A#3' : 233.082,
        'Bb3' : 233.082,
        'B3'  : 246.942,
        'Cb4'  : 246.942,
        'B#3'  : 261.626,
        'C4'  : 261.626,
        'C#4' : 277.183,
        'Db4' : 277.183,
        'D4'  : 293.665,
        'D#4' : 311.127,
        'Eb4' : 311.127,
        'E4'  : 329.628,
        'Fb4'  : 329.628,
        'E#4'  : 349.228,
        'F4'  : 349.228,
        'F#4' : 369.994,
        'Gb4' : 369.994,
        'G4'  : 391.995,
        'G#4' : 415.305,
        'Ab4' : 415.305,
        'A4'  : 440.000,
        'A#4' : 466.164,
        'Bb4' : 466.164,
        'B4'  : 493.883,
        'Cb5'  : 493.883,
        'B#4'  : 523.251,
        'C5'  : 523.251,
        'C#5' : 554.365,
        'Db5' : 554.365,
        'D5'  : 587.330,
        'D#5' : 622.254,
        'Eb5' : 622.254,
        'E5'  : 659.255,
        'Fb5'  : 659.255,
        'E#5'  : 698.456,
        'F5'  : 698.456,
        'F#5' : 739.989,
        'Gb5' : 739.989,
        'G5'  : 783.991,
        'G#5' : 830.609,
        'Ab5' : 830.609,
        'A5'  : 880.000,
        'A#5' : 932.328,
        'Bb5' : 932.328,
        'B5'  : 987.767,
        'Cb6'  : 987.767,
        'B#5'  : 1046.50,
        'C6'  : 1046.50,
        'C#6' : 1108.73,
        'Db6' : 1108.73,
        'D6'  : 1174.66,
        'D#6' : 1244.51,
        'Eb6' : 1244.51,
        'Fb6'  : 1318.51,
        'E6'  : 1318.51,
        'E#6'  : 1396.91,
        'F6'  : 1396.91,
        'F#6' : 1479.98,
        'Gb6' : 1479.98,
        'G6'  : 1567.98,
        'G#6' : 1661.22,
        'Ab6' : 1661.22,
        'A6'  : 1760.00,
        'A#6' : 1864.66,
        'Bb6' : 1864.66,
        'B6'  : 1975.53,
        'Cb7'  : 1975.53,
        'B#6'  : 2093.00,
        'C7'  : 2093.00,
        'C#7' : 2217.46,
        'Db7' : 2217.46,
        'D7'  : 2349.32,
        'D#7' : 2489.02,
        'Eb7' : 2489.02,
        'E7'  : 2637.02,
        'Fb7'  : 2637.02,
        'E#7'  : 2793.83,
        'F7'  : 2793.83,
        'F#7' : 2959.96,
        'Gb7' : 2959.96,
        'G7'  : 3135.96,
        'G#7' : 3322.44,
        'Ab7' : 3322.44,
        'A7'  : 3520.00,
        'A#7' : 3729.31,
        'Bb7' : 3729.31,
        'B7'  : 3951.07,
        'Cb8' : 3951.07,
        'B#7'  : 4186.01,
        'C8'  : 4186.01
    };


    Wad.pitchesArray = [ // Just an array of note names. This can be useful for mapping MIDI data to notes.
        'C0',
        'C#0',
        'D0',
        'D#0',
        'E0',
        'F0',
        'F#0',
        'G0',
        'G#0',
        'A0',
        'A#0',
        'B0',
        'C1',
        'C#1',
        'D1',
        'D#1',
        'E1',
        'F1',
        'F#1',
        'G1',
        'G#1',
        'A1',
        'A#1',
        'B1',
        'C2',
        'C#2',
        'D2',
        'D#2',
        'E2',
        'F2',
        'F#2',
        'G2',
        'G#2',
        'A2',
        'A#2',
        'B2',
        'C3',
        'C#3',
        'D3',
        'D#3',
        'E3',
        'F3',
        'F#3',
        'G3',
        'G#3',
        'A3',
        'A#3',
        'B3',
        'C4',
        'C#4',
        'D4',
        'D#4',
        'E4',
        'F4',
        'F#4',
        'G4',
        'G#4',
        'A4',
        'A#4',
        'B4',
        'C5',
        'C#5',
        'D5',
        'D#5',
        'E5',
        'F5',
        'F#5',
        'G5',
        'G#5',
        'A5',
        'A#5',
        'B5',
        'C6',
        'C#6',
        'D6',
        'D#6',
        'E6',
        'F6',
        'F#6',
        'G6',
        'G#6',
        'A6',
        'A#6',
        'B6',
        'C7',
        'C#7',
        'D7',
        'D#7',
        'E7',
        'F7',
        'F#7',
        'G7',
        'G#7',
        'A7',
        'A#7',
        'B7',
        'C8'
    ];
//////////////////////////////////////////////////////////////

    Wad.midiInstrument = {
        play : function() { console.log('playing midi')  },
        stop : function() { console.log('stopping midi') }
    };
    Wad.midiInputs  = [];

    midiMap = function(event){
        console.log(event.receivedTime, event.data);
        if ( event.data[0] === 144 ) { // 144 means the midi message has note data
            // console.log('note')
            if ( event.data[2] === 0 ) { // noteOn velocity of 0 means this is actually a noteOff message
                console.log('|| stopping note: ', Wad.pitchesArray[event.data[1]-12]);
                Wad.midiInstrument.stop(Wad.pitchesArray[event.data[1]-12]);
            }
            else if ( event.data[2] > 0 ) {
                console.log('> playing note: ', Wad.pitchesArray[event.data[1]-12]);
                Wad.midiInstrument.play({pitch : Wad.pitchesArray[event.data[1]-12], label : Wad.pitchesArray[event.data[1]-12], callback : function(that){
                }})
            }
        }
        else if ( event.data[0] === 176 ) { // 176 means the midi message has controller data
            console.log('controller');
            if ( event.data[1] == 46 ) {
                if ( event.data[2] == 127 ) { Wad.midiInstrument.pedalMod = true; }
                else if ( event.data[2] == 0 ) { Wad.midiInstrument.pedalMod = false; }
            }
        }
        else if ( event.data[0] === 224 ) { // 224 means the midi message has pitch bend data
            console.log('pitch bend');
        }
    };


    var onSuccessCallback = function(midiAccess){
        // console.log('inputs: ', m.inputs)

        Wad.midiInputs = []
        var val = midiAccess.inputs.values();
        for ( var o = val.next(); !o.done; o = val.next() ) {
            Wad.midiInputs.push(o.value)
        }
        // Wad.midiInputs = [m.inputs.values().next().value];   // inputs = array of MIDIPorts
        console.log('MIDI inputs: ', Wad.midiInputs)
        // var outputs = m.outputs(); // outputs = array of MIDIPorts
        for ( var i = 0; i < Wad.midiInputs.length; i++ ) {
            Wad.midiInputs[i].onmidimessage = midiMap; // onmidimessage( event ), event.data & event.receivedTime are populated
        }
        // var o = m.outputs()[0];           // grab first output device
        // o.send( [ 0x90, 0x45, 0x7f ] );     // full velocity note on A4 on channel zero
        // o.send( [ 0x80, 0x45, 0x7f ], window.performance.now() + 1000 );  // full velocity A4 note off in one second.
    };
    var onErrorCallback = function(err){
        console.log("uh-oh! Something went wrong!  Error code: " + err.code );
    };

    if ( navigator && navigator.requestMIDIAccess ) {
        try {
            navigator.requestMIDIAccess().then(onSuccessCallback, onErrorCallback);
        }
        catch(err) {
            var text = "There was an error on this page.\n\n";
            text += "Error description: " + err.message + "\n\n";
            text += "Click OK to continue.\n\n";
            console.log(text);
        }
    }


    Wad.presets = {
        hiHatClosed : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .03, release : .01}, filter : { type : 'highpass', frequency : 400, q : 1 } },
        snare : { source : 'noise', env : {attack : .001, decay : .01, sustain : .2, hold : .03, release : .02}, filter : {type : 'bandpass', frequency : 300, q : .180 } },
        hiHatOpen : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .43, release : .01}, filter : { type : 'highpass', frequency : 100, q : .2 } },
        ghost : { source : 'square', volume : .3, env : { attack : .01, decay : .002, sustain : .5, hold : 2.5, release : .3 }, filter : { type : 'lowpass', frequency : 600, q : 7, env : { attack : .7, frequency : 1600 } }, vibrato : { attack : 8, speed : 8, magnitude : 100 } },
        piano : { source : 'square', volume : 1.4, env : { attack : .01, decay : .005, sustain : .2, hold : .015, release : .3 }, filter : { type : 'lowpass', frequency : 1200, q : 8.5, env : { attack : .2, frequency : 600 } } }
    };
    return Wad;

})()

if(typeof module !== 'undefined' && module.exports) {
    module.exports = Wad;
}

return Wad;

}));


/***/ }),
/* 43 */,
/* 44 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 45 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** vertx (ignored) ***!
  \***********************/
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 46 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** multi ./js/athena-module.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/athena-module.js */23);


/***/ })
/******/ ]);
});


/***/ }),
/* 5 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/sockjs-client/lib/event/emitter.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , EventTarget = __webpack_require__(/*! ./eventtarget */ 21)
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;


/***/ }),
/* 6 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./~/sockjs-client/lib/utils/url.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var URL = __webpack_require__(/*! url-parse */ 34);

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 1)))

/***/ }),
/* 7 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/json3/lib/json3.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = "function" === "function" && __webpack_require__(/*! !webpack amd options */ 104);

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return JSON3;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/module.js */ 35)(module), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 8 */
/* unknown exports provided */
/* all exports used */
/*!********************************************!*\
  !*** ./~/sockjs-client/lib/utils/event.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var random = __webpack_require__(/*! ./random */ 10);

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 9 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/lib/ajax-based.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  , SenderReceiver = __webpack_require__(/*! ./sender-receiver */ 30)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 10 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/sockjs-client/lib/utils/random.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* global crypto:true */
var crypto = __webpack_require__(/*! crypto */ 94);

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};


/***/ }),
/* 11 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/sender/xhr-local.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , XhrDriver = __webpack_require__(/*! ../driver/xhr */ 25)
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;


/***/ }),
/* 12 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/sockjs-client/lib/utils/browser.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 13 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/sockjs-client/lib/utils/iframe.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var eventUtils = __webpack_require__(/*! ./event */ 8)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , browser = __webpack_require__(/*! ./browser */ 12)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 1), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 14 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/receiver/xhr.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 15 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/sender/xhr-cors.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , XhrDriver = __webpack_require__(/*! ../driver/xhr */ 25)
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;


/***/ }),
/* 16 */
/* unknown exports provided */
/* all exports used */
/*!********************************************!*\
  !*** ./~/sockjs-client/lib/event/event.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;


/***/ }),
/* 17 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/lib/iframe-wrap.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , IframeTransport = __webpack_require__(/*! ../iframe */ 29)
  , objectUtils = __webpack_require__(/*! ../../utils/object */ 19)
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 18 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/sockjs-client/lib/transport/sender/xdr.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  , eventUtils = __webpack_require__(/*! ../../utils/event */ 8)
  , browser = __webpack_require__(/*! ../../utils/browser */ 12)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1), __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 19 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/sockjs-client/lib/utils/object.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};


/***/ }),
/* 20 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/html-entities/lib/html5-entities.js ***!
  \***********************************************/
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;


/***/ }),
/* 21 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/sockjs-client/lib/event/eventtarget.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;


/***/ }),
/* 22 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./~/sockjs-client/lib/info-ajax.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , objectUtils = __webpack_require__(/*! ./utils/object */ 19)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1)))

/***/ }),
/* 23 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/sockjs-client/lib/info-iframe-receiver.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , XHRLocalObject = __webpack_require__(/*! ./transport/sender/xhr-local */ 11)
  , InfoAjax = __webpack_require__(/*! ./info-ajax */ 22)
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;


/***/ }),
/* 24 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./~/sockjs-client/lib/location.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 25 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/browser/abstract-xhr.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  , utils = __webpack_require__(/*! ../../utils/event */ 8)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = 'true';
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2), __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 26 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/browser/eventsource.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.EventSource;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 27 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/eventsource.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  , EventSourceReceiver = __webpack_require__(/*! ./receiver/eventsource */ 86)
  , XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ 15)
  , EventSourceDriver = __webpack_require__(/*! eventsource */ 26)
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;


/***/ }),
/* 28 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/sockjs-client/lib/transport/htmlfile.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , HtmlfileReceiver = __webpack_require__(/*! ./receiver/htmlfile */ 87)
  , XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ 11)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;


/***/ }),
/* 29 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/sockjs-client/lib/transport/iframe.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = __webpack_require__(/*! inherits */ 0)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , version = __webpack_require__(/*! ../version */ 33)
  , urlUtils = __webpack_require__(/*! ../utils/url */ 6)
  , iframeUtils = __webpack_require__(/*! ../utils/iframe */ 13)
  , eventUtils = __webpack_require__(/*! ../utils/event */ 8)
  , random = __webpack_require__(/*! ../utils/random */ 10)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 1)))

/***/ }),
/* 30 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/lib/sender-receiver.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  , BufferedSender = __webpack_require__(/*! ./buffered-sender */ 84)
  , Polling = __webpack_require__(/*! ./polling */ 85)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 31 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/xdr-streaming.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  , XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ 14)
  , XDRObject = __webpack_require__(/*! ./sender/xdr */ 18)
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;


/***/ }),
/* 32 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/xhr-polling.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  , XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ 14)
  , XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ 15)
  , XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ 11)
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;


/***/ }),
/* 33 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./~/sockjs-client/lib/version.js ***!
  \****************************************/
/***/ (function(module, exports) {

module.exports = '1.1.2';


/***/ }),
/* 34 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/url-parse/index.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var required = __webpack_require__(/*! requires-port */ 71)
  , qs = __webpack_require__(/*! querystringify */ 99)
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @api public
 */
function lolcation(loc) {
  loc = loc || global.location || {};

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new URL(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new URL(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @api private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @api private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @api public
 */
function URL(address, location, parser) {
  if (!(this instanceof URL)) {
    return new URL(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];
    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL}
 * @api public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String}
 * @api public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

URL.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
URL.extractProtocol = extractProtocol;
URL.location = lolcation;
URL.qs = qs;

module.exports = URL;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 2)))

/***/ }),
/* 35 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 36 */
/* unknown exports provided */
/* all exports used */
/*!*************************!*\
  !*** ./gods/js/gods.js ***!
  \*************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sceneIntro = __webpack_require__(/*! scenes/sceneIntro */ 43);

var _sceneIntro2 = _interopRequireDefault(_sceneIntro);

var _sceneLevel = __webpack_require__(/*! scenes/sceneLevel1 */ 44);

var _sceneLevel2 = _interopRequireDefault(_sceneLevel);

var _sceneMenu = __webpack_require__(/*! scenes/sceneMenu */ 45);

var _sceneMenu2 = _interopRequireDefault(_sceneMenu);

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* Automatically append every sprite files to the Gods build: since there's no way to dynamically load
   scripts when using Webpack we tell it to add every sprite to our build.
 */
var req = __webpack_require__(/*! sprites/ */ 38);
req.keys().forEach(function (key) {
    req(key);
});

/*jshint devel: true*/

var GodsClass = function (_Game) {
    _inherits(GodsClass, _Game);

    function GodsClass(options) {
        _classCallCheck(this, GodsClass);

        // intro
        var _this = _possibleConstructorReturn(this, (GodsClass.__proto__ || Object.getPrototypeOf(GodsClass)).call(this, options));

        _this.currentLevel = -1;

        /* debug stuff */
        _this.moveMouseCb = _this.moveInspector.bind(_this);
        return _this;
    }

    _createClass(GodsClass, [{
        key: 'onEvent',
        value: function onEvent(event) {
            switch (event.type) {
                case 'game:gotoMenu':
                    this.setScene(_sceneMenu2.default);
                    break;

                case 'game:startGame':
                    this.setScene(_sceneLevel2.default);
                    break;

                case 'game:gameover':
                case 'game:exitLevel':
                    // this.stopScene();
                    this.setScene(_sceneIntro2.default);
                    break;
            }
        }
    }, {
        key: 'toggleTileInspector',
        value: function toggleTileInspector() {
            if (this.scene.map && this.scene.map.isDebug) {
                if (!this.tileInspector) {
                    this.tileInspector = new _athenajs.Dom('div').css({
                        border: '1px dotted white',
                        'background-color': 'rgba(0,0,0,.7)',
                        color: 'white',
                        width: this.scene.map.tileWidth + 'px',
                        height: this.scene.map.tileHeight + 'px',
                        'z-index': 10,
                        position: 'absolute',
                        'pointer-events': 'none'
                    }).appendTo(this.target);
                }
                this.tileInspector.show();
                this.target.addEventListener('mousemove', this.moveMouseCb, false);
            } else {
                this.target.removeEventListener('mousemove', this.moveMouseCb);
                this.tileInspector.hide();
            }
        }
    }, {
        key: 'moveInspector',
        value: function moveInspector(event) {
            console.log(event.offsetX, event.offsetY);
            var map = this.scene.map;
            var offsetX = event.offsetX > 0 ? event.offsetX : 0;
            var offsetY = event.offsetY > 0 ? event.offsetY : 0;
            var pos = map.getTilePos(offsetX, offsetY);
            this.tileInspector.html(pos.x + ', ' + pos.y + '<br />Type: ' + map.tileTypes[pos.x + pos.y * map.numCols]).css({
                left: pos.x * map.tileWidth + 'px',
                top: pos.y * map.tileHeight + 'px'
            });
        }
    }]);

    return GodsClass;
}(_athenajs.Game);

;

window.Gods = new GodsClass({
    debug: false,
    name: 'Gods',
    target: '.main',
    showFps: true,
    width: 1024,
    height: 768,
    sound: true
});

window.Gods.onReady(function () {
    var _this2 = this;

    this.setScene(_sceneIntro2.default);
    //this.setScene(sceneLevel1);

    // debug stuff
    document.body.addEventListener('keyup', function (event) {
        if (event.keyCode === 68) {
            console.log('debug');
            // scene debug
            _this2.scene.debug();
            _this2.toggleTileInspector();
        }
        if (event.keyCode === 82) {
            _this2.scene.stop();

            _this2.scene.resume();
        }

        if (event.keyCode === 80) {
            _this2.togglePauseGame();
        }

        if (event.keyCode === 83) {
            _this2.toggleSound(!that.sound);
        }

        if (event.keyCode === 72) {
            if (_this2.scene.hudScene) {
                var opacity = _this2.scene.hudScene.getOpacity();
                _this2.scene.hudScene.setOpacity(opacity ? 0 : 1);
            }
        }
    });
});

/***/ }),
/* 37 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://127.0.0.1:8888 ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__resourceQuery) {/* global __resourceQuery */
var url = __webpack_require__(/*! url */ 100);
var stripAnsi = __webpack_require__(/*! strip-ansi */ 98);
var socket = __webpack_require__(/*! ./socket */ 103);
var overlay = __webpack_require__(/*! ./overlay */ 102);

function getCurrentScriptSource() {
	// `document.currentScript` is the most accurate way to find the current script,
	// but is not supported in all browsers.
	if(document.currentScript)
		return document.currentScript.getAttribute("src");
	// Fall back to getting all scripts in the document.
	var scriptElements = document.scripts || [];
	var currentScript = scriptElements[scriptElements.length - 1];
	if(currentScript)
		return currentScript.getAttribute("src");
	// Fail as there was no script to use.
	throw new Error("[WDS] Failed to get current script source");
}

var urlParts;
if(true) {
	// If this bundle is inlined, use the resource query to get the correct url.
	urlParts = url.parse(__resourceQuery.substr(1));
} else {
	// Else, get the url from the <script> this file was called with.
	var scriptHost = getCurrentScriptSource();
	scriptHost = scriptHost.replace(/\/[^\/]+$/, "");
	urlParts = url.parse((scriptHost ? scriptHost : "/"), false, true);
}

var hot = false;
var initial = true;
var currentHash = "";
var logLevel = "info";
var useWarningOverlay = false;
var useErrorOverlay = false;

function log(level, msg) {
	if(logLevel === "info" && level === "info")
		return console.log(msg);
	if(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning")
		return console.warn(msg);
	if(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error")
		return console.error(msg);
}

// Send messages to the outside, so plugins can consume it.
function sendMsg(type, data) {
	if(typeof self !== "undefined" && self.window) {
		self.postMessage({
			type: "webpack" + type,
			data: data
		}, "*");
	}
}

var onSocketMsg = {
	hot: function() {
		hot = true;
		log("info", "[WDS] Hot Module Replacement enabled.");
	},
	invalid: function() {
		log("info", "[WDS] App updated. Recompiling...");
		sendMsg("Invalid");
	},
	hash: function(hash) {
		currentHash = hash;
	},
	"still-ok": function() {
		log("info", "[WDS] Nothing changed.")
		if(useWarningOverlay || useErrorOverlay) overlay.clear();
		sendMsg("StillOk");
	},
	"log-level": function(level) {
		logLevel = level;
	},
	"overlay": function(overlay) {
		if(typeof document !== "undefined") {
			if(typeof(overlay) === "boolean") {
				useWarningOverlay = overlay;
				useErrorOverlay = overlay;
			} else if(overlay) {
				useWarningOverlay = overlay.warnings;
				useErrorOverlay = overlay.errors;
			}
		}
	},
	ok: function() {
		sendMsg("Ok");
		if(useWarningOverlay || useErrorOverlay) overlay.clear();
		if(initial) return initial = false;
		reloadApp();
	},
	"content-changed": function() {
		log("info", "[WDS] Content base changed. Reloading...")
		self.location.reload();
	},
	warnings: function(warnings) {
		log("info", "[WDS] Warnings while compiling.");
		var strippedWarnings = warnings.map(function(warning) {
			return stripAnsi(warning);
		});
		sendMsg("Warnings", strippedWarnings);
		for(var i = 0; i < strippedWarnings.length; i++)
			console.warn(strippedWarnings[i]);
		if(useWarningOverlay) overlay.showMessage(warnings);

		if(initial) return initial = false;
		reloadApp();
	},
	errors: function(errors) {
		log("info", "[WDS] Errors while compiling. Reload prevented.");
		var strippedErrors = errors.map(function(error) {
			return stripAnsi(error);
		});
		sendMsg("Errors", strippedErrors);
		for(var i = 0; i < strippedErrors.length; i++)
			console.error(strippedErrors[i]);
		if(useErrorOverlay) overlay.showMessage(errors);
	},
	close: function() {
		log("error", "[WDS] Disconnected!");
		sendMsg("Close");
	}
};

var hostname = urlParts.hostname;
var protocol = urlParts.protocol;


//check ipv4 and ipv6 `all hostname`
if(hostname === "0.0.0.0" || hostname === "::") {
	// why do we need this check?
	// hostname n/a for file protocol (example, when using electron, ionic)
	// see: https://github.com/webpack/webpack-dev-server/pull/384
	if(self.location.hostname && !!~self.location.protocol.indexOf("http")) {
		hostname = self.location.hostname;
	}
}

// `hostname` can be empty when the script path is relative. In that case, specifying
// a protocol would result in an invalid URL.
// When https is used in the app, secure websockets are always necessary
// because the browser doesn't accept non-secure websockets.
if(hostname && (self.location.protocol === "https:" || urlParts.hostname === "0.0.0.0")) {
	protocol = self.location.protocol;
}

var socketUrl = url.format({
	protocol: protocol,
	auth: urlParts.auth,
	hostname: hostname,
	port: (urlParts.port === "0") ? self.location.port : urlParts.port,
	pathname: urlParts.path == null || urlParts.path === "/" ? "/sockjs-node" : urlParts.path
});

socket(socketUrl, onSocketMsg);

var isUnloading = false;
self.addEventListener("beforeunload", function() {
	isUnloading = true;
});

function reloadApp() {
	if(isUnloading) {
		return;
	}
	if(hot) {
		log("info", "[WDS] App hot update...");
		var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ 105);
		hotEmitter.emit("webpackHotUpdate", currentHash);
		if(typeof self !== "undefined" && self.window) {
			// broadcast update to window
			self.postMessage("webpackHotUpdate" + currentHash, "*");
		}
	} else {
		log("info", "[WDS] App updated. Reloading...");
		self.location.reload();
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, "?http://127.0.0.1:8888"))

/***/ }),
/* 38 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./gods/js/sprites nonrecursive ^(.*\.(js$))[^.]*$/gi ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./BitmapFont.js": 46,
	"./DeathExplosion.js": 47,
	"./Enemy1.js": 48,
	"./EnemyExplosion.js": 49,
	"./FlyingEnemy1.js": 50,
	"./Gem.js": 51,
	"./GodsSprite.js": 52,
	"./LifeMetter.js": 53,
	"./LifeMetterMask.js": 54,
	"./MovingPlatform.js": 55,
	"./SmallItem.js": 56,
	"./Spear.js": 57,
	"./SpearWood.js": 58,
	"./Switch.js": 59,
	"./Weapon.js": 60
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 38;

/***/ }),
/* 39 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/ansi-html/index.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),
/* 40 */
/* unknown exports provided */
/* all exports used */
/*!*******************************!*\
  !*** ./~/ansi-regex/index.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),
/* 41 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./gods/js/maps/GodsMap.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// here we only extend Map to override addObject and keep track of switch objects
var GodsMap = function (_Map) {
    _inherits(GodsMap, _Map);

    function GodsMap(options) {
        _classCallCheck(this, GodsMap);

        var _this = _possibleConstructorReturn(this, (GodsMap.__proto__ || Object.getPrototypeOf(GodsMap)).call(this, options));

        _this.reset();
        return _this;
    }

    _createClass(GodsMap, [{
        key: 'reset',
        value: function reset() {
            this._switches = {};

            _get(GodsMap.prototype.__proto__ || Object.getPrototypeOf(GodsMap.prototype), 'reset', this).call(this);
        }
    }, {
        key: 'addObject',
        value: function addObject(obj) {
            _get(GodsMap.prototype.__proto__ || Object.getPrototypeOf(GodsMap.prototype), 'addObject', this).call(this, obj);

            // console.log('addObject', obj.type);

            // add switch to the list
            if (obj.type === 'switch') {
                this._switches[obj.id] = obj;
            }
        }
    }, {
        key: 'getSwitchAboveMaster',
        value: function getSwitchAboveMaster() {
            var switchSprite = null,
                master = this.masterObject,
                masterHitBox = master.getHitBox(),
                hitBox = null,
                masterCenterPos = master.x + master.getCurrentWidth() / 2,
                box = {
                x: master.x,
                y: master.y,
                x2: master.x + masterHitBox.x2,
                y2: master.y + masterHitBox.y2
            },
                id;

            for (id in this._switches) {
                switchSprite = this._switches[id];
                hitBox = switchSprite.getHitBox();

                if (switchSprite.x + hitBox.x2 >= masterCenterPos && switchSprite.x <= masterCenterPos) {
                    if (switchSprite.y + hitBox.y2 >= master.y - 5 && switchSprite.y <= box.y2 + 5) {
                        break;
                    }
                } else {
                    switchSprite = null;
                }
            }
            return switchSprite;
        }
    }]);

    return GodsMap;
}(_athenajs.Map);

;

exports.default = GodsMap;

/***/ }),
/* 42 */
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ./gods/js/scenes/sceneHud.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
import Scene from 'Scene/Scene';
import Pool from 'Core/Pool';
import ResourceManager from 'Resource/ResourceManager';
*/

var GodsHudScene = function (_Scene) {
    _inherits(GodsHudScene, _Scene);

    function GodsHudScene() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, GodsHudScene);

        var _this = _possibleConstructorReturn(this, (GodsHudScene.__proto__ || Object.getPrototypeOf(GodsHudScene)).call(this, {
            name: 'godsHud',
            resources: [{
                id: 'objects',
                type: 'image',
                src: 'gods/img/gods_objects.png'
            },
            // objects
            // { id: 'life_metter', type: 'script', src: 'gods/js/sprites/LifeMetter.js' },
            // { id: 'life_metter_mask', type: 'script', src: 'gods/js/sprites/LifeMetterMask.js' },
            {
                id: 'font',
                type: 'image',
                src: 'gods/img/bitmapFont.png'
            }]
        }));

        _this.inventory = new Array(3);

        _this.setOptions();

        // listen to player specific events
        _this.bindEvents('player:hit player:coins player:item player:death game:message');

        // TODO: there is: reset() which resets everything to default
        // AND (TODO!) restart() which resets only some parts
        _this.lives = 3;
        _this.points = 0;
        _this.money = 0;
        _this.weapon = null;
        return _this;
    }

    _createClass(GodsHudScene, [{
        key: 'reset',
        value: function reset() {
            // runtime
            this.energy = this.maxEnergy;
        }
    }, {
        key: 'setOptions',
        value: function setOptions(options) {
            options = options || {};

            this.messages = options.messages || [];
            this.maxEnergy = options.maxEnergy || 10;
            this.maxLives = options.maxLives || 10;
        }
    }, {
        key: 'unpause',
        value: function unpause() {
            console.log('unpause');
            _get(GodsHudScene.prototype.__proto__ || Object.getPrototypeOf(GodsHudScene.prototype), 'unpause', this).call(this);
        }

        // we listen for player hit, points,...

    }, {
        key: 'onEvent',
        value: function onEvent(event) {
            if (event.type === 'player:hit') {
                this.lifeMetter.updateMetterHeight(event.data.damage);
            } else if (event.type === 'player:death') {
                if (--this.lives < 1) {
                    this.notify('game:gameover');
                } else {
                    console.log('notify lost live');
                    this.notify('game:restart');
                }
            } else if (event.type === 'game:message') {
                // console.log('sceneHud: got message', event.data.message);
                this.info.setText(event.data.message);
            }
        }
    }, {
        key: 'start',
        value: function start() {
            console.log('[sceneHud] Starting Scene!');
            this.reset();

            this.addHudElements();
        }
    }, {
        key: 'addHudElements',
        value: function addHudElements() {
            /*
            var LifeMetter = require("sprites/LifeMetter").default,
                Lives = require('sprites/SmallItem').default;
            */
            var LifeMetter = _athenajs.ResourceManager.getResourceById('LifeMetter'),
                Lives = _athenajs.ResourceManager.getResourceById('SmallItem');

            // add life metter
            this.lifeMetter = new LifeMetter({
                x: 32,
                y: 544,
                maxEnergy: this.maxEnergy
            });

            this.addObject(this.lifeMetter);

            // add lives
            for (var i = 0; i < this.lives - 1; i++) {
                this.addObject(new Lives({
                    data: {
                        itemType: 'life'
                    },
                    x: 31 * i,
                    y: 0
                }));
            }

            // add info element
            // var Text = require('sprites/BitmapFont').default;
            var Text = _athenajs.ResourceManager.getResourceById('BitmapFont');

            this.info = new Text('infoTxt', {
                w: 400,
                h: 18,
                x: 300,
                y: 640,
                scrollOffsetX: 0,
                scrollOffsetY: 0,
                text: ''
            });

            // info.visible = false;

            this.addObject(this.info);
        }
    }, {
        key: 'stop',
        value: function stop() {
            console.log('stop');
            /*                Input.clearEvents();*/

            _get(GodsHudScene.prototype.__proto__ || Object.getPrototypeOf(GodsHudScene.prototype), 'stop', this).call(this);
        }
    }]);

    return GodsHudScene;
}(_athenajs.Scene);

;

exports.default = new GodsHudScene();

/***/ }),
/* 43 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./gods/js/scenes/sceneIntro.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import Scene from 'Scene/Scene';
// import Text from 'Object/Text';
// import Sprite from 'Object/Sprite';
// import Menu from 'Object/Menu';
// import AM from 'Audio/AudioManager';
// import Input from 'Input/InputManager';

console.log(_athenajs.Scene, _athenajs.Text, _athenajs.Sprite, _athenajs.Menu, _athenajs.AudioManager, _athenajs.InputManager);

var SceneIntro = function (_Scene) {
    _inherits(SceneIntro, _Scene);

    function SceneIntro() {
        _classCallCheck(this, SceneIntro);

        var _this = _possibleConstructorReturn(this, (SceneIntro.__proto__ || Object.getPrototypeOf(SceneIntro)).call(this, {
            name: 'intro',
            resources: [
            // images
            {
                id: 'intro',
                type: 'image',
                src: 'gods/img/godsIntro.jpg'
            }, {
                id: 'restart',
                type: 'audio',
                src: 'gods/audio/restart.mp3'
            }]
        }));

        console.log('retur super sceneIntro');
        return _this;
    }

    _createClass(SceneIntro, [{
        key: 'onLoad',
        value: function onLoad() {
            _get(SceneIntro.prototype.__proto__ || Object.getPrototypeOf(SceneIntro.prototype), 'onLoad', this).call(this);
            var that = this;

            console.log('[scene ' + this.name + '] ' + 'onLoad');

            this.titleScreen = new _athenajs.Sprite('intro', {
                imageSrc: 'intro',
                x: 0,
                y: 0,
                animations: {
                    intro: {
                        speed: 3,
                        frames: [{
                            offsetX: 0,
                            offsetY: 0,
                            w: 1024,
                            h: 768,
                            hitBox: {}
                        }],
                        loop: 0
                    }
                }
            });
        }
    }, {
        key: 'start',
        value: function start() {
            var _this2 = this;

            _get(SceneIntro.prototype.__proto__ || Object.getPrototypeOf(SceneIntro.prototype), 'start', this).call(this);

            var that = this;

            _athenajs.InputManager.clearEvents();

            /*
            Input.installKeyCallback('ENTER', 'up', () => {
            });
            */

            _athenajs.AudioManager.play('restart');

            this.animate('Fade', {
                startValue: 0,
                endValue: 1,
                duration: 1000
            }).then(function () {
                setTimeout(function () {
                    _this2.animate('Fade', {
                        startValue: 1,
                        endValue: 0,
                        duration: 1000
                    }).then(function () {
                        console.log('fade ended');
                        _this2.notify('game:startGame');
                    });
                }, 2000);
            });

            this.addObject(this.titleScreen);
        }
    }, {
        key: 'stop',
        value: function stop() {
            _athenajs.InputManager.clearEvents();
            _get(SceneIntro.prototype.__proto__ || Object.getPrototypeOf(SceneIntro.prototype), 'stop', this).call(this);
        }
    }, {
        key: 'debug',
        value: function debug() {}
    }, {
        key: 'run',
        value: function run() {
            //                var rotate = this.menuObject.getAngle();
            _get(SceneIntro.prototype.__proto__ || Object.getPrototypeOf(SceneIntro.prototype), 'run', this).call(this);
        }
    }]);

    return SceneIntro;
}(_athenajs.Scene);

;

console.log('end sceneIntro');

exports.default = new SceneIntro();

/***/ }),
/* 44 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./gods/js/scenes/sceneLevel1.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

var _GodsMap = __webpack_require__(/*! maps/GodsMap */ 41);

var _GodsMap2 = _interopRequireDefault(_GodsMap);

var _sceneHud = __webpack_require__(/*! scenes/sceneHud */ 42);

var _sceneHud2 = _interopRequireDefault(_sceneHud);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var godsLevel1 = function (_Scene) {
    _inherits(godsLevel1, _Scene);

    function godsLevel1() {
        _classCallCheck(this, godsLevel1);

        return _possibleConstructorReturn(this, (godsLevel1.__proto__ || Object.getPrototypeOf(godsLevel1)).call(this, {
            name: 'level1',
            hudScene: _sceneHud2.default,
            resources: [
            // images
            {
                id: 'sprites',
                type: 'image',
                src: 'gods/img/sprites_blue.png'
            }, {
                id: 'tiles',
                type: 'image',
                src: 'gods/img/gods_sprites_tiles_level1.png'
            }, {
                id: 'objects',
                type: 'image',
                src: 'gods/img/gods_objects.png'
            }, {
                id: 'enemies',
                type: 'image',
                src: 'gods/img/godsSpritesLevel1.png'
            }, {
                id: 'font',
                type: 'image',
                src: 'gods/img/bitmapFont.png'
            },

            // maps
            {
                id: 'mapLevel1',
                type: 'map',
                src: 'gods/js/maps/mapLevel1.json'
            },

            // objects
            /*
            {
                id: 'Gem',
                type: 'script',
                src: 'sprites/Gem'
            },{
                id: 'spear',
                type: 'script',
                src: 'gods/js/sprites/Spear.js',
                poolSize: 20
            }, {
                id: 'spear-wood',
                type: 'script',
                src: 'gods/js/sprites/SpearWood.js'
            }, {
                id: 'smallItem',
                type: 'script',
                src: 'gods/js/sprites/SmallItem.js'
            }, {
                id: 'weapon',
                type: 'script',
                src: 'gods/js/sprites/Weapon.js',
                poolSize: 20
            }, {
                id: 'enemy1',
                type: 'script',
                src: 'gods/js/sprites/Enemy1.js',
                poolSize: 20
            }, {
                id: 'flying-enemy1',
                type: 'script',
                src: 'gods/js/sprites/FlyingEnemy1.js',
                poolSize: 5
            }, {
                id: 'switch',
                type: 'script',
                src: 'gods/js/sprites/Switch.js'
            }, {
                id: 'gods',
                type: 'script',
                src: 'gods/js/sprites/GodsSprite.js'
            }, {
                id: 'death_explosion',
                type: 'script',
                src: 'gods/js/sprites/DeathExplosion.js'
            }, {
                id: 'enemy_explosion',
                type: 'script',
                src: 'gods/js/sprites/EnemyExplosion.js'
            }, {
                id: 'moving_platform',
                type: 'script',
                src: 'gods/js/sprites/MovingPlatform.js'
            },*/

            // bitmap fonts
            // {
            //     id: 'BitmapFont',
            //     type: 'script',
            //     src: 'gods/js/sprites/BitmapFont.js'
            // },

            // sound
            {
                id: 'step_left',
                type: 'audio',
                src: 'gods/audio/step/step_left.wav'
            }, {
                id: 'step_right',
                type: 'audio',
                src: 'gods/audio/step/step_right.wav'
            }, {
                id: 'jump',
                type: 'audio',
                src: 'gods/audio/jump.wav'
            }, {
                id: 'restart',
                type: 'audio',
                src: 'gods/audio/restart.wav'
            }, {
                id: 'appearLeft',
                type: 'audio',
                src: 'gods/audio/hostile_appearing_left/mid2.wav'
            }, {
                id: 'bounce',
                type: 'audio',
                src: 'gods/audio/bounce/1.wav'
            }, {
                id: 'hit2',
                type: 'audio',
                src: 'gods/audio/hero_hurt/hurt_2.wav'
            }, {
                id: 'explode1',
                type: 'audio',
                src: 'gods/audio/explosion_ground/explosion_ground_1.wav'
            }, {
                id: 'explode2',
                type: 'audio',
                src: 'gods/audio/explosion_ground/explosion_ground_2.wav'
            }, {
                id: 'land',
                type: 'audio',
                src: 'gods/audio/land.wav'
            }, {
                id: 'death',
                type: 'audio',
                src: 'gods/audio/hero_death.wav'
            }, {
                id: 'spike',
                type: 'audio',
                src: 'gods/audio/spike.wav'
            }, {
                id: 'weapon_throw',
                type: 'audio',
                src: 'gods/audio/weapon_throw.wav'
            }, {
                id: 'leverActivated',
                type: 'audio',
                src: 'gods/audio/lever_activated.wav'
            }, {
                id: 'take_bonus',
                type: 'audio',
                src: 'gods/audio/take_bonus.wav'
            }, {
                id: 'weapon_crash',
                type: 'audio',
                src: 'gods/audio/weapon_crash.wav'
            }]
        }));
    }

    _createClass(godsLevel1, [{
        key: 'onLoad',
        value: function onLoad() {
            console.log('[sceneLevel1] onLoad');

            _get(godsLevel1.prototype.__proto__ || Object.getPrototypeOf(godsLevel1.prototype), 'onLoad', this).call(this);

            var that = this;

            console.log('[scene ' + this.name + '] ' + 'onLoad');

            this.setMap(new _GodsMap2.default(_athenajs.ResourceManager.getResourceById('mapLevel1')));

            // this.setMap(RM.getResourceById('mapLevel1'));
        }
    }, {
        key: 'pause',
        value: function pause() {
            this.pauseText.show();
            _get(godsLevel1.prototype.__proto__ || Object.getPrototypeOf(godsLevel1.prototype), 'pause', this).call(this);
        }
    }, {
        key: 'unpause',
        value: function unpause() {
            console.log('unpause');
            this.pauseText.hide();
            _get(godsLevel1.prototype.__proto__ || Object.getPrototypeOf(godsLevel1.prototype), 'unpause', this).call(this);
        }
    }, {
        key: 'start',
        value: function start(doNotResetMap) {
            var _this2 = this;

            _athenajs.InputManager.clearEvents();

            _athenajs.InputManager.installKeyCallback('ESCAPE', 'up', function () {
                _athenajs.InputManager.clearEvents();

                _this2.animate('Fade', {
                    startValue: 1,
                    endValue: 0
                }).then(function () {
                    _this2.notify('game:exitLevel');
                });
            });

            _athenajs.AudioManager.play('restart');

            this.hudScene.setOpacity(0);
            this.setOpacity(1);

            this.animate('Mosaic', {
                when: 'post',
                duration: 800,
                startValue: 0.00005,
                endValue: 0.3,
                easing: 'linear'
            });

            _get(godsLevel1.prototype.__proto__ || Object.getPrototypeOf(godsLevel1.prototype), 'start', this).call(this, doNotResetMap);

            /*                this.pauseText = new Text('pause', {
                        text: 'P A U S E',
                        color: 'white',
                        fontSize: '25px'
                    }).moveTo(200, 300).hide();*/

            // this.map.addObject(new(RM.getResourceById('MovingPlatform'))({
            //     x: 420,
            //     y: 490
            // }));

            // var text = require('sprites/BitmapFont').default;
            var text = _athenajs.ResourceManager.getResourceById('BitmapFont');

            this.pauseText = new text('infoTxt', {
                size: 'big',
                w: 180,
                h: 32,
                visible: false,
                scrollOffsetX: 0,
                scrollOffsetY: 0,
                text: 'pause'
            });

            this.addObject(this.pauseText);

            this.pauseText.center();

            this.pauseText.y -= 100;

            this.bindEvents('game:restart');
        }
    }, {
        key: 'onEvent',
        value: function onEvent(event) {
            var _this3 = this;

            if (event.type === 'game:restart') {
                setTimeout(function () {
                    _this3.stop();
                    _this3.resume();
                }, 0);
            }
        }
    }, {
        key: 'stop',
        value: function stop() {
            _athenajs.InputManager.clearEvents();

            _get(godsLevel1.prototype.__proto__ || Object.getPrototypeOf(godsLevel1.prototype), 'stop', this).call(this);
        }
    }, {
        key: 'debug',
        value: function debug() {
            this.map.debug(!this.map.isDebug);
        }
    }]);

    return godsLevel1;
}(_athenajs.Scene);

;

exports.default = new godsLevel1();

/***/ }),
/* 45 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./gods/js/scenes/sceneMenu.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var sceneMenu = function (_Scene) {
    _inherits(sceneMenu, _Scene);

    function sceneMenu() {
        _classCallCheck(this, sceneMenu);

        var _this = _possibleConstructorReturn(this, (sceneMenu.__proto__ || Object.getPrototypeOf(sceneMenu)).call(this, {
            name: 'menu',
            resources: [
            // images
            { id: 'intro', type: 'image', src: 'gods/img/godsIntro.jpg' }, { id: 'restart', type: 'audio', src: 'gods/audio/restart.mp3' }]
        }));

        _this.menuObject = new _athenajs.Menu('mainMenu', {
            title: 'Gods JS',
            color: 'white',
            menuItems: [{
                text: '> Start Game',
                selectable: true,
                visible: true,
                active: true
            }, {
                text: '> Cannot Select ;)',
                selectable: true,
                visible: true
            }]
        }).moveTo(350, 250);
        return _this;
    }

    _createClass(sceneMenu, [{
        key: 'onLoad',
        value: function onLoad() {
            _get(sceneMenu.prototype.__proto__ || Object.getPrototypeOf(sceneMenu.prototype), 'onLoad', this).call(this);

            var that = this;

            console.log('[scene ' + this.name + '] ' + 'onLoad');

            // ** this.setBackgroundImage(Game.RM.getResourceById('intro', undefined, true).img.src);
        }
    }, {
        key: 'start',
        value: function start() {
            _get(sceneMenu.prototype.__proto__ || Object.getPrototypeOf(sceneMenu.prototype), 'start', this).call(this);

            var that = this;

            _athenajs.InputManager.clearEvents();

            _athenajs.InputManager.installKeyCallback('DOWN', 'up', function () {
                console.log('down');
                that.menuObject.nextItem();
            });

            _athenajs.InputManager.installKeyCallback('ENTER', 'up', function () {
                console.log('selectedMenu', that.menuObject.getSelectedItemIndex());
                if (that.menuObject.getSelectedItemIndex() === 0) {
                    that.notify('game:startGame');
                } else {
                    that.notify('game:DTC!!!');
                }
            });

            _athenajs.AudioManager.play('restart');

            this.addObject(this.menuObject);
        }
    }, {
        key: 'stop',
        value: function stop() {
            _athenajs.InputManager.clearEvents();
            _get(sceneMenu.prototype.__proto__ || Object.getPrototypeOf(sceneMenu.prototype), 'stop', this).call(this);
        }
    }, {
        key: 'debug',
        value: function debug() {}
    }]);

    return sceneMenu;
}(_athenajs.Scene);

;

exports.default = new sceneMenu();

/***/ }),
/* 46 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./gods/js/sprites/BitmapFont.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var BitmapFont = function (_BitmapText) {
	_inherits(BitmapFont, _BitmapText);

	function BitmapFont(type, options) {
		_classCallCheck(this, BitmapFont);

		return _possibleConstructorReturn(this, (BitmapFont.__proto__ || Object.getPrototypeOf(BitmapFont)).call(this, type, Object.assign(options, {
			offsetX: 34,
			bmStartY: 36,
			charWidth: 16,
			charHeight: 18,
			imageSrc: 'font'
		})));
		// options = options || {};

		// var size = options.size || 'small';

		// options.imageSrc = 'font';

		// if (size === 'small') {
		// 	options.offsetX = 34;
		// 	options.bmStartY = 36,
		// 	options.charWidth = 16;
		// 	options.charHeight = 18;
		// } else {
		// 	// TODO
		// 	options.offsetX = 34;
		// 	options.bmStartY = 2,
		// 	options.charWidth = 32;
		// 	options.charHeight = 32;
		//   options.lineSpacing = 3;
		//   options.letterSpacing = 4;
		// }

		// // SUPERHEREthis._super(type, options);
	}

	return BitmapFont;
}(_athenajs.BitmapText);

_athenajs.ResourceManager.registerScript('BitmapFont', BitmapFont);

exports.default = BitmapFont;

/***/ }),
/* 47 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./gods/js/sprites/DeathExplosion.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var DeathExplosion = function (_Sprite) {
	_inherits(DeathExplosion, _Sprite);

	function DeathExplosion(options) {
		_classCallCheck(this, DeathExplosion);

		return _possibleConstructorReturn(this, (DeathExplosion.__proto__ || Object.getPrototypeOf(DeathExplosion)).call(this, 'death_explosion', {
			imageSrc: 'enemies',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: false,
			animations: {
				mainLoop: {
					frameDuration: 3,
					frames: [{
						offsetX: 396,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 462,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 528,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 594,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 660,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 726,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 792,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 858,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 924,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 990,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1056,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1122,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1188,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1254,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1320,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1386,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 1452,
						offsetY: 298,
						w: 64,
						h: 64,
						plane: 0
					}],
					loop: 0
				}
			}
		}));
		// options = options || {};

		// options.x = typeof options.x !== 'undefined' ? options.x : 600;
		// options.y = typeof options.y !== 'undefined' ? options.y : 300;
	}

	_createClass(DeathExplosion, [{
		key: 'reset',
		value: function reset() {
			_get(DeathExplosion.prototype.__proto__ || Object.getPrototypeOf(DeathExplosion.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			this.setAnimation('mainLoop');

			this.running = true;
		}
	}]);

	return DeathExplosion;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('DeathExplosion', DeathExplosion);

exports.default = DeathExplosion;

/***/ }),
/* 48 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./gods/js/sprites/Enemy1.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var Enemy = function (_Sprite) {
    _inherits(Enemy, _Sprite);

    function Enemy(options) {
        _classCallCheck(this, Enemy);

        return _possibleConstructorReturn(this, (Enemy.__proto__ || Object.getPrototypeOf(Enemy)).call(this, 'enemy1', Object.assign({
            x: 600,
            y: 159,
            canCollide: false,
            collideGroup: 1,
            canCollideFriendBullet: true,
            imageSrc: 'enemies',
            data: {
                direction: 'Left',
                health: 1,
                speed: 1
            },
            animations: {
                mainLoopRight: {
                    frameDuration: 5,
                    frames: [{
                        offsetX: 594,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 660,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 726,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 792,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 858,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 924,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 990,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 1056,
                        offsetY: 562,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }],
                    loop: 1
                },
                mainLoopLeft: {
                    frameDuration: 5,
                    frames: [{
                        offsetX: 1122,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 1056,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 990,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 924,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 858,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 792,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 726,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 660,
                        offsetY: 628,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 6,
                            y: 0,
                            x2: 57,
                            y2: 63
                        },
                        plane: 0
                    }],
                    loop: 1
                },
                apparition: {
                    frameDuration: 3,
                    frames: [{
                        offsetX: 594,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 660,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 726,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 792,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 858,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 924,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 990,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 1056,
                        offsetY: 694,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }],
                    loop: 0
                },
                explosion: {
                    frameDuration: 3,
                    frames: [{
                        offsetX: 594,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 660,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 726,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 792,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 858,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 924,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 990,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }, {
                        offsetX: 1056,
                        offsetY: 364,
                        w: 64,
                        h: 64,
                        hitBox: {
                            x: 0,
                            y: 0,
                            x2: 63,
                            y2: 63
                        },
                        plane: 0
                    }],
                    loop: 0
                }
            }
        }, options)));
    }

    _createClass(Enemy, [{
        key: 'reset',
        value: function reset(dir) {
            _get(Enemy.prototype.__proto__ || Object.getPrototypeOf(Enemy.prototype), 'reset', this).call(this);

            _athenajs.AudioManager.play('appearLeft');

            this.running = true;
            this.moving = false;

            this._visible = true;

            this.health = this._settings.data.health;
            this.speed = this._settings.data.speed;

            this.currentMovement = '';

            this.setAnimation('apparition', this.onAppeared.bind(this));
        }

        // called once enemy has finished apparitionAnimation

    }, {
        key: 'onAppeared',
        value: function onAppeared() {
            var _this2 = this;

            this.appeared = true;

            this.moving = true;

            this.canCollide = true;

            this.setAnimation(this._settings.data.direction === 'Left' ? 'mainLoopLeft' : 'mainLoopRight');

            this.setBehavior('ground', {
                vx: this._settings.data.direction === 'Left' ? -this.speed : this.speed,
                vy: 0,
                gravity: 0,
                onVXChange: function onVXChange(vx) {
                    if (vx < 0) {
                        _this2.setAnimation('mainLoopLeft');
                    } else {
                        _this2.setAnimation('mainLoopRight');
                    }
                }
            });
        }
    }, {
        key: 'onCollision',
        value: function onCollision(sprite) {
            // TODO: add an Enemy class and inherit from this class so we do not have
            // to put code for each and every enemy variant
            if (this.canCollide) {
                this.moving = false;
                _athenajs.AudioManager.play('explode1');
                this.canCollide = false;

                // group stuff
                if (this.wave) {
                    this.wave.remove(this);
                }

                this.setAnimation('explosion', function () {
                    this.destroy();
                });
            }
        }
    }]);

    return Enemy;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('Enemy1', Enemy);

exports.default = Enemy;

/***/ }),
/* 49 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./gods/js/sprites/EnemyExplosion.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var EnemyExplosion = function (_Sprite) {
	_inherits(EnemyExplosion, _Sprite);

	function EnemyExplosion() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, EnemyExplosion);

		var _this = _possibleConstructorReturn(this, (EnemyExplosion.__proto__ || Object.getPrototypeOf(EnemyExplosion)).call(this, 'death_explosion', {
			imageSrc: 'enemies',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: false,
			animations: {
				mainLoop: {
					frameDuration: 3,
					frames: [{
						offsetX: 594,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 660,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 726,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 792,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 858,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 924,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}, {
						offsetX: 990,
						offsetY: 364,
						w: 64,
						h: 64,
						plane: 0
					}],
					loop: 0
				}
			}
		}));
		// options = options || {};

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;
		return _this;
	}

	_createClass(EnemyExplosion, [{
		key: 'reset',
		value: function reset() {

			_get(EnemyExplosion.prototype.__proto__ || Object.getPrototypeOf(EnemyExplosion.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			this.setAnimation('mainLoop', function () {
				this.destroy();
			});

			this.running = true;

			_athenajs.AudioManager.play('explode2');
		}
	}]);

	return EnemyExplosion;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('EnemyExplosion', EnemyExplosion);

exports.default = EnemyExplosion;

/***/ }),
/* 50 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./gods/js/sprites/FlyingEnemy1.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var FlyingEnemy1 = function (_Sprite) {
	_inherits(FlyingEnemy1, _Sprite);

	function FlyingEnemy1() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, FlyingEnemy1);

		var _this = _possibleConstructorReturn(this, (FlyingEnemy1.__proto__ || Object.getPrototypeOf(FlyingEnemy1)).call(this, 'flying-enemy1', {
			imageSrc: 'enemies',
			x: options.x,
			y: options.y,
			collideGroup: 1,
			canCollide: true,
			canCollideFriendBullet: true,
			pool: options.pool,
			/*                        canCollide: true,*/
			// animate: {
			// 	name: 'Rotate',
			// 	options: {
			// 		duration: 500,
			// 		startValue: 0,
			// 		endValue: 2*Math.PI,
			// 		easing: 'linear',
			// 		loop: true
			// 	}
			// },
			animations: {
				flyRight: {
					frameDuration: 4,
					frames: [{
						offsetX: 198,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}, {
						offsetX: 264,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}, {
						offsetX: 330,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}],
					loop: 1
				},
				flyLeft: {
					frameDuration: 4,
					frames: [{
						offsetX: 132,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}, {
						offsetX: 66,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}, {
						offsetX: 0,
						offsetY: 364,
						w: 64,
						h: 64,
						hitBox: {
							x: 0,
							y: 0,
							x2: 63,
							y2: 63
						},
						plane: 0
					}],
					loop: 1
				}
			}
		}));
		// options = options || {};

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;
		return _this;
	}

	_createClass(FlyingEnemy1, [{
		key: 'reset',
		value: function reset() {
			var _this2 = this;

			var that = this;

			_get(FlyingEnemy1.prototype.__proto__ || Object.getPrototypeOf(FlyingEnemy1.prototype), 'reset', this).call(this);

			this.dir = 'left';

			this.setBehavior('path', {
				nodes: [-2, 0, -2, 0, -1, 0, -1, 0, -1, 0, -3, 0, -1, 0, -1, 0, -1, 0, -3, 0, -1, 0, -2, 0, -1, 0, -3, -1, -2, 0, -2, 0, -2, -1, -2, 0, -2, -1, -3, -1, -2, -1, -3, -1, -2, -1, -2, -1, -3, -1, -3, -1, -2, -1, -4, -2, -3, -2, -3, -1, -2, -1, -3, -2, -2, -1, -4, -2, -2, -1, -3, -2, -2, -2, -4, -2, -3, -3, -2, -1, -4, -2, -2, -3, -2, -2, -4, -3, -2, -2, -2, -2, -3, -3, -2, -3, -3, -2, -2, -4, -3, -3, -2, -4, -2, -3, -3, -5, -2, -3, -4, -8, -2, -3, -2, -4, -2, -3, -3, -5, -1, -3, -3, -5, -2, -3, -3, -5, -2, -5, -3, -4, -3, -5, -2, -4, -3, -5, -1, -5, -3, -4, -2, -4, -3, -4, -2, -5, -3, -3, -6, -10, -2, -4, -3, -5, -3, -4, -3, -4, -2, -4, -3, -4, -3, -5, -2, -3, -3, -5, -2, -5, -3, -4, -2, -4, -2, -3, -3, -5, -2, -3, -2, -4, -2, -3, -2, -3, -3, -4, -3, -3, -2, -4, -3, -3, -2, -4, -3, -3, -3, -5, -2, -2, -3, -4, -5, -5, -1, -3, -2, -2, -3, -2, -2, -3, -2, -2, -3, -2, -2, -2, -2, -2, -3, -2, -2, -2, -2, -2, -2, -1, -4, -1, -2, -2, -2, -1, -3, -1, -3, -2, -4, -1, -4, -2, -8, -2, -3, -1, -4, -1, -3, 0, -4, -1, -4, 0, -6, 0, -4, 0, -4, 0, -6, 0, -4, 0, -6, 0, -4, 1, -4, 1, -5, 1, -4, 2, -3, 1, -5, 2, -3, 3, -5, 3, -3, 1, -4, 3, -3, 4, -5, 2, -4, 5, -4, 5, -2, 3, -4, 6, -3, 5, -3, 6, -5, 10, -2, 5, -1, 4, 0, 3, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 0, 4, 2, 7, 1, 5, 2, 5, 2, 6, 1, 4, 3, 5, 2, 5, 2, 4, 7, 9, 2, 3, 4, 4, 3, 3, 3, 3, 5, 5, 5, 2, 4, 4, 6, 3, 5, 3, 6, 3, 6, 2, 5, 2, 6, 2, 6, 2, 7, 1, 6, 2, 5, 1, 6, 0, 7, 1, 5, 1, 6, 1, 5, 0, 6, 0, 5, 0, 6, 0, 10, -2, 5, -2, 4, -2, 5, -3, 4, -2, 4, -1, 3, -2, 5, -3, 4, -2, 5, -2, 2, -3, 3, -2, 3, -2, 2, -2, 4, -4, 2, -2, 3, -3, 1, -4, 3, -3, 1, -3, 2, -5, 1, -4, 3, -10, 1, -5, 2, -4, 1, -5, 0, -4, 2, -4, 0, -5, 1, -4, 0, -5, 0, -6, 0, -5, -1, -6, -1, -6, -2, -5, -2, -6, -1, -5, -1, -4, -2, -6, -3, -4, -2, -6, -3, -6, -3, -5, -3, -6, -3, -4, -4, -6, -3, -5, -5, -5, -5, -5, -10, -10, -6, -5, -6, -4, -6, -4, -6, -4, -6, -4, -6, -3, -6, -3, -6, -3, -6, -3, -4, -2, -6, -2, -4, 0, -5, -2, -4, -1, -3, -1, -2, 0, -3, -1, -3, 0, -2, -1, -3, 0, -2, -1, -4, 0, -2, -1, -2, 0, -1, 0, -1, 0],
				reverse: true,
				onVXChange: function onVXChange() {
					if (that.dir === 'left') {
						that.setAnimation('flyRight');
						that.dir = 'right';
					} else {
						that.setAnimation('flyLeft');
						that.dir = 'left';
					}
				},
				onEnd: function onEnd() {
					_this2.moving = false;
				}
			});

			this.currentMovement = '';
			this.setAnimation('flyLeft');

			this.running = true;
		}
	}]);

	return FlyingEnemy1;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('FlyingEnemy1', FlyingEnemy1);

exports.default = FlyingEnemy1;

/***/ }),
/* 51 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** ./gods/js/sprites/Gem.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var Gem = function (_Sprite) {
	_inherits(Gem, _Sprite);

	function Gem() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Gem);

		var _this = _possibleConstructorReturn(this, (Gem.__proto__ || Object.getPrototypeOf(Gem)).call(this, 'gem', {
			imageSrc: 'objects',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: true,
			collideGroup: 1,
			// animate: {
			// 	name: 'Rotate',
			// 	options: {
			// 		duration: 500,
			// 		startValue: 0,
			// 		endValue: 2*Math.PI,
			// 		easing: 'linear',
			// 		loop: true
			// 	}
			// },
			animations: {
				mainLoop: {
					frameDuration: 4,
					frames: [{
						offsetX: 136,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 170,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 204,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 238,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 272,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 306,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 340,
						offsetY: 189,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 1
				}
			}
		}));

		options = options || {};

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;
		return _this;
	}

	_createClass(Gem, [{
		key: 'reset',
		value: function reset() {
			var _this2 = this;

			var that = this;

			_get(Gem.prototype.__proto__ || Object.getPrototypeOf(Gem.prototype), 'reset', this).call(this);

			this.setBehavior('simplefall', {
				gravity: 0.3,
				onEnd: function onEnd() {
					_this2.moving = false;
				},
				onGround: function onGround() {
					_athenajs.AudioManager.play('bounce');
				}
			});

			this.currentMovement = '';
			this.setAnimation('mainLoop');

			this.running = true;
		}
	}]);

	return Gem;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('Gem', Gem);

exports.default = Gem;

/***/ }),
/* 52 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./gods/js/sprites/GodsSprite.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


// TODO: extend Sprite to create our special gods sprites here
var godsSprite = function (_Sprite) {
	_inherits(godsSprite, _Sprite);

	function godsSprite(options) {
		_classCallCheck(this, godsSprite);

		return _possibleConstructorReturn(this, (godsSprite.__proto__ || Object.getPrototypeOf(godsSprite)).call(this, 'gods', Object.assign(true, {
			imageSrc: 'sprites',
			pool: options.pool,
			canCollide: true,
			// inventory stuff
			data: {
				maxEnergy: 10,
				money: 0,
				carrying: [],
				weapon: ''
			},
			behavior: 'player',
			behaviorOptions: {
				animations: {
					climbUp: 'climb'
				}
			},
			// animate: {
			// 	name: 'Rotate',
			// 	options: {
			// 		duration: 1000,
			// 		startValue: 0,
			// 		endValue: 2*Math.PI,
			// 		easing: 'linear',
			// 		loop: true
			// 	}
			// },
			animations: {
				standStill: {
					frameDuration: 1,
					frames: [{
						offsetX: 396,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				turnLeft: {
					frameDuration: 4,
					frames: [{
						offsetX: 396,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 988,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				turnRight: {
					frameDuration: 4,
					frames: [{
						offsetX: 396,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 464,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				faceWall: {
					frameDuration: 1,
					frames: [{
						offsetX: 199,
						offsetY: 99,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				jumpright: {
					frameDuration: 1,
					frames: [{
						offsetX: 530,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 726,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 792,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				jumpleft: {
					frameDuration: 1,
					frames: [{
						offsetX: 302,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 230,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 166,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					/*                            flipFrom: 'jumpright',
                                 flipType: 1,*/
					loop: 0
				},
				climb: {
					frameDuration: 5,
					frames: [{
						offsetX: 200,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 264,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 328,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 392,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					loop: 1,
					loopFrom: 1
				},
				fireright: {
					frameDuration: 2,
					frames: [{
						offsetX: 0,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 66,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 132,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					rewindOnEnd: true,
					loop: 0
				},
				fireleft: {
					frameDuration: 2,
					frames: [{
						offsetX: 132,
						offsetY: 0,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 66,
						offsetY: 0,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 0,
						offsetY: 0,
						w: 64,
						h: 96,
						hitBox: {
							x: 1,
							y: 4,
							x2: 62,
							y2: 95
						},
						plane: 0
					}],
					rewindOnEnd: true,
					loop: 0
				},
				fallleft: {
					frameDuration: 1,
					frames: [{
						offsetX: 100,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				fallright: {
					frameDuration: 1,
					frames: [{
						offsetX: 858,
						offsetY: 100,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					loop: 0
				},
				goDownright: {
					frameDuration: 1,
					frames: [{
						offsetX: 464,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 20,
							x2: 58,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 530,
						offsetY: 98,
						w: 64,
						h: 96,
						hitBox: {
							x: 2,
							y: 20,
							x2: 58,
							y2: 95
						},
						plane: 0
					}],
					loop: 0,
					rewindOnEnd: true
				},
				goDownleft: {
					frameDuration: 1,
					frames: [{
						offsetX: 384,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 10,
							y: 20,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 318,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 10,
							y: 20,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					loop: 0,
					rewindOnEnd: true
				},
				walkRight: {
					frameDuration: 3,
					frames: [{
						offsetX: 528,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 594,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 660,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 726,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 792,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 858,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 924,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 990,
						offsetY: 2,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					rewindOnEnd: true, // should we rewind when reaching the last frame ?,
					loopFrom: 0,
					loop: 1
				},
				walkLeft: {
					frameDuration: 3,
					frames: [{
						offsetX: 924,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 858,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 792,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 726,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 660,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 594,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 528,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}, {
						offsetX: 464,
						offsetY: 298,
						w: 64,
						h: 96,
						hitBox: {
							x: 3,
							y: 1,
							x2: 60,
							y2: 95
						},
						plane: 0
					}],
					rewindOnEnd: true, // should we rewind when reaching the last frame ?,
					loop: 1,
					loopFrom: 0
				}
			},
			frameDuration: 10,
			visible: true
		}, options)));
	}

	_createClass(godsSprite, [{
		key: 'reset',
		value: function reset() {
			_get(godsSprite.prototype.__proto__ || Object.getPrototypeOf(godsSprite.prototype), 'reset', this).call(this);

			this.lookDirection = '';
			this.currentMovement = '';

			/*                setTimeout(function() {
                       that.setBehavior('player', {
                           vx: 2,
                           vy: 0
                       });
                   }, 1000);*/

			this.energy = this._settings.data.maxEnergy;

			// should we reset weapon here ?
			/*                this.weapon = '';*/

			this.lookDirection = '';
			this.currentMovement = '';
			this.setAnimation('standStill');
		}
	}, {
		key: 'setAnimation',
		value: function setAnimation(name, fn, frameNum, revert) {
			// console.log('[GodsSprite] Setting animation to', name);
			_get(godsSprite.prototype.__proto__ || Object.getPrototypeOf(godsSprite.prototype), 'setAnimation', this).call(this, name, fn, frameNum, revert);
		}
	}, {
		key: 'explode',
		value: function explode() {}
	}, {
		key: 'checkKeys',
		value: function checkKeys() {}
	}, {
		key: 'onDamage',
		value: function onDamage(hitPoints) {
			// TODO: calculate here and passe it to hit ?
			this.energy -= hitPoints;

			if (this.energy <= 0) {
				this.energy = 0;
				// TODO
				// 1: destroy
				// 2: play death animation
				// 3: onEnd, call send death
				_athenajs.AudioManager.play('death');
				this.canCollide = false;
				this.clearMove();
				this.visible = false;
				// TODO: add 5 random death elements
				// and remove the above line

				// *** NM.notify('player:death'); from sceneHud !!
				var death = new (_athenajs.ResourceManager.getResourceById('DeathExplosion'))({
					x: this.x - 20,
					y: this.y
				});

				death.onAnimationEnd(function () {
					death.visible = false;
					setTimeout(function () {
						_athenajs.NotificationManager.notify('player:death');
					}, 700);
				});

				this.currentMap.addObject(death);
			} else {
				_athenajs.AudioManager.play('hit2');
				// TODO: sprite should not collide for a few ms ?
			}

			_athenajs.NotificationManager.notify('player:hit', {
				damage: hitPoints
			});
		}
	}, {
		key: 'onCollision',
		value: function onCollision(sprite) {
			switch (sprite.type) {
				case 'help':
					// console.log('sending game:message');
					_athenajs.NotificationManager.notify('game:message', {
						message: sprite._settings.data.message
					});

					sprite.destroy();

					_athenajs.AudioManager.play('take_bonus');
					break;

				case 'enemy1':
				case 'flying-enemy1':
				case 'spearWood':
					// TODO: call sprite.destroy() method (to be implemented)
					this.onDamage(sprite._settings.data.damage);
					break;

				case 'knife':
					// TODO: change weapon
					// TODO: play sound ?
					console.log('need to catch knife');
					this.weapon = 'weapon';
					_athenajs.AudioManager.play('take_bonus');
					// this.weapon = 'knife';
					sprite.destroy();
					break;

				default:
					sprite.destroy();
					_athenajs.AudioManager.play('take_bonus');
					// console.log('onCollision called on non-handled sprite type', sprite.type);
					break;
			}
			_get(godsSprite.prototype.__proto__ || Object.getPrototypeOf(godsSprite.prototype), 'onCollision', this).call(this);
		}
	}, {
		key: 'onEvent',
		value: function onEvent(eventType, data) {
			// TODO: do we hold a weapon ?
			var result = false;

			switch (eventType) {
				case 'fire':
					if (this.weapon) {
						var weapon = new (_athenajs.ResourceManager.getResourceById('Weapon'))({
							x: data.direction === 'left' ? this.x - 15 : this.x + this.getCurrentWidth() - 15,
							y: this.y + 20,
							data: {
								direction: data.direction
							}
						});
						this.currentMap.addObject(weapon);
						_athenajs.AudioManager.play('weapon_throw');

						result = true;
					}
					break;
			}

			return result;
		}
	}]);

	return godsSprite;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('GodsSprite', godsSprite);

exports.default = godsSprite;

/***/ }),
/* 53 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./gods/js/sprites/LifeMetter.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
				value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*jshint esversion: 6*/


var LifeMetter = function (_Sprite) {
				_inherits(LifeMetter, _Sprite);

				function LifeMetter() {
								var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

								_classCallCheck(this, LifeMetter);

								var _this = _possibleConstructorReturn(this, (LifeMetter.__proto__ || Object.getPrototypeOf(LifeMetter)).call(this, 'lifemetter', {
												imageSrc: 'objects',
												x: options.x,
												y: options.y,
												pool: options.pool,
												animations: {
																mainLoop: {
																				frameDuration: 4,
																				frames: [{
																								offsetX: 136,
																								offsetY: 227,
																								w: 48,
																								h: 48,
																								plane: 0
																				}, {
																								offsetX: 202,
																								offsetY: 227,
																								w: 48,
																								h: 48,
																								plane: 0
																				}, {
																								offsetX: 268,
																								offsetY: 227,
																								w: 48,
																								h: 48,
																								plane: 0
																				}, {
																								offsetX: 334,
																								offsetY: 227,
																								w: 48,
																								h: 48,
																								plane: 0
																				}],
																				loop: 1
																}
												}
								}));
								// options = options || {};

								options.x = typeof options.x !== 'undefined' ? options.x : 600;
								options.y = typeof options.y !== 'undefined' ? options.y : 300;

								_this.maxEnergy = options.maxEnergy || 10;
								return _this;
				}

				_createClass(LifeMetter, [{
								key: 'reset',
								value: function reset() {
												var that = this;

												_get(LifeMetter.prototype.__proto__ || Object.getPrototypeOf(LifeMetter.prototype), 'reset', this).call(this);

												this.addMask();

												this.currentMovement = '';
												this.setAnimation('mainLoop');

												this.running = true;
								}
				}, {
								key: 'addMask',
								value: function addMask() {
												// var MetterMask = require('sprites/LifeMetterMask').default;
												var MetterMask = _athenajs.ResourceManager.getResourceById('LifeMetterMask');

												this.maskSprite = new MetterMask({
																x: this.x,
																y: this.y + 12
												});

												this.addChild(this.maskSprite);
								}
				}, {
								key: 'updateMetterHeight',
								value: function updateMetterHeight(hitPoints) {
												// TODO: this should be animated (inside lifeMetterMask ?)
												var maskSprite = this.maskSprite,
												    height = maskSprite.height;

												maskSprite.height += 2 * hitPoints;

												if (maskSprite.height > 24) {
																maskSprite.height = 24;
												} else if (maskSprite.height <= 0) {
																maskSprite.height = 0;
												}

												/*                maskSprite.animate('Custom', {
                                duration: 400,
                                startValue: height,
                                endValue: height + (2 * hitPoints),
                                easing: 'linear',
                                callback: function(value) {
                                    maskSprite.height = parseInt(value);
                                }
                            });*/
								}
				}]);

				return LifeMetter;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('LifeMetter', LifeMetter);

exports.default = LifeMetter;

/***/ }),
/* 54 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./gods/js/sprites/LifeMetterMask.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LifeMetterMask = function (_Sprite) {
	_inherits(LifeMetterMask, _Sprite);

	function LifeMetterMask() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, LifeMetterMask);

		var _this = _possibleConstructorReturn(this, (LifeMetterMask.__proto__ || Object.getPrototypeOf(LifeMetterMask)).call(this, 'lifemettermask', {
			imageSrc: 'objects',
			x: options.x,
			y: options.y,
			pool: options.pool,
			animations: {
				mainLoop: {
					frameDuration: 1,
					frames: [{
						offsetX: 400,
						offsetY: 239,
						w: 48,
						h: 24,
						plane: 0
					}],
					loop: 0
				}
			}
		}));

		var that = _this;

		// options = options || {};

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;

		_this.height = typeof options.height !== 'undefined' ? options.height : 0;

		_this.running = true;
		return _this;
	}

	_createClass(LifeMetterMask, [{
		key: 'reset',
		value: function reset() {
			_get(LifeMetterMask.prototype.__proto__ || Object.getPrototypeOf(LifeMetterMask.prototype), 'reset', this).call(this);

			this.currentMovement = '';
		}
		// override sprite's getCurrentHeight to alter height depending
		// on energy

	}, {
		key: 'getCurrentHeight',
		value: function getCurrentHeight() {
			return this.height;
		}
	}]);

	return LifeMetterMask;
}(_athenajs.Sprite);

_athenajs.ResourceManager.registerScript('LifeMetterMask', LifeMetterMask);

exports.default = LifeMetterMask;

/***/ }),
/* 55 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./gods/js/sprites/MovingPlatform.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MovingPlatform = function (_Sprite) {
	_inherits(MovingPlatform, _Sprite);

	function MovingPlatform() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, MovingPlatform);

		// options = options || {};

		var _this = _possibleConstructorReturn(this, (MovingPlatform.__proto__ || Object.getPrototypeOf(MovingPlatform)).call(this, 'movingPlatform', {
			imageSrc: 'tiles',
			x: options.x,
			y: options.y,
			pool: options.pool,
			map: options.map,
			collideGroup: 3,
			animations: {
				mainLoop: {
					frameDuration: 1,
					frames: [{
						offsetX: 1244,
						offsetY: 335,
						w: 130,
						h: 32,
						hitBox: {
							x: 0,
							y: 0,
							x2: 129,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				}
			}
		}));

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;

		_this.running = true;
		return _this;
	}

	return MovingPlatform;
}(_athenajs.Sprite);

;

_athenajs.ResourceManager.registerScript('MovingPlatform', MovingPlatform);

exports.default = MovingPlatform;

/***/ }),
/* 56 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./gods/js/sprites/SmallItem.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SmallItem = function (_Sprite) {
	_inherits(SmallItem, _Sprite);

	function SmallItem() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SmallItem);

		var _this = _possibleConstructorReturn(this, (SmallItem.__proto__ || Object.getPrototypeOf(SmallItem)).call(this, options.data && options.data.itemType || '', {
			imageSrc: 'objects',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: true,
			collideGroup: 1,
			data: options.data || {},
			animations: {
				mainLoop: {
					frameDuration: 1,
					frames: [{
						offsetX: options.data && items[options.data.itemType].x,
						offsetY: options.data && items[options.data.itemType].y,
						w: 31,
						h: 31,
						hitBox: {
							x: 13,
							y: 14, // 3,
							x2: 18,
							y2: 31 // 31
						},
						plane: 0
					}],
					loop: 0
				},
				disappear: {
					frameDuration: 1,
					frames: [{
						offsetX: 272,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 306,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 340,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 374,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 408,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 442,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 476,
						offsetY: 114,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				}
			}
		}));
		// if (options.pool) {
		//     return;
		// }

		// var itemType = options.data.itemType;

		if (options.pool) {
			return _possibleConstructorReturn(_this);
		}

		if (options.data.fall || typeof options.data.fall === 'undefined') {
			_this.setBehavior('simplefall', {
				gravity: .3,
				vy: options.vy || 0,
				onEnd: function onEnd() {
					_this.moving = false;
				},
				onGround: function onGround() {
					_athenajs.AudioManager.play('bounce');
				}
			});
		}

		_this.running = true;
		return _this;
	}

	_createClass(SmallItem, [{
		key: 'destroy',
		value: function destroy() {
			var _this2 = this;

			// since _super is only defined during destroy's lifetime, we need to save a reference to call later
			// var _sup = super.destroy.bind(this);

			// only call parent's super once disappear animation has been played
			this.setAnimation('disappear', function () {
				_get(SmallItem.prototype.__proto__ || Object.getPrototypeOf(SmallItem.prototype), 'destroy', _this2).call(_this2);
			});
		}
	}, {
		key: 'onCollision',
		value: function onCollision(sprite) {
			this.canCollide = false;
		}
	}, {
		key: 'reset',
		value: function reset() {
			_get(SmallItem.prototype.__proto__ || Object.getPrototypeOf(SmallItem.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			this.setAnimation('mainLoop');
		}
	}]);

	return SmallItem;
}(_athenajs.Sprite);

;

var items = {
	'knife': {
		x: 456,
		y: 37
	},
	'life': {
		x: 238,
		y: 0
	},
	'help': {
		x: 0,
		y: 75
	},
	'apple': {
		x: 102,
		y: 75
	}
};

_athenajs.ResourceManager.registerScript('SmallItem', SmallItem);

exports.default = SmallItem;

/***/ }),
/* 57 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./gods/js/sprites/Spear.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Spear = function (_Sprite) {
	_inherits(Spear, _Sprite);

	function Spear(options) {
		_classCallCheck(this, Spear);

		var _this = _possibleConstructorReturn(this, (Spear.__proto__ || Object.getPrototypeOf(Spear)).call(this, 'spear', {
			imageSrc: 'objects',
			x: options.x, // 790,
			y: options.y, //480,
			pool: options.pool,
			canCollide: false,
			animations: {
				mainLoop: {
					frameDuration: 2,
					frames: [{
						offsetX: 0,
						offsetY: 227,
						w: 32,
						h: 32,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 34,
						offsetY: 227,
						w: 32,
						h: 32,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 68,
						offsetY: 227,
						w: 32,
						h: 32,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 102,
						offsetY: 227,
						w: 32,
						h: 32,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 1
				}
			}
		}));

		var that = _this;

		options = options || {};

		_this.soundRef = null;
		return _this;
	}

	_createClass(Spear, [{
		key: 'draw',
		value: function draw(ctx, debug) {
			// console.log(this.woodSprite.x, this.x);
			// this.woodSprite.draw(ctx, debug);
			_get(Spear.prototype.__proto__ || Object.getPrototypeOf(Spear.prototype), 'draw', this).call(this, ctx, debug);
		}
	}, {
		key: 'reset',
		value: function reset() {
			_get(Spear.prototype.__proto__ || Object.getPrototypeOf(Spear.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			this.setAnimation('mainLoop');

			this.setBehavior('inout', {
				vx: 0,
				vy: 1,
				minX: 0,
				minY: 16,
				gravity: 0
			});
		}
	}]);

	return Spear;
}(_athenajs.Sprite);

;

_athenajs.ResourceManager.registerScript('Spear', Spear);

exports.default = Spear;

/***/ }),
/* 58 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./gods/js/sprites/SpearWood.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
import Sprite from 'Object/Sprite';
import RM from 'Resource/ResourceManager';
import AM from 'Audio/AudioManager';
*/

var SpearWood = function (_Sprite) {
	_inherits(SpearWood, _Sprite);

	function SpearWood(options) {
		_classCallCheck(this, SpearWood);

		var _this = _possibleConstructorReturn(this, (SpearWood.__proto__ || Object.getPrototypeOf(SpearWood)).call(this, 'spearWood', {
			imageSrc: 'objects',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: true,
			collideGroup: 1,
			data: options.data || {},
			animations: {
				mainLoop: {
					frameDuration: 1,
					frames: [{
						offsetX: 0,
						offsetY: 258,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				}
			}
		}));

		var that = _this;

		options = options || {};

		_this.soundRef = null;
		return _this;
	}

	_createClass(SpearWood, [{
		key: 'reset',
		value: function reset() {
			_get(SpearWood.prototype.__proto__ || Object.getPrototypeOf(SpearWood.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			this.setAnimation('mainLoop');

			this.addSpearSprite();

			/*                this.soundRef = AM.play('spike', true);*/
		}
	}, {
		key: 'addSpearSprite',
		value: function addSpearSprite() {
			this.addChild(new (_athenajs.ResourceManager.getResourceById('Spear'))({
				x: this.x,
				y: this.y - 16 /* bad: hardcoded */
			}));
		}
	}, {
		key: 'destroy',
		value: function destroy() {
			if (this.soundRef) {
				_athenajs.AudioManager.stop('spike', this.soundRef);
				this.soundRef = null;
			}

			// do not forget to call the super method!
			_get(SpearWood.prototype.__proto__ || Object.getPrototypeOf(SpearWood.prototype), 'destroy', this).call(this);
		}
	}]);

	return SpearWood;
}(_athenajs.Sprite);

;

_athenajs.ResourceManager.registerScript('SpearWood', SpearWood);

exports.default = SpearWood;

/***/ }),
/* 59 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./gods/js/sprites/Switch.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
import Sprite from 'Object/Sprite';
import AM from 'Audio/AudioManager';
*/
var Switch = function (_Sprite) {
	_inherits(Switch, _Sprite);

	function Switch() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Switch);

		var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, 'switch', {
			imageSrc: 'objects',
			x: options.x,
			y: options.y,
			pool: options.pool,
			objectId: options.objectId || '',
			animations: {
				unactivated: {
					frameDuration: 1,
					frames: [{
						offsetX: 204,
						offsetY: 37,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				},
				activated: {
					frameDuration: 1,
					frames: [{
						offsetX: 238,
						offsetY: 37,
						w: 31,
						h: 31,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				}
			}
		}));

		var that = _this;

		// options = options || {};

		options.x = typeof options.x !== 'undefined' ? options.x : 600;
		options.y = typeof options.y !== 'undefined' ? options.y : 300;

		// switch-specific options
		_this.isActivated = options.isActivated || false;
		// /switch-specific options

		_this.running = true;
		return _this;
	}

	_createClass(Switch, [{
		key: 'toggleSwitch',
		value: function toggleSwitch() {
			this.isActivated = !this.isActivated;

			this.setAnimationFromSwitch();

			_athenajs.AudioManager.play('leverActivated', this.soundRef);
		}
	}, {
		key: 'reset',
		value: function reset() {
			_get(Switch.prototype.__proto__ || Object.getPrototypeOf(Switch.prototype), 'reset', this).call(this);

			this.currentMovement = '';

			this.setAnimationFromSwitch();
		}
	}, {
		key: 'setAnimationFromSwitch',
		value: function setAnimationFromSwitch() {
			this.setAnimation(this.isActivated ? 'activated' : 'unactivated');
		}
	}]);

	return Switch;
}(_athenajs.Sprite);

;

_athenajs.ResourceManager.registerScript('Switch', Switch);

exports.default = Switch;

/***/ }),
/* 60 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./gods/js/sprites/Weapon.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _athenajs = __webpack_require__(/*! athenajs */ 4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Weapon = function (_Sprite) {
	_inherits(Weapon, _Sprite);

	function Weapon() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Weapon);

		var _this = _possibleConstructorReturn(this, (Weapon.__proto__ || Object.getPrototypeOf(Weapon)).call(this, 'knife', {
			imageSrc: 'enemies',
			x: options.x,
			y: options.y,
			pool: options.pool,
			canCollide: true,
			collideGroup: 2,
			data: Object.assign({
				weaponType: 'knife',
				direction: 'right'
			}, options.data),
			animations: {
				knife_left: {
					frameDuration: 1,
					frames: [{
						w: 31,
						h: 31,
						offsetX: 0,
						offsetY: 221,
						hitBox: {
							x: 13,
							y: 14, // 6,
							x2: 17,
							y2: 18 // 24
						},
						plane: 0
					}],
					loop: 0
				},
				knife_right: {
					frameDuration: 1,
					frames: [{
						w: 31,
						h: 31,
						offsetX: 33,
						offsetY: 221,
						hitBox: {
							x: 13,
							y: 14, // 6,
							x2: 17,
							y2: 18 // 24
						},
						plane: 0
					}],
					loop: 0
				},
				disappear: {
					frameDuration: 1,
					frames: [{
						offsetX: 0,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 34,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 68,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 102,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 136,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 170,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 204,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 238,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 272,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 306,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}, {
						offsetX: 340,
						offsetY: 262,
						w: 32,
						h: 30,
						hitBox: {
							x: 0,
							y: 0,
							x2: 31,
							y2: 31
						},
						plane: 0
					}],
					loop: 0
				}
			}
		}));
		// options.data = Object.assign({
		//     weaponType: 'knife',
		//     direction: 'right'
		// }, options.data);

		// this.weaponType = options.data.weaponType;

		var that = _this;

		// options = options || {};

		if (options.pool) {
			return _possibleConstructorReturn(_this);
		}

		options.data = Object.assign({
			weaponType: 'knife',
			direction: 'right'
		}, options.data);

		_this.weaponType = options.data.weaponType;
		_this.animName = _this.weaponType + '_' + options.data.direction;

		_this.animate('Rotate', {
			startValue: options.data.direction == 'left' ? 2 * Math.PI : 0,
			endValue: options.data.direction == 'left' ? 0 : 2 * Math.PI,
			duration: 800,
			loop: true
		});

		_this.setBehavior('weapon', {
			vx: options.data.direction == 'left' ? -6 : 6,
			vy: 0,
			gravity: 0,
			onVXChange: function onVXChange(vx) {
				_this.destroy(true);
			}
		});

		_this.setAnimation(_this.animName);

		_this.running = true;
		return _this;
	}

	_createClass(Weapon, [{
		key: 'destroy',
		value: function destroy(destroyAnimation) {
			// since _super is only defined during destroy's lifetime, we need to save a reference to call later
			var _sup = _get(Weapon.prototype.__proto__ || Object.getPrototypeOf(Weapon.prototype), 'destroy', this).bind(this);

			this.moving = false;
			this.stopAnimate();

			if (destroyAnimation) {
				// only call parent's super once disappear animation has been played
				this.setAnimation('disappear', function () {
					_sup();
				});
				this.playSound('weapon_crash');
			} else {
				_get(Weapon.prototype.__proto__ || Object.getPrototypeOf(Weapon.prototype), 'destroy', this).call(this);
			}
		}
	}, {
		key: 'onCollision',
		value: function onCollision(sprite) {
			this.canCollide = false;
			this.destroy();
		}
	}, {
		key: 'reset',
		value: function reset() {
			_get(Weapon.prototype.__proto__ || Object.getPrototypeOf(Weapon.prototype), 'reset', this).call(this);

			this.currentMovement = '';
			// console.log('setting animation', this.animName);
			// this.setAnimation(this.animName);
		}
	}]);

	return Weapon;
}(_athenajs.Sprite);

;

_athenajs.ResourceManager.registerScript('Weapon', Weapon);

exports.default = Weapon;

/***/ }),
/* 61 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/debug/src/debug.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ 66);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 62 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./~/events/events.js ***!
  \****************************/
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 63 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/html-entities/index.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(/*! ./lib/xml-entities.js */ 65),
  Html4Entities: __webpack_require__(/*! ./lib/html4-entities.js */ 64),
  Html5Entities: __webpack_require__(/*! ./lib/html5-entities.js */ 20),
  AllHtmlEntities: __webpack_require__(/*! ./lib/html5-entities.js */ 20)
};


/***/ }),
/* 64 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/html-entities/lib/html4-entities.js ***!
  \***********************************************/
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;


/***/ }),
/* 65 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/html-entities/lib/xml-entities.js ***!
  \*********************************************/
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLenght = str.length;
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;


/***/ }),
/* 66 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** ./~/ms/index.js ***!
  \***********************/
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 67 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** ./~/punycode/punycode.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 35)(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ 2)))

/***/ }),
/* 68 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./~/querystring-es3/decode.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 69 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./~/querystring-es3/encode.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 70 */
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ./~/querystring-es3/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ 68);
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ 69);


/***/ }),
/* 71 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/requires-port/index.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};


/***/ }),
/* 72 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./~/sockjs-client/lib/entry.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var transportList = __webpack_require__(/*! ./transport-list */ 81);

module.exports = __webpack_require__(/*! ./main */ 79)(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 73 */
/* unknown exports provided */
/* all exports used */
/*!********************************************!*\
  !*** ./~/sockjs-client/lib/event/close.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , Event = __webpack_require__(/*! ./event */ 16)
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;


/***/ }),
/* 74 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/sockjs-client/lib/event/trans-message.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , Event = __webpack_require__(/*! ./event */ 16)
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;


/***/ }),
/* 75 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./~/sockjs-client/lib/facade.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSON3 = __webpack_require__(/*! json3 */ 7)
  , iframeUtils = __webpack_require__(/*! ./utils/iframe */ 13)
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;


/***/ }),
/* 76 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/sockjs-client/lib/iframe-bootstrap.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var urlUtils = __webpack_require__(/*! ./utils/url */ 6)
  , eventUtils = __webpack_require__(/*! ./utils/event */ 8)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , FacadeJS = __webpack_require__(/*! ./facade */ 75)
  , InfoIframeReceiver = __webpack_require__(/*! ./info-iframe-receiver */ 23)
  , iframeUtils = __webpack_require__(/*! ./utils/iframe */ 13)
  , loc = __webpack_require__(/*! ./location */ 24)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1)))

/***/ }),
/* 77 */
/* unknown exports provided */
/* all exports used */
/*!********************************************!*\
  !*** ./~/sockjs-client/lib/info-iframe.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , utils = __webpack_require__(/*! ./utils/event */ 8)
  , IframeTransport = __webpack_require__(/*! ./transport/iframe */ 29)
  , InfoReceiverIframe = __webpack_require__(/*! ./info-iframe-receiver */ 23)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 78 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/sockjs-client/lib/info-receiver.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  , urlUtils = __webpack_require__(/*! ./utils/url */ 6)
  , XDR = __webpack_require__(/*! ./transport/sender/xdr */ 18)
  , XHRCors = __webpack_require__(/*! ./transport/sender/xhr-cors */ 15)
  , XHRLocal = __webpack_require__(/*! ./transport/sender/xhr-local */ 11)
  , XHRFake = __webpack_require__(/*! ./transport/sender/xhr-fake */ 90)
  , InfoIframe = __webpack_require__(/*! ./info-iframe */ 77)
  , InfoAjax = __webpack_require__(/*! ./info-ajax */ 22)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1)))

/***/ }),
/* 79 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./~/sockjs-client/lib/main.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

__webpack_require__(/*! ./shims */ 80);

var URL = __webpack_require__(/*! url-parse */ 34)
  , inherits = __webpack_require__(/*! inherits */ 0)
  , JSON3 = __webpack_require__(/*! json3 */ 7)
  , random = __webpack_require__(/*! ./utils/random */ 10)
  , escape = __webpack_require__(/*! ./utils/escape */ 95)
  , urlUtils = __webpack_require__(/*! ./utils/url */ 6)
  , eventUtils = __webpack_require__(/*! ./utils/event */ 8)
  , transport = __webpack_require__(/*! ./utils/transport */ 97)
  , objectUtils = __webpack_require__(/*! ./utils/object */ 19)
  , browser = __webpack_require__(/*! ./utils/browser */ 12)
  , log = __webpack_require__(/*! ./utils/log */ 96)
  , Event = __webpack_require__(/*! ./event/event */ 16)
  , EventTarget = __webpack_require__(/*! ./event/eventtarget */ 21)
  , loc = __webpack_require__(/*! ./location */ 24)
  , CloseEvent = __webpack_require__(/*! ./event/close */ 73)
  , TransportMessageEvent = __webpack_require__(/*! ./event/trans-message */ 74)
  , InfoReceiver = __webpack_require__(/*! ./info-receiver */ 78)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = __webpack_require__(/*! ./version */ 33);

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  __webpack_require__(/*! ./iframe-bootstrap */ 76)(SockJS, availableTransports);
  return SockJS;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 1), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 80 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./~/sockjs-client/lib/shims.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */
/* jscs: disable */


// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);


/***/ }),
/* 81 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/sockjs-client/lib/transport-list.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = [
  // streaming transports
  __webpack_require__(/*! ./transport/websocket */ 91)
, __webpack_require__(/*! ./transport/xhr-streaming */ 93)
, __webpack_require__(/*! ./transport/xdr-streaming */ 31)
, __webpack_require__(/*! ./transport/eventsource */ 27)
, __webpack_require__(/*! ./transport/lib/iframe-wrap */ 17)(__webpack_require__(/*! ./transport/eventsource */ 27))

  // polling transports
, __webpack_require__(/*! ./transport/htmlfile */ 28)
, __webpack_require__(/*! ./transport/lib/iframe-wrap */ 17)(__webpack_require__(/*! ./transport/htmlfile */ 28))
, __webpack_require__(/*! ./transport/xhr-polling */ 32)
, __webpack_require__(/*! ./transport/xdr-polling */ 92)
, __webpack_require__(/*! ./transport/lib/iframe-wrap */ 17)(__webpack_require__(/*! ./transport/xhr-polling */ 32))
, __webpack_require__(/*! ./transport/jsonp-polling */ 83)
];


/***/ }),
/* 82 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/browser/websocket.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 83 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/jsonp-polling.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = __webpack_require__(/*! inherits */ 0)
  , SenderReceiver = __webpack_require__(/*! ./lib/sender-receiver */ 30)
  , JsonpReceiver = __webpack_require__(/*! ./receiver/jsonp */ 88)
  , jsonpSender = __webpack_require__(/*! ./sender/jsonp */ 89)
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 84 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/lib/buffered-sender.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 85 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/lib/polling.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 86 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/receiver/eventsource.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , EventSourceDriver = __webpack_require__(/*! eventsource */ 26)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1)))

/***/ }),
/* 87 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/sockjs-client/lib/transport/receiver/htmlfile.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , iframeUtils = __webpack_require__(/*! ../../utils/iframe */ 13)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , random = __webpack_require__(/*! ../../utils/random */ 10)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1), __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 88 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/receiver/jsonp.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var utils = __webpack_require__(/*! ../../utils/iframe */ 13)
  , random = __webpack_require__(/*! ../../utils/random */ 10)
  , browser = __webpack_require__(/*! ../../utils/browser */ 12)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  , inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1), __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 89 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/sender/jsonp.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var random = __webpack_require__(/*! ../../utils/random */ 10)
  , urlUtils = __webpack_require__(/*! ../../utils/url */ 6)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../process/browser.js */ 1), __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 90 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/sender/xhr-fake.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , inherits = __webpack_require__(/*! inherits */ 0)
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;


/***/ }),
/* 91 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/sockjs-client/lib/transport/websocket.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ../utils/event */ 8)
  , urlUtils = __webpack_require__(/*! ../utils/url */ 6)
  , inherits = __webpack_require__(/*! inherits */ 0)
  , EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter
  , WebsocketDriver = __webpack_require__(/*! ./driver/websocket */ 82)
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 1)))

/***/ }),
/* 92 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/sockjs-client/lib/transport/xdr-polling.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ 0)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  , XdrStreamingTransport = __webpack_require__(/*! ./xdr-streaming */ 31)
  , XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ 14)
  , XDRObject = __webpack_require__(/*! ./sender/xdr */ 18)
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;


/***/ }),
/* 93 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./~/sockjs-client/lib/transport/xhr-streaming.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var inherits = __webpack_require__(/*! inherits */ 0)
  , AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ 9)
  , XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ 14)
  , XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ 15)
  , XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ 11)
  , browser = __webpack_require__(/*! ../utils/browser */ 12)
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 94 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/sockjs-client/lib/utils/browser-crypto.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 95 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/sockjs-client/lib/utils/escape.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSON3 = __webpack_require__(/*! json3 */ 7);

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};


/***/ }),
/* 96 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./~/sockjs-client/lib/utils/log.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),
/* 97 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/sockjs-client/lib/utils/transport.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = __webpack_require__(/*! debug */ 3)('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../process/browser.js */ 1)))

/***/ }),
/* 98 */
/* unknown exports provided */
/* all exports used */
/*!*******************************!*\
  !*** ./~/strip-ansi/index.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ 40)();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),
/* 99 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/url-parse/~/querystringify/index.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  //
  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
  // the lastIndex property so we can continue executing this loop until we've
  // parsed all results.
  //
  for (;
    part = parser.exec(query);
    result[decode(part[1])] = decode(part[2])
  );

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;


/***/ }),
/* 100 */
/* unknown exports provided */
/* all exports used */
/*!**********************!*\
  !*** ./~/url/url.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ 67);
var util = __webpack_require__(/*! ./util */ 101);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ 70);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 101 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** ./~/url/util.js ***!
  \***********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 102 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).
var ansiHTML = __webpack_require__(/*! ansi-html */ 39);
var Entities = __webpack_require__(/*! html-entities */ 63).AllHtmlEntities;
var entities = new Entities();

var colors = {
	reset: ["transparent", "transparent"],
	black: "181818",
	red: "E36049",
	green: "B3CB74",
	yellow: "FFD080",
	blue: "7CAFC2",
	magenta: "7FACCA",
	cyan: "C3C2EF",
	lightgrey: "EBE7E3",
	darkgrey: "6D7891"
};
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
	var iframe = document.createElement("iframe");
	iframe.id = "webpack-dev-server-client-overlay";
	iframe.src = "about:blank";
	iframe.style.position = "fixed";
	iframe.style.left = 0;
	iframe.style.top = 0;
	iframe.style.right = 0;
	iframe.style.bottom = 0;
	iframe.style.width = "100vw";
	iframe.style.height = "100vh";
	iframe.style.border = "none";
	iframe.style.zIndex = 9999999999;
	iframe.onload = onIframeLoad;
	return iframe;
}

function addOverlayDivTo(iframe) {
	var div = iframe.contentDocument.createElement("div");
	div.id = "webpack-dev-server-client-overlay-div";
	div.style.position = "fixed";
	div.style.boxSizing = "border-box";
	div.style.left = 0;
	div.style.top = 0;
	div.style.right = 0;
	div.style.bottom = 0;
	div.style.width = "100vw";
	div.style.height = "100vh";
	div.style.backgroundColor = "black";
	div.style.color = "#E8E8E8";
	div.style.fontFamily = "Menlo, Consolas, monospace";
	div.style.fontSize = "large";
	div.style.padding = "2rem";
	div.style.lineHeight = "1.2";
	div.style.whiteSpace = "pre-wrap";
	div.style.overflow = "auto";
	iframe.contentDocument.body.appendChild(div);
	return div;
}

var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;

function ensureOverlayDivExists(onOverlayDivReady) {
	if(overlayDiv) {
	// Everything is ready, call the callback right away.
		onOverlayDivReady(overlayDiv);
		return;
	}

	// Creating an iframe may be asynchronous so we'll schedule the callback.
	// In case of multiple calls, last callback wins.
	lastOnOverlayDivReady = onOverlayDivReady;

	if(overlayIframe) {
		// We're already creating it.
		return;
	}

	// Create iframe and, when it is ready, a div inside it.
	overlayIframe = createOverlayIframe(function onIframeLoad() {
		overlayDiv = addOverlayDivTo(overlayIframe);
		// Now we can talk!
		lastOnOverlayDivReady(overlayDiv);
	});

	// Zalgo alert: onIframeLoad() will be called either synchronously
	// or asynchronously depending on the browser.
	// We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.
	document.body.appendChild(overlayIframe);
}

function showMessageOverlay(message) {
	ensureOverlayDivExists(function onOverlayDivReady(overlayDiv) {
		// Make it look similar to our terminal.
		overlayDiv.innerHTML =
			"<span style=\"color: #" +
			colors.red +
			"\">Failed to compile.</span><br><br>" +
			ansiHTML(entities.encode(message));
	});
}

function destroyErrorOverlay() {
	if(!overlayDiv) {
		// It is not there in the first place.
		return;
	}

	// Clean up and reset internal state.
	document.body.removeChild(overlayIframe);
	overlayDiv = null;
	overlayIframe = null;
	lastOnOverlayDivReady = null;
}

// Successful compilation.
exports.clear = function handleSuccess() {
	destroyErrorOverlay();
}

// Compilation with errors (e.g. syntax error or missing modules).
exports.showMessage = function handleMessage(messages) {
	showMessageOverlay(messages[0]);
}


/***/ }),
/* 103 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

var SockJS = __webpack_require__(/*! sockjs-client */ 72);

var retries = 0;
var sock = null;

function socket(url, handlers) {
	sock = new SockJS(url);

	sock.onopen = function() {
		retries = 0;
	}

	sock.onclose = function() {
		if(retries === 0)
			handlers.close();

		// Try to reconnect.
		sock = null;

		// After 10 retries stop trying, to prevent logspam.
		if(retries <= 10) {
			// Exponentially increase timeout to reconnect.
			// Respectfully copied from the package `got`.
			var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
			retries += 1;

			setTimeout(function() {
				socket(url, handlers);
			}, retryInMs);
		}
	};

	sock.onmessage = function(e) {
		// This assumes that all data sent via the websocket is JSON.
		var msg = JSON.parse(e.data);
		if(handlers[msg.type])
			handlers[msg.type](msg.data);
	};
}

module.exports = socket;


/***/ }),
/* 104 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 105 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ 62);
module.exports = new EventEmitter();


/***/ }),
/* 106 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************************!*\
  !*** multi webpack-dev-server/client?http://127.0.0.1:8888 ./gods/js/gods.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! webpack-dev-server/client?http://127.0.0.1:8888 */37);
module.exports = __webpack_require__(/*! ./gods/js/gods.js */36);


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map